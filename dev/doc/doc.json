[
    {
        "defines": [
            {
                "desc": "```lua\nLogLevel:\n    | \"none\"\n    | \"verbose\"\n    | \"action\"\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n```",
                "finish": [
                    45,
                    69
                ],
                "rawdesc": "```lua\nLogLevel:\n    | \"none\"\n    | \"verbose\"\n    | \"action\"\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n```",
                "start": [
                    45,
                    10
                ],
                "type": "doc.alias",
                "view": "\"action\"|\"error\"|\"info\"|\"none\"|\"verbose\"...(+1)"
            }
        ],
        "fields": [],
        "name": "LogLevel",
        "type": "type",
        "view": "LogLevel"
    },
    {
        "DOC": "/home/et/.minetest/games/spacea",
        "defines": [],
        "fields": [],
        "name": "LuaLS",
        "type": "luals.config"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit/util.lua",
                "finish": [
                    3,
                    15
                ],
                "start": [
                    3,
                    10
                ],
                "type": "doc.class",
                "view": "Proto",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "Proto",
        "type": "type",
        "view": "Proto"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            0,
                            20
                        ],
                        "start": [
                            0,
                            15
                        ],
                        "type": "doc.extends.name",
                        "view": "table"
                    }
                ],
                "file": "mods/spacea_api/data_structures/sets.lua",
                "finish": [
                    0,
                    20
                ],
                "start": [
                    0,
                    10
                ],
                "type": "doc.class",
                "view": "Set",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                26,
                                8
                            ],
                            "name": "self",
                            "start": [
                                26,
                                8
                            ],
                            "type": "self",
                            "view": "Set"
                        },
                        {
                            "finish": [
                                26,
                                26
                            ],
                            "name": "element",
                            "start": [
                                26,
                                19
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        26,
                        52
                    ],
                    "start": [
                        26,
                        0
                    ],
                    "type": "function",
                    "view": "(method) Set:add(element: any)"
                },
                "file": "mods/spacea_api/data_structures/sets.lua",
                "finish": [
                    26,
                    18
                ],
                "name": "add",
                "start": [
                    26,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                29,
                                8
                            ],
                            "name": "self",
                            "start": [
                                29,
                                8
                            ],
                            "type": "self",
                            "view": "Set"
                        },
                        {
                            "finish": [
                                29,
                                31
                            ],
                            "name": "elements",
                            "start": [
                                29,
                                23
                            ],
                            "type": "local",
                            "view": "any[]"
                        }
                    ],
                    "finish": [
                        31,
                        3
                    ],
                    "start": [
                        29,
                        0
                    ],
                    "type": "function",
                    "view": "(method) Set:add_all(elements: any[])"
                },
                "file": "mods/spacea_api/data_structures/sets.lua",
                "finish": [
                    29,
                    22
                ],
                "name": "add_all",
                "start": [
                    29,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                36,
                                8
                            ],
                            "name": "self",
                            "start": [
                                36,
                                8
                            ],
                            "type": "self",
                            "view": "Set"
                        },
                        {
                            "finish": [
                                36,
                                31
                            ],
                            "name": "element",
                            "start": [
                                36,
                                24
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        36,
                        57
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean|nil"
                        }
                    ],
                    "start": [
                        36,
                        0
                    ],
                    "type": "function",
                    "view": "(method) Set:contains(element: any)\n  -> boolean|nil"
                },
                "file": "mods/spacea_api/data_structures/sets.lua",
                "finish": [
                    36,
                    23
                ],
                "name": "contains",
                "start": [
                    36,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                6,
                                20
                            ],
                            "name": "t",
                            "start": [
                                6,
                                19
                            ],
                            "type": "local",
                            "view": "any[]"
                        },
                        {
                            "finish": [
                                6,
                                28
                            ],
                            "name": "set_mt",
                            "start": [
                                6,
                                22
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "finish": [
                        11,
                        3
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "Set|table<any, boolean>"
                        }
                    ],
                    "start": [
                        6,
                        0
                    ],
                    "type": "function",
                    "view": "function Set.new(t: any[], set_mt?: boolean)\n  -> Set|table<any, boolean>"
                },
                "file": "mods/spacea_api/data_structures/sets.lua",
                "finish": [
                    6,
                    18
                ],
                "name": "new",
                "start": [
                    6,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                18,
                                8
                            ],
                            "name": "self",
                            "start": [
                                18,
                                8
                            ],
                            "type": "self",
                            "view": "Set"
                        },
                        {
                            "finish": [
                                18,
                                29
                            ],
                            "name": "element",
                            "start": [
                                18,
                                22
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        18,
                        54
                    ],
                    "start": [
                        18,
                        0
                    ],
                    "type": "function",
                    "view": "(method) Set:remove(element: any)"
                },
                "file": "mods/spacea_api/data_structures/sets.lua",
                "finish": [
                    18,
                    21
                ],
                "name": "remove",
                "start": [
                    18,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                21,
                                8
                            ],
                            "name": "self",
                            "start": [
                                21,
                                8
                            ],
                            "type": "self",
                            "view": "Set"
                        },
                        {
                            "finish": [
                                21,
                                34
                            ],
                            "name": "elements",
                            "start": [
                                21,
                                26
                            ],
                            "type": "local",
                            "view": "any[]"
                        }
                    ],
                    "finish": [
                        23,
                        3
                    ],
                    "start": [
                        21,
                        0
                    ],
                    "type": "function",
                    "view": "(method) Set:remove_all(elements: any[])"
                },
                "file": "mods/spacea_api/data_structures/sets.lua",
                "finish": [
                    21,
                    25
                ],
                "name": "remove_all",
                "start": [
                    21,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "Set",
        "type": "type",
        "view": "Set"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " Short for \"spacea\"\n You will need this a LOT trust me",
                "file": "mods/spacea_api/init.lua",
                "finish": [
                    4,
                    16
                ],
                "rawdesc": " Short for \"spacea\"\n You will need this a LOT trust me",
                "start": [
                    4,
                    10
                ],
                "type": "doc.class",
                "view": "Spacea",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        1,
                        10
                    ],
                    "start": [
                        1,
                        8
                    ],
                    "type": "table",
                    "view": "Set"
                },
                "file": "mods/spacea_api/data_structures/sets.lua",
                "finish": [
                    1,
                    5
                ],
                "name": "Set",
                "start": [
                    1,
                    0
                ],
                "type": "setfield",
                "view": "Set",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        2,
                        8
                    ],
                    "start": [
                        2,
                        6
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "mods/spacea_api/functional.lua",
                "finish": [
                    2,
                    3
                ],
                "name": "f",
                "start": [
                    2,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " equivalent to an *ipairs* loop\n\n@*param* `t` — array",
                "extends": {
                    "args": [
                        {
                            "desc": "array",
                            "finish": [
                                3,
                                20
                            ],
                            "name": "t",
                            "rawdesc": "array",
                            "start": [
                                3,
                                19
                            ],
                            "type": "local",
                            "view": "table<integer, any>"
                        },
                        {
                            "finish": [
                                3,
                                23
                            ],
                            "name": "f",
                            "start": [
                                3,
                                22
                            ],
                            "type": "local",
                            "view": "fun(v: any, i: integer)"
                        }
                    ],
                    "desc": " equivalent to an *ipairs* loop\n\n@*param* `t` — array",
                    "finish": [
                        7,
                        3
                    ],
                    "rawdesc": " equivalent to an *ipairs* loop",
                    "start": [
                        3,
                        0
                    ],
                    "type": "function",
                    "view": "function s.foreach(t: table<integer, any>, f: fun(v: any, i: integer))"
                },
                "file": "mods/spacea_api/utils.lua",
                "finish": [
                    3,
                    18
                ],
                "name": "foreach",
                "rawdesc": " equivalent to an *ipairs* loop",
                "start": [
                    3,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " equivalent to a *pairs* loop\n Ordering is randomized\n\n@*param* `t` — any table",
                "extends": {
                    "args": [
                        {
                            "desc": "any table",
                            "finish": [
                                13,
                                21
                            ],
                            "name": "t",
                            "rawdesc": "any table",
                            "start": [
                                13,
                                20
                            ],
                            "type": "local",
                            "view": "table<any, any>"
                        },
                        {
                            "finish": [
                                13,
                                24
                            ],
                            "name": "f",
                            "start": [
                                13,
                                23
                            ],
                            "type": "local",
                            "view": "fun(v: any, k: any)"
                        }
                    ],
                    "desc": " equivalent to a *pairs* loop\n Ordering is randomized\n\n@*param* `t` — any table",
                    "finish": [
                        17,
                        3
                    ],
                    "rawdesc": " equivalent to a *pairs* loop\n Ordering is randomized",
                    "start": [
                        13,
                        0
                    ],
                    "type": "function",
                    "view": "function s.foreachp(t: table<any, any>, f: fun(v: any, k: any))"
                },
                "file": "mods/spacea_api/utils.lua",
                "finish": [
                    13,
                    19
                ],
                "name": "foreachp",
                "rawdesc": " equivalent to a *pairs* loop\n Ordering is randomized",
                "start": [
                    13,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " Loads the path of <mod dir>/<path>.lua\n\n@*param* `path` — Without .lua file extension",
                "extends": {
                    "args": [
                        {
                            "desc": "Without .lua file extension",
                            "finish": [
                                10,
                                25
                            ],
                            "name": "path",
                            "rawdesc": "Without .lua file extension",
                            "start": [
                                10,
                                21
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Loads the path of <mod dir>/<path>.lua\n\n@*param* `path` — Without .lua file extension",
                    "finish": [
                        12,
                        3
                    ],
                    "rawdesc": " Loads the path of <mod dir>/<path>.lua",
                    "start": [
                        10,
                        0
                    ],
                    "type": "function",
                    "view": "function s.load_file(path: string)"
                },
                "file": "mods/spacea_api/init.lua",
                "finish": [
                    10,
                    20
                ],
                "name": "load_file",
                "rawdesc": " Loads the path of <mod dir>/<path>.lua",
                "start": [
                    10,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                20,
                                27
                            ],
                            "name": "paths",
                            "start": [
                                20,
                                22
                            ],
                            "type": "local",
                            "view": "string[]"
                        }
                    ],
                    "finish": [
                        22,
                        3
                    ],
                    "start": [
                        20,
                        0
                    ],
                    "type": "function",
                    "view": "function s.load_files(paths: string[])"
                },
                "file": "mods/spacea_api/utils.lua",
                "finish": [
                    20,
                    21
                ],
                "name": "load_files",
                "start": [
                    20,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        0,
                        13
                    ],
                    "start": [
                        0,
                        11
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "mods/spacea_player/init.lua",
                "finish": [
                    0,
                    8
                ],
                "name": "player",
                "start": [
                    0,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        3,
                        13
                    ],
                    "start": [
                        3,
                        11
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "mods/spacea_api/strict.lua",
                "finish": [
                    3,
                    8
                ],
                "name": "strict",
                "start": [
                    3,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " An attempt to follow https://semver.org/\n I mean like, dont be super sweaty about it, but the numbers should mean something",
                "extends": {
                    "finish": [
                        7,
                        1
                    ],
                    "start": [
                        2,
                        12
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "mods/spacea_api/version.lua",
                "finish": [
                    2,
                    9
                ],
                "name": "version",
                "rawdesc": " An attempt to follow https://semver.org/\n I mean like, dont be super sweaty about it, but the numbers should mean something",
                "start": [
                    2,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "Spacea",
        "type": "type",
        "view": "Spacea"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit/util.lua",
                "finish": [
                    2,
                    15
                ],
                "start": [
                    2,
                    10
                ],
                "type": "doc.class",
                "view": "Trace",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "Trace",
        "type": "type",
        "view": "Trace"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?[\"en-us/51/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
                "extends": {
                    "desc": "\nA global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?[\"en-us/51/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
                    "finish": [
                        70,
                        7
                    ],
                    "rawdesc": "\nA global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?[\"en-us/51/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
                    "start": [
                        70,
                        5
                    ],
                    "type": "table",
                    "view": "_G"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    70,
                    2
                ],
                "rawdesc": "\nA global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?[\"en-us/51/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
                "start": [
                    70,
                    0
                ],
                "type": "setglobal",
                "view": "_G",
                "visible": "public"
            }
        ],
        "name": "_G",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?[\"en-us/51/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    69,
                    12
                ],
                "rawdesc": "\nA global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?[\"en-us/51/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
                "start": [
                    69,
                    10
                ],
                "type": "doc.class",
                "view": "_G",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "_G",
        "type": "type",
        "view": "_G"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA global variable (not a function) that holds a string containing the running Lua version.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_VERSION\"])\n",
                "extends": {
                    "finish": [
                        395,
                        20
                    ],
                    "start": [
                        395,
                        11
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    395,
                    8
                ],
                "rawdesc": "\nA global variable (not a function) that holds a string containing the running Lua version.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_VERSION\"])\n",
                "start": [
                    395,
                    0
                ],
                "type": "setglobal",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "_VERSION",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/builtin.lua",
                "finish": [
                    3,
                    13
                ],
                "start": [
                    3,
                    10
                ],
                "type": "doc.class",
                "view": "any",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "any",
        "type": "type",
        "view": "any"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCommand-line arguments of Lua Standalone.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-arg\"])\n",
                "extends": {
                    "finish": [
                        8,
                        8
                    ],
                    "start": [
                        8,
                        6
                    ],
                    "type": "table",
                    "view": "string[]"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    8,
                    3
                ],
                "rawdesc": "\nCommand-line arguments of Lua Standalone.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-arg\"])\n",
                "start": [
                    8,
                    0
                ],
                "type": "setglobal",
                "view": "string[]",
                "visible": "public"
            }
        ],
        "name": "arg",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nRaises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `\"assertion failed!\"`\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-assert\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                21,
                                17
                            ],
                            "name": "v",
                            "start": [
                                21,
                                16
                            ],
                            "type": "local",
                            "view": "<T>?"
                        },
                        {
                            "finish": [
                                21,
                                26
                            ],
                            "name": "message",
                            "start": [
                                21,
                                19
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                21,
                                31
                            ],
                            "start": [
                                21,
                                28
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nRaises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `\"assertion failed!\"`\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-assert\"])",
                    "finish": [
                        21,
                        36
                    ],
                    "rawdesc": "\nRaises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `\"assertion failed!\"`\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-assert\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        21,
                        0
                    ],
                    "type": "function",
                    "view": "function assert(v?: <T>, message?: any, ...any)\n  -> <T>\n  2. ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    21,
                    15
                ],
                "rawdesc": "\nRaises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `\"assertion failed!\"`\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-assert\"])",
                "start": [
                    21,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "assert",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        4,
                        8
                    ],
                    "start": [
                        4,
                        6
                    ],
                    "type": "table",
                    "view": "bitlib"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    4,
                    3
                ],
                "start": [
                    4,
                    0
                ],
                "type": "setglobal",
                "view": "bitlib",
                "visible": "public"
            }
        ],
        "name": "bit",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                56,
                                22
                            ],
                            "name": "x",
                            "start": [
                                56,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                56,
                                25
                            ],
                            "name": "n",
                            "start": [
                                56,
                                24
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        56,
                        30
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        56,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.arshift(x: integer, n: integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    56,
                    20
                ],
                "name": "arshift",
                "start": [
                    56,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "bit.arshift",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                32,
                                19
                            ],
                            "name": "x",
                            "start": [
                                32,
                                18
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                32,
                                24
                            ],
                            "start": [
                                32,
                                21
                            ],
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        32,
                        29
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        32,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.band(x: integer, ...integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    32,
                    17
                ],
                "name": "band",
                "start": [
                    32,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "bit.band",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                20,
                                19
                            ],
                            "name": "x",
                            "start": [
                                20,
                                18
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        20,
                        24
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        20,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.bnot(x: integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    20,
                    17
                ],
                "name": "bnot",
                "start": [
                    20,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "bit.bnot",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                26,
                                18
                            ],
                            "name": "x",
                            "start": [
                                26,
                                17
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                26,
                                23
                            ],
                            "start": [
                                26,
                                20
                            ],
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        26,
                        28
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        26,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.bor(x: integer, ...integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    26,
                    16
                ],
                "name": "bor",
                "start": [
                    26,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "bit.bor",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                73,
                                20
                            ],
                            "name": "x",
                            "start": [
                                73,
                                19
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        73,
                        25
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        73,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.bswap(x: integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    73,
                    18
                ],
                "name": "bswap",
                "start": [
                    73,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "bit.bswap",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                38,
                                19
                            ],
                            "name": "x",
                            "start": [
                                38,
                                18
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                38,
                                24
                            ],
                            "start": [
                                38,
                                21
                            ],
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        38,
                        29
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        38,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.bxor(x: integer, ...integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    38,
                    17
                ],
                "name": "bxor",
                "start": [
                    38,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "bit.bxor",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                44,
                                21
                            ],
                            "name": "x",
                            "start": [
                                44,
                                20
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                44,
                                24
                            ],
                            "name": "n",
                            "start": [
                                44,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        44,
                        29
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        44,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.lshift(x: integer, n: integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    44,
                    19
                ],
                "name": "lshift",
                "start": [
                    44,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "bit.lshift",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                62,
                                18
                            ],
                            "name": "x",
                            "start": [
                                62,
                                17
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                62,
                                21
                            ],
                            "name": "n",
                            "start": [
                                62,
                                20
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        62,
                        26
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        62,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.rol(x: integer, n: integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    62,
                    16
                ],
                "name": "rol",
                "start": [
                    62,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "bit.rol",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                68,
                                18
                            ],
                            "name": "x",
                            "start": [
                                68,
                                17
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                68,
                                21
                            ],
                            "name": "n",
                            "start": [
                                68,
                                20
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        68,
                        26
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        68,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.ror(x: integer, n: integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    68,
                    16
                ],
                "name": "ror",
                "start": [
                    68,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "bit.ror",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                50,
                                21
                            ],
                            "name": "x",
                            "start": [
                                50,
                                20
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                50,
                                24
                            ],
                            "name": "n",
                            "start": [
                                50,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        50,
                        29
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        50,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.rshift(x: integer, n: integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    50,
                    19
                ],
                "name": "rshift",
                "start": [
                    50,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "bit.rshift",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                9,
                                20
                            ],
                            "name": "x",
                            "start": [
                                9,
                                19
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        9,
                        25
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        9,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.tobit(x: integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    9,
                    18
                ],
                "name": "tobit",
                "start": [
                    9,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "bit.tobit",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                15,
                                20
                            ],
                            "name": "x",
                            "start": [
                                15,
                                19
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                15,
                                23
                            ],
                            "name": "n",
                            "start": [
                                15,
                                22
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "finish": [
                        15,
                        28
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        15,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.tohex(x: integer, n?: integer)\n  -> y: string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    15,
                    18
                ],
                "name": "tohex",
                "start": [
                    15,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "bit.tohex",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    3,
                    16
                ],
                "start": [
                    3,
                    10
                ],
                "type": "doc.class",
                "view": "bitlib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                56,
                                22
                            ],
                            "name": "x",
                            "start": [
                                56,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                56,
                                25
                            ],
                            "name": "n",
                            "start": [
                                56,
                                24
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        56,
                        30
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        56,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.arshift(x: integer, n: integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    56,
                    20
                ],
                "name": "arshift",
                "start": [
                    56,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                32,
                                19
                            ],
                            "name": "x",
                            "start": [
                                32,
                                18
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                32,
                                24
                            ],
                            "start": [
                                32,
                                21
                            ],
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        32,
                        29
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        32,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.band(x: integer, ...integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    32,
                    17
                ],
                "name": "band",
                "start": [
                    32,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                20,
                                19
                            ],
                            "name": "x",
                            "start": [
                                20,
                                18
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        20,
                        24
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        20,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.bnot(x: integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    20,
                    17
                ],
                "name": "bnot",
                "start": [
                    20,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                26,
                                18
                            ],
                            "name": "x",
                            "start": [
                                26,
                                17
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                26,
                                23
                            ],
                            "start": [
                                26,
                                20
                            ],
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        26,
                        28
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        26,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.bor(x: integer, ...integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    26,
                    16
                ],
                "name": "bor",
                "start": [
                    26,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                73,
                                20
                            ],
                            "name": "x",
                            "start": [
                                73,
                                19
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        73,
                        25
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        73,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.bswap(x: integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    73,
                    18
                ],
                "name": "bswap",
                "start": [
                    73,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                38,
                                19
                            ],
                            "name": "x",
                            "start": [
                                38,
                                18
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                38,
                                24
                            ],
                            "start": [
                                38,
                                21
                            ],
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        38,
                        29
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        38,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.bxor(x: integer, ...integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    38,
                    17
                ],
                "name": "bxor",
                "start": [
                    38,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                44,
                                21
                            ],
                            "name": "x",
                            "start": [
                                44,
                                20
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                44,
                                24
                            ],
                            "name": "n",
                            "start": [
                                44,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        44,
                        29
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        44,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.lshift(x: integer, n: integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    44,
                    19
                ],
                "name": "lshift",
                "start": [
                    44,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                62,
                                18
                            ],
                            "name": "x",
                            "start": [
                                62,
                                17
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                62,
                                21
                            ],
                            "name": "n",
                            "start": [
                                62,
                                20
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        62,
                        26
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        62,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.rol(x: integer, n: integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    62,
                    16
                ],
                "name": "rol",
                "start": [
                    62,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                68,
                                18
                            ],
                            "name": "x",
                            "start": [
                                68,
                                17
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                68,
                                21
                            ],
                            "name": "n",
                            "start": [
                                68,
                                20
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        68,
                        26
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        68,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.ror(x: integer, n: integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    68,
                    16
                ],
                "name": "ror",
                "start": [
                    68,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                50,
                                21
                            ],
                            "name": "x",
                            "start": [
                                50,
                                20
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                50,
                                24
                            ],
                            "name": "n",
                            "start": [
                                50,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        50,
                        29
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        50,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.rshift(x: integer, n: integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    50,
                    19
                ],
                "name": "rshift",
                "start": [
                    50,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                9,
                                20
                            ],
                            "name": "x",
                            "start": [
                                9,
                                19
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        9,
                        25
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        9,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.tobit(x: integer)\n  -> y: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    9,
                    18
                ],
                "name": "tobit",
                "start": [
                    9,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                15,
                                20
                            ],
                            "name": "x",
                            "start": [
                                15,
                                19
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                15,
                                23
                            ],
                            "name": "n",
                            "start": [
                                15,
                                22
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "finish": [
                        15,
                        28
                    ],
                    "returns": [
                        {
                            "name": "y",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        15,
                        0
                    ],
                    "type": "function",
                    "view": "function bit.tohex(x: integer, n?: integer)\n  -> y: string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/bit.lua",
                "finish": [
                    15,
                    18
                ],
                "name": "tohex",
                "start": [
                    15,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "bitlib",
        "type": "type",
        "view": "bitlib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/builtin.lua",
                "finish": [
                    5,
                    17
                ],
                "start": [
                    5,
                    10
                ],
                "type": "doc.class",
                "view": "boolean",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "boolean",
        "type": "type",
        "view": "boolean"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nThis function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-collectgarbage\"])\n\n\n```lua\nopt:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"setpause\" -- Set `pause`.\n    | \"setstepmul\" -- Set `step multiplier`.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                41,
                                27
                            ],
                            "name": "opt",
                            "start": [
                                41,
                                24
                            ],
                            "type": "local",
                            "view": "(\"collect\"|\"count\"|\"isrunning\"|\"restart\"|\"setpause\"...(+3))?"
                        },
                        {
                            "finish": [
                                41,
                                32
                            ],
                            "name": "arg",
                            "start": [
                                41,
                                29
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nThis function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-collectgarbage\"])\n\n\n```lua\nopt:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"setpause\" -- Set `pause`.\n    | \"setstepmul\" -- Set `step multiplier`.\n```",
                    "finish": [
                        41,
                        37
                    ],
                    "rawdesc": "\nThis function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-collectgarbage\"])\n\n\n```lua\nopt:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"setpause\" -- Set `pause`.\n    | \"setstepmul\" -- Set `step multiplier`.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        41,
                        0
                    ],
                    "type": "function",
                    "view": "function collectgarbage(opt?: \"collect\"|\"count\"|\"isrunning\"|\"restart\"|\"setpause\"...(+3), arg?: integer)\n  -> any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    41,
                    23
                ],
                "rawdesc": "\nThis function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-collectgarbage\"])\n\n\n```lua\nopt:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"setpause\" -- Set `pause`.\n    | \"setstepmul\" -- Set `step multiplier`.\n```",
                "start": [
                    41,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "collectgarbage",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    20,
                    14
                ],
                "start": [
                    20,
                    10
                ],
                "type": "doc.class",
                "view": "core",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    20,
                    14
                ],
                "start": [
                    20,
                    10
                ],
                "type": "doc.class",
                "view": "core",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                29,
                                24
                            ],
                            "name": "time",
                            "start": [
                                29,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                29,
                                30
                            ],
                            "name": "func",
                            "start": [
                                29,
                                26
                            ],
                            "type": "local",
                            "view": "fun(...any)"
                        },
                        {
                            "finish": [
                                29,
                                35
                            ],
                            "start": [
                                29,
                                32
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "finish": [
                        29,
                        40
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "core.Job"
                        }
                    ],
                    "start": [
                        29,
                        0
                    ],
                    "type": "function",
                    "view": "function core.after(time: number, func: fun(...any), ...any)\n  -> core.Job"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    29,
                    19
                ],
                "name": "after",
                "start": [
                    29,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                266,
                                32
                            ],
                            "name": "text",
                            "start": [
                                266,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        266,
                        37
                    ],
                    "start": [
                        266,
                        0
                    ],
                    "type": "function",
                    "view": "function core.chat_send_all(text: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    266,
                    27
                ],
                "name": "chat_send_all",
                "start": [
                    266,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                217,
                                32
                            ],
                            "name": "text",
                            "start": [
                                217,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        217,
                        37
                    ],
                    "start": [
                        217,
                        0
                    ],
                    "type": "function",
                    "view": "function core.chat_send_all(text: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    217,
                    27
                ],
                "name": "chat_send_all",
                "start": [
                    217,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * `name`: Name of the player",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                271,
                                35
                            ],
                            "name": "name",
                            "start": [
                                271,
                                31
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                271,
                                41
                            ],
                            "name": "text",
                            "start": [
                                271,
                                37
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " * `name`: Name of the player",
                    "finish": [
                        271,
                        46
                    ],
                    "rawdesc": " * `name`: Name of the player",
                    "start": [
                        271,
                        0
                    ],
                    "type": "function",
                    "view": "function core.chat_send_player(name: string, text: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    271,
                    30
                ],
                "name": "chat_send_player",
                "rawdesc": " * `name`: Name of the player",
                "start": [
                    271,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                221,
                                35
                            ],
                            "name": "name",
                            "start": [
                                221,
                                31
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                221,
                                41
                            ],
                            "name": "text",
                            "start": [
                                221,
                                37
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        221,
                        46
                    ],
                    "start": [
                        221,
                        0
                    ],
                    "type": "function",
                    "view": "function core.chat_send_player(name: string, text: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    221,
                    30
                ],
                "name": "chat_send_player",
                "start": [
                    221,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "@*return* — Result, missing privileges",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                260,
                                47
                            ],
                            "name": "player_or_name",
                            "start": [
                                260,
                                33
                            ],
                            "type": "local",
                            "view": "string|core.Player"
                        },
                        {
                            "finish": [
                                260,
                                52
                            ],
                            "start": [
                                260,
                                49
                            ],
                            "type": "...",
                            "view": "string"
                        }
                    ],
                    "desc": "@*return* — Result, missing privileges",
                    "finish": [
                        260,
                        57
                    ],
                    "returns": [
                        {
                            "desc": "Result, missing privileges",
                            "rawdesc": "Result, missing privileges",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "desc": "Result, missing privileges",
                            "rawdesc": "Result, missing privileges",
                            "type": "function.return",
                            "view": "{ [string]: boolean }"
                        }
                    ],
                    "start": [
                        260,
                        0
                    ],
                    "type": "function",
                    "view": "function core.check_player_privs(player_or_name: string|core.Player, ...string)\n  -> boolean\n  2. { [string]: boolean }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    260,
                    32
                ],
                "name": "check_player_privs",
                "start": [
                    260,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "@*return* — Result, missing privileges",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                211,
                                47
                            ],
                            "name": "player_or_name",
                            "start": [
                                211,
                                33
                            ],
                            "type": "local",
                            "view": "string|core.Player"
                        },
                        {
                            "finish": [
                                211,
                                52
                            ],
                            "start": [
                                211,
                                49
                            ],
                            "type": "...",
                            "view": "string"
                        }
                    ],
                    "desc": "@*return* — Result, missing privileges",
                    "finish": [
                        211,
                        57
                    ],
                    "returns": [
                        {
                            "desc": "Result, missing privileges",
                            "rawdesc": "Result, missing privileges",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "desc": "Result, missing privileges",
                            "rawdesc": "Result, missing privileges",
                            "type": "function.return",
                            "view": "{ [string]: boolean }"
                        }
                    ],
                    "start": [
                        211,
                        0
                    ],
                    "type": "function",
                    "view": "function core.check_player_privs(player_or_name: string|core.Player, ...string)\n  -> boolean\n  2. { [string]: boolean }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    211,
                    32
                ],
                "name": "check_player_privs",
                "start": [
                    211,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                51,
                                23
                            ],
                            "start": [
                                51,
                                20
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "finish": [
                        51,
                        28
                    ],
                    "start": [
                        51,
                        0
                    ],
                    "type": "function",
                    "view": "function core.debug(...any)"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    51,
                    19
                ],
                "name": "debug",
                "start": [
                    51,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Used by the server to format a chat message, based on the setting `chat_message_format`.\n   Refer to the documentation of the setting for a list of valid placeholders.\n * Takes player name and message, and returns the formatted string to be sent to players.\n * Can be redefined by mods if required, for things like colored names or messages.\n * **Only** the first occurrence of each placeholder will be replaced.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                282,
                                38
                            ],
                            "name": "name",
                            "start": [
                                282,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                282,
                                47
                            ],
                            "name": "message",
                            "start": [
                                282,
                                40
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " * Used by the server to format a chat message, based on the setting `chat_message_format`.\n   Refer to the documentation of the setting for a list of valid placeholders.\n * Takes player name and message, and returns the formatted string to be sent to players.\n * Can be redefined by mods if required, for things like colored names or messages.\n * **Only** the first occurrence of each placeholder will be replaced.",
                    "finish": [
                        282,
                        52
                    ],
                    "rawdesc": " * Used by the server to format a chat message, based on the setting `chat_message_format`.\n   Refer to the documentation of the setting for a list of valid placeholders.\n * Takes player name and message, and returns the formatted string to be sent to players.\n * Can be redefined by mods if required, for things like colored names or messages.\n * **Only** the first occurrence of each placeholder will be replaced.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        282,
                        0
                    ],
                    "type": "function",
                    "view": "function core.format_chat_message(name: string, message: string)\n  -> string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    282,
                    33
                ],
                "name": "format_chat_message",
                "rawdesc": " * Used by the server to format a chat message, based on the setting `chat_message_format`.\n   Refer to the documentation of the setting for a list of valid placeholders.\n * Takes player name and message, and returns the formatted string to be sent to players.\n * Can be redefined by mods if required, for things like colored names or messages.\n * **Only** the first occurrence of each placeholder will be replaced.",
                "start": [
                    282,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                227,
                                38
                            ],
                            "name": "name",
                            "start": [
                                227,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                227,
                                47
                            ],
                            "name": "message",
                            "start": [
                                227,
                                40
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        227,
                        52
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        227,
                        0
                    ],
                    "type": "function",
                    "view": "function core.format_chat_message(name: string, message: string)\n  -> string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    227,
                    33
                ],
                "name": "format_chat_message",
                "start": [
                    227,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "returns the currently loading mod's name, when loading a mod.",
                "extends": {
                    "args": [],
                    "desc": "returns the currently loading mod's name, when loading a mod.",
                    "finish": [
                        7,
                        39
                    ],
                    "rawdesc": "returns the currently loading mod's name, when loading a mod.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        7,
                        0
                    ],
                    "type": "function",
                    "view": "function core.get_current_modname()\n  -> string"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    7,
                    33
                ],
                "name": "get_current_modname",
                "rawdesc": "returns the currently loading mod's name, when loading a mod.",
                "start": [
                    7,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                43,
                                26
                            ],
                            "name": "pos",
                            "start": [
                                43,
                                23
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "finish": [
                        43,
                        31
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "core.MetaDataRef"
                        }
                    ],
                    "start": [
                        43,
                        0
                    ],
                    "type": "function",
                    "view": "function core.get_meta(pos: vector.Vector)\n  -> core.MetaDataRef"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    43,
                    22
                ],
                "name": "get_meta",
                "start": [
                    43,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                174,
                                33
                            ],
                            "name": "modname",
                            "start": [
                                174,
                                26
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        174,
                        38
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        174,
                        0
                    ],
                    "type": "function",
                    "view": "function core.get_modpath(modname: string)\n  -> string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    174,
                    25
                ],
                "name": "get_modpath",
                "start": [
                    174,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                173,
                                33
                            ],
                            "name": "modname",
                            "start": [
                                173,
                                26
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        173,
                        38
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        173,
                        0
                    ],
                    "type": "function",
                    "view": "function core.get_modpath(modname: string)\n  -> string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    173,
                    25
                ],
                "name": "get_modpath",
                "start": [
                    173,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns the node at the given position as table in the same format as `set_node`.\n * This function never returns `nil` and instead returns\n   `{name=\"ignore\", param1=0, param2=0}` for unloaded areas.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                306,
                                26
                            ],
                            "name": "pos",
                            "start": [
                                306,
                                23
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "desc": " * Returns the node at the given position as table in the same format as `set_node`.\n * This function never returns `nil` and instead returns\n   `{name=\"ignore\", param1=0, param2=0}` for unloaded areas.",
                    "finish": [
                        306,
                        31
                    ],
                    "rawdesc": " * Returns the node at the given position as table in the same format as `set_node`.\n * This function never returns `nil` and instead returns\n   `{name=\"ignore\", param1=0, param2=0}` for unloaded areas.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "{ name: string, param1: integer, param2: integer }"
                        }
                    ],
                    "start": [
                        306,
                        0
                    ],
                    "type": "function",
                    "view": "function core.get_node(pos: vector.Vector)\n  -> { name: string, param1: integer, param2: integer }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    306,
                    22
                ],
                "name": "get_node",
                "rawdesc": " * Returns the node at the given position as table in the same format as `set_node`.\n * This function never returns `nil` and instead returns\n   `{name=\"ignore\", param1=0, param2=0}` for unloaded areas.",
                "start": [
                    306,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                242,
                                26
                            ],
                            "name": "pos",
                            "start": [
                                242,
                                23
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "finish": [
                        242,
                        31
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "{ name: string, param1: integer, param2: integer }"
                        }
                    ],
                    "start": [
                        242,
                        0
                    ],
                    "type": "function",
                    "view": "function core.get_node(pos: vector.Vector)\n  -> { name: string, param1: integer, param2: integer }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    242,
                    22
                ],
                "name": "get_node",
                "start": [
                    242,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "@*return* — (str : string, ... : string) : string",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                336,
                                39
                            ],
                            "name": "textdomain",
                            "start": [
                                336,
                                29
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "@*return* — (str : string, ... : string) : string",
                    "finish": [
                        336,
                        44
                    ],
                    "returns": [
                        {
                            "desc": "(str : string, ... : string) : string",
                            "rawdesc": "(str : string, ... : string) : string",
                            "type": "function.return",
                            "view": "function"
                        }
                    ],
                    "start": [
                        336,
                        0
                    ],
                    "type": "function",
                    "view": "function core.get_translator(textdomain?: string)\n  -> function"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    336,
                    28
                ],
                "name": "get_translator",
                "start": [
                    336,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "@*return* — (str : string, ... : string) : string",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                266,
                                39
                            ],
                            "name": "textdomain",
                            "start": [
                                266,
                                29
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "@*return* — (str : string, ... : string) : string",
                    "finish": [
                        266,
                        44
                    ],
                    "returns": [
                        {
                            "desc": "(str : string, ... : string) : string",
                            "rawdesc": "(str : string, ... : string) : string",
                            "type": "function.return",
                            "view": "function"
                        }
                    ],
                    "start": [
                        266,
                        0
                    ],
                    "type": "function",
                    "view": "function core.get_translator(textdomain?: string)\n  -> function"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    266,
                    28
                ],
                "name": "get_translator",
                "start": [
                    266,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * returns true if passed 'y', 'yes', 'true' or a number that isn't zero.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                166,
                                24
                            ],
                            "name": "arg",
                            "start": [
                                166,
                                21
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " * returns true if passed 'y', 'yes', 'true' or a number that isn't zero.",
                    "finish": [
                        166,
                        29
                    ],
                    "rawdesc": " * returns true if passed 'y', 'yes', 'true' or a number that isn't zero.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        166,
                        0
                    ],
                    "type": "function",
                    "view": "function core.is_yes(arg: any)\n  -> boolean"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    166,
                    20
                ],
                "name": "is_yes",
                "rawdesc": " * returns true if passed 'y', 'yes', 'true' or a number that isn't zero.",
                "start": [
                    166,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                165,
                                24
                            ],
                            "name": "arg",
                            "start": [
                                165,
                                21
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        165,
                        29
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        165,
                        0
                    ],
                    "type": "function",
                    "view": "function core.is_yes(arg: any)\n  -> boolean"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    165,
                    20
                ],
                "name": "is_yes",
                "start": [
                    165,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "```lua\nlevel:\n    | \"none\"\n    | \"verbose\"\n    | \"action\"\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                49,
                                23
                            ],
                            "name": "level",
                            "start": [
                                49,
                                18
                            ],
                            "type": "local",
                            "view": "\"action\"|\"error\"|\"info\"|\"none\"|\"verbose\"...(+1)"
                        },
                        {
                            "finish": [
                                49,
                                28
                            ],
                            "name": "str",
                            "start": [
                                49,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "```lua\nlevel:\n    | \"none\"\n    | \"verbose\"\n    | \"action\"\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n```",
                    "finish": [
                        49,
                        33
                    ],
                    "rawdesc": "```lua\nlevel:\n    | \"none\"\n    | \"verbose\"\n    | \"action\"\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n```",
                    "start": [
                        49,
                        0
                    ],
                    "type": "function",
                    "view": "function core.log(level: \"action\"|\"error\"|\"info\"|\"none\"|\"verbose\"...(+1), str: string)"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    49,
                    17
                ],
                "name": "log",
                "rawdesc": "```lua\nlevel:\n    | \"none\"\n    | \"verbose\"\n    | \"action\"\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n```",
                "start": [
                    49,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        29,
                        55
                    ],
                    "start": [
                        29,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        29,
                                        54
                                    ],
                                    "name": {
                                        "finish": [
                                            29,
                                            37
                                        ],
                                        "start": [
                                            29,
                                            24
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    29,
                                                    37
                                                ],
                                                "start": [
                                                    29,
                                                    24
                                                ],
                                                "type": "doc.type.name",
                                                "view": "integer"
                                            }
                                        ],
                                        "view": "integer"
                                    },
                                    "start": [
                                        29,
                                        24
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.LuaEntity"
                                }
                            ],
                            "finish": [
                                29,
                                55
                            ],
                            "start": [
                                29,
                                22
                            ],
                            "type": "doc.type.table",
                            "view": "{ [integer]: core.LuaEntity }"
                        }
                    ],
                    "view": "{ [integer]: core.LuaEntity }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    29,
                    55
                ],
                "name": "luaentities",
                "start": [
                    29,
                    10
                ],
                "type": "doc.field",
                "view": "{ [integer]: core.LuaEntity }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        29,
                        55
                    ],
                    "start": [
                        29,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        29,
                                        54
                                    ],
                                    "name": {
                                        "finish": [
                                            29,
                                            37
                                        ],
                                        "start": [
                                            29,
                                            24
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    29,
                                                    37
                                                ],
                                                "start": [
                                                    29,
                                                    24
                                                ],
                                                "type": "doc.type.name",
                                                "view": "integer"
                                            }
                                        ],
                                        "view": "integer"
                                    },
                                    "start": [
                                        29,
                                        24
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.LuaEntity"
                                }
                            ],
                            "finish": [
                                29,
                                55
                            ],
                            "start": [
                                29,
                                22
                            ],
                            "type": "doc.type.table",
                            "view": "{ [integer]: core.LuaEntity }"
                        }
                    ],
                    "view": "{ [integer]: core.LuaEntity }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    29,
                    55
                ],
                "name": "luaentities",
                "start": [
                    29,
                    10
                ],
                "type": "doc.field",
                "view": "{ [integer]: core.LuaEntity }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        28,
                        55
                    ],
                    "start": [
                        28,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        28,
                                        54
                                    ],
                                    "name": {
                                        "finish": [
                                            28,
                                            37
                                        ],
                                        "start": [
                                            28,
                                            24
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    28,
                                                    37
                                                ],
                                                "start": [
                                                    28,
                                                    24
                                                ],
                                                "type": "doc.type.name",
                                                "view": "integer"
                                            }
                                        ],
                                        "view": "integer"
                                    },
                                    "start": [
                                        28,
                                        24
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.ObjectRef"
                                }
                            ],
                            "finish": [
                                28,
                                55
                            ],
                            "start": [
                                28,
                                22
                            ],
                            "type": "doc.type.table",
                            "view": "{ [integer]: core.ObjectRef }"
                        }
                    ],
                    "view": "{ [integer]: core.ObjectRef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    28,
                    55
                ],
                "name": "object_refs",
                "start": [
                    28,
                    10
                ],
                "type": "doc.field",
                "view": "{ [integer]: core.ObjectRef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        28,
                        55
                    ],
                    "start": [
                        28,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        28,
                                        54
                                    ],
                                    "name": {
                                        "finish": [
                                            28,
                                            37
                                        ],
                                        "start": [
                                            28,
                                            24
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    28,
                                                    37
                                                ],
                                                "start": [
                                                    28,
                                                    24
                                                ],
                                                "type": "doc.type.name",
                                                "view": "integer"
                                            }
                                        ],
                                        "view": "integer"
                                    },
                                    "start": [
                                        28,
                                        24
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.ObjectRef"
                                }
                            ],
                            "finish": [
                                28,
                                55
                            ],
                            "start": [
                                28,
                                22
                            ],
                            "type": "doc.type.table",
                            "view": "{ [integer]: core.ObjectRef }"
                        }
                    ],
                    "view": "{ [integer]: core.ObjectRef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    28,
                    55
                ],
                "name": "object_refs",
                "start": [
                    28,
                    10
                ],
                "type": "doc.field",
                "view": "{ [integer]: core.ObjectRef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns the string representation of `privs`\n * `delim`: String to delimit privs. Defaults to `\",\"`.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                253,
                                35
                            ],
                            "name": "privs",
                            "start": [
                                253,
                                30
                            ],
                            "type": "local",
                            "view": "{ [string]: boolean }"
                        }
                    ],
                    "desc": " * Returns the string representation of `privs`\n * `delim`: String to delimit privs. Defaults to `\",\"`.",
                    "finish": [
                        253,
                        40
                    ],
                    "rawdesc": " * Returns the string representation of `privs`\n * `delim`: String to delimit privs. Defaults to `\",\"`.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        253,
                        0
                    ],
                    "type": "function",
                    "view": "function core.privs_to_string(privs: { [string]: boolean })\n  -> string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    253,
                    29
                ],
                "name": "privs_to_string",
                "rawdesc": " * Returns the string representation of `privs`\n * `delim`: String to delimit privs. Defaults to `\",\"`.",
                "start": [
                    253,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                204,
                                35
                            ],
                            "name": "privs",
                            "start": [
                                204,
                                30
                            ],
                            "type": "local",
                            "view": "{ [string]: boolean }"
                        }
                    ],
                    "finish": [
                        204,
                        40
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        204,
                        0
                    ],
                    "type": "function",
                    "view": "function core.privs_to_string(privs: { [string]: boolean })\n  -> string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    204,
                    29
                ],
                "name": "privs_to_string",
                "start": [
                    204,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                21,
                                35
                            ],
                            "name": "f",
                            "start": [
                                21,
                                34
                            ],
                            "type": "local",
                            "view": "fun(dtime: number)"
                        }
                    ],
                    "finish": [
                        21,
                        40
                    ],
                    "start": [
                        21,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_globalstep(f: fun(dtime: number))"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    21,
                    33
                ],
                "name": "register_globalstep",
                "start": [
                    21,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " Called when a player joins the game\n last_login: The timestamp of the previous login, or nil if player is new",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                12,
                                38
                            ],
                            "name": "f",
                            "start": [
                                12,
                                37
                            ],
                            "type": "local",
                            "view": "fun(player_ref: core.Player, last_login?: integer)"
                        }
                    ],
                    "desc": " Called when a player joins the game\n last_login: The timestamp of the previous login, or nil if player is new",
                    "finish": [
                        12,
                        43
                    ],
                    "rawdesc": " Called when a player joins the game\n last_login: The timestamp of the previous login, or nil if player is new",
                    "start": [
                        12,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_on_joinplayer(f: fun(player_ref: core.Player, last_login?: integer))"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    12,
                    36
                ],
                "name": "register_on_joinplayer",
                "rawdesc": " Called when a player joins the game\n last_login: The timestamp of the previous login, or nil if player is new",
                "start": [
                    12,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " Called when a player leaves the game\n Does not get executed for connected players on shutdown.\n timed_out: True for timeout, false for other reasons.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                18,
                                39
                            ],
                            "name": "f",
                            "start": [
                                18,
                                38
                            ],
                            "type": "local",
                            "view": "fun(player_ref: core.Player, timed_out: boolean)"
                        }
                    ],
                    "desc": " Called when a player leaves the game\n Does not get executed for connected players on shutdown.\n timed_out: True for timeout, false for other reasons.",
                    "finish": [
                        18,
                        44
                    ],
                    "rawdesc": " Called when a player leaves the game\n Does not get executed for connected players on shutdown.\n timed_out: True for timeout, false for other reasons.",
                    "start": [
                        18,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_on_leaveplayer(f: fun(player_ref: core.Player, timed_out: boolean))"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    18,
                    37
                ],
                "name": "register_on_leaveplayer",
                "rawdesc": " Called when a player leaves the game\n Does not get executed for connected players on shutdown.\n timed_out: True for timeout, false for other reasons.",
                "start": [
                    18,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                32,
                                39
                            ],
                            "name": "f",
                            "start": [
                                32,
                                38
                            ],
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "finish": [
                        32,
                        44
                    ],
                    "start": [
                        32,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_on_mods_loaded(f: fun())"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    32,
                    37
                ],
                "name": "register_on_mods_loaded",
                "start": [
                    32,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Called when the server received input from `player`.\n   Specifically, this is called on any of the\n   following events:\n       * a button was pressed,\n       * Enter was pressed while the focus was on a text field\n       * a checkbox was toggled,\n       * something was selected in a dropdown list,\n       * a different tab was selected,\n       * selection was changed in a textlist or table,\n       * an entry was double-clicked in a textlist or table,\n       * a scrollbar was moved, or\n       * the form was actively closed by the player.\n * `formname` is the name passed to `core.show_formspec`.\n   Special case: The empty string refers to the player inventory\n   (the formspec set by the `set_inventory_formspec` player method).\n * Fields are sent for formspec elements which define a field. `fields`\n   is a table containing each formspecs element value (as string), with\n   the `name` parameter as index for each. The value depends on the\n   formspec element type:\n     * `animated_image`: Returns the index of the current frame.\n     * `button` and variants: If pressed, contains the user-facing button\n       text as value. If not pressed, is `nil`\n     * `field`, `textarea` and variants: Text in the field\n     * `dropdown`: Either the index or value, depending on the `index event`\n       dropdown argument.\n     * `tabheader`: Tab index, starting with `\"1\"` (only if tab changed)\n     * `checkbox`: `\"true\"` if checked, `\"false\"` if unchecked\n     * `textlist`: See `core.explode_textlist_event`\n     * `table`: See `core.explode_table_event`\n     * `scrollbar`: See `core.explode_scrollbar_event`\n     * Special case: `[\"quit\"]=\"true\"` is sent when the user actively\n       closed the form by mouse click, keypress or through a button_exit[]\n       element.\n     * Special case: `[\"key_enter\"]=\"true\"` is sent when the user pressed\n       the Enter key and the focus was either nowhere (causing the formspec\n       to be closed) or on a button. If the focus was on a text field,\n       additionally, the index `key_enter_field` contains the name of the\n       text field. See also: `field_close_on_enter`.\n * Newest functions are called first\n * If function returns `true`, remaining functions are not called",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                243,
                                72
                            ],
                            "name": "on_player_receive_fields",
                            "start": [
                                243,
                                48
                            ],
                            "type": "local",
                            "view": "fun(player: core.Player, formname: string, fields: { [string]: string }):boolean?"
                        }
                    ],
                    "desc": " * Called when the server received input from `player`.\n   Specifically, this is called on any of the\n   following events:\n       * a button was pressed,\n       * Enter was pressed while the focus was on a text field\n       * a checkbox was toggled,\n       * something was selected in a dropdown list,\n       * a different tab was selected,\n       * selection was changed in a textlist or table,\n       * an entry was double-clicked in a textlist or table,\n       * a scrollbar was moved, or\n       * the form was actively closed by the player.\n * `formname` is the name passed to `core.show_formspec`.\n   Special case: The empty string refers to the player inventory\n   (the formspec set by the `set_inventory_formspec` player method).\n * Fields are sent for formspec elements which define a field. `fields`\n   is a table containing each formspecs element value (as string), with\n   the `name` parameter as index for each. The value depends on the\n   formspec element type:\n     * `animated_image`: Returns the index of the current frame.\n     * `button` and variants: If pressed, contains the user-facing button\n       text as value. If not pressed, is `nil`\n     * `field`, `textarea` and variants: Text in the field\n     * `dropdown`: Either the index or value, depending on the `index event`\n       dropdown argument.\n     * `tabheader`: Tab index, starting with `\"1\"` (only if tab changed)\n     * `checkbox`: `\"true\"` if checked, `\"false\"` if unchecked\n     * `textlist`: See `core.explode_textlist_event`\n     * `table`: See `core.explode_table_event`\n     * `scrollbar`: See `core.explode_scrollbar_event`\n     * Special case: `[\"quit\"]=\"true\"` is sent when the user actively\n       closed the form by mouse click, keypress or through a button_exit[]\n       element.\n     * Special case: `[\"key_enter\"]=\"true\"` is sent when the user pressed\n       the Enter key and the focus was either nowhere (causing the formspec\n       to be closed) or on a button. If the focus was on a text field,\n       additionally, the index `key_enter_field` contains the name of the\n       text field. See also: `field_close_on_enter`.\n * Newest functions are called first\n * If function returns `true`, remaining functions are not called",
                    "finish": [
                        243,
                        77
                    ],
                    "rawdesc": " * Called when the server received input from `player`.\n   Specifically, this is called on any of the\n   following events:\n       * a button was pressed,\n       * Enter was pressed while the focus was on a text field\n       * a checkbox was toggled,\n       * something was selected in a dropdown list,\n       * a different tab was selected,\n       * selection was changed in a textlist or table,\n       * an entry was double-clicked in a textlist or table,\n       * a scrollbar was moved, or\n       * the form was actively closed by the player.\n * `formname` is the name passed to `core.show_formspec`.\n   Special case: The empty string refers to the player inventory\n   (the formspec set by the `set_inventory_formspec` player method).\n * Fields are sent for formspec elements which define a field. `fields`\n   is a table containing each formspecs element value (as string), with\n   the `name` parameter as index for each. The value depends on the\n   formspec element type:\n     * `animated_image`: Returns the index of the current frame.\n     * `button` and variants: If pressed, contains the user-facing button\n       text as value. If not pressed, is `nil`\n     * `field`, `textarea` and variants: Text in the field\n     * `dropdown`: Either the index or value, depending on the `index event`\n       dropdown argument.\n     * `tabheader`: Tab index, starting with `\"1\"` (only if tab changed)\n     * `checkbox`: `\"true\"` if checked, `\"false\"` if unchecked\n     * `textlist`: See `core.explode_textlist_event`\n     * `table`: See `core.explode_table_event`\n     * `scrollbar`: See `core.explode_scrollbar_event`\n     * Special case: `[\"quit\"]=\"true\"` is sent when the user actively\n       closed the form by mouse click, keypress or through a button_exit[]\n       element.\n     * Special case: `[\"key_enter\"]=\"true\"` is sent when the user pressed\n       the Enter key and the focus was either nowhere (causing the formspec\n       to be closed) or on a button. If the focus was on a text field,\n       additionally, the index `key_enter_field` contains the name of the\n       text field. See also: `field_close_on_enter`.\n * Newest functions are called first\n * If function returns `true`, remaining functions are not called",
                    "start": [
                        243,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_on_player_receive_fields(on_player_receive_fields: fun(player: core.Player, formname: string, fields: { [string]: string }):boolean?)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    243,
                    47
                ],
                "name": "register_on_player_receive_fields",
                "rawdesc": " * Called when the server received input from `player`.\n   Specifically, this is called on any of the\n   following events:\n       * a button was pressed,\n       * Enter was pressed while the focus was on a text field\n       * a checkbox was toggled,\n       * something was selected in a dropdown list,\n       * a different tab was selected,\n       * selection was changed in a textlist or table,\n       * an entry was double-clicked in a textlist or table,\n       * a scrollbar was moved, or\n       * the form was actively closed by the player.\n * `formname` is the name passed to `core.show_formspec`.\n   Special case: The empty string refers to the player inventory\n   (the formspec set by the `set_inventory_formspec` player method).\n * Fields are sent for formspec elements which define a field. `fields`\n   is a table containing each formspecs element value (as string), with\n   the `name` parameter as index for each. The value depends on the\n   formspec element type:\n     * `animated_image`: Returns the index of the current frame.\n     * `button` and variants: If pressed, contains the user-facing button\n       text as value. If not pressed, is `nil`\n     * `field`, `textarea` and variants: Text in the field\n     * `dropdown`: Either the index or value, depending on the `index event`\n       dropdown argument.\n     * `tabheader`: Tab index, starting with `\"1\"` (only if tab changed)\n     * `checkbox`: `\"true\"` if checked, `\"false\"` if unchecked\n     * `textlist`: See `core.explode_textlist_event`\n     * `table`: See `core.explode_table_event`\n     * `scrollbar`: See `core.explode_scrollbar_event`\n     * Special case: `[\"quit\"]=\"true\"` is sent when the user actively\n       closed the form by mouse click, keypress or through a button_exit[]\n       element.\n     * Special case: `[\"key_enter\"]=\"true\"` is sent when the user pressed\n       the Enter key and the focus was either nowhere (causing the formspec\n       to be closed) or on a button. If the focus was on a text field,\n       additionally, the index `key_enter_field` contains the name of the\n       text field. See also: `field_close_on_enter`.\n * Newest functions are called first\n * If function returns `true`, remaining functions are not called",
                "start": [
                    243,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                196,
                                72
                            ],
                            "name": "on_player_receive_fields",
                            "start": [
                                196,
                                48
                            ],
                            "type": "local",
                            "view": "fun(player: core.Player, formname: string, fields: { [string]: string }):boolean?"
                        }
                    ],
                    "finish": [
                        196,
                        77
                    ],
                    "start": [
                        196,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_on_player_receive_fields(on_player_receive_fields: fun(player: core.Player, formname: string, fields: { [string]: string }):boolean?)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    196,
                    47
                ],
                "name": "register_on_player_receive_fields",
                "start": [
                    196,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * `definition` can be a description or a definition table (see [Privilege\n   definition]).\n * If it is a description, the priv will be granted to singleplayer and admin\n   by default.\n * To allow players with `basic_privs` to grant, see the `basic_privs`\n   minetest.conf setting.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                197,
                                37
                            ],
                            "name": "name",
                            "start": [
                                197,
                                33
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                197,
                                49
                            ],
                            "name": "definition",
                            "start": [
                                197,
                                39
                            ],
                            "type": "local",
                            "view": "string|core.PrivilegeDef|nil"
                        }
                    ],
                    "desc": " * `definition` can be a description or a definition table (see [Privilege\n   definition]).\n * If it is a description, the priv will be granted to singleplayer and admin\n   by default.\n * To allow players with `basic_privs` to grant, see the `basic_privs`\n   minetest.conf setting.",
                    "finish": [
                        197,
                        54
                    ],
                    "rawdesc": " * `definition` can be a description or a definition table (see [Privilege\n   definition]).\n * If it is a description, the priv will be granted to singleplayer and admin\n   by default.\n * To allow players with `basic_privs` to grant, see the `basic_privs`\n   minetest.conf setting.",
                    "start": [
                        197,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_privilege(name: string, definition: string|core.PrivilegeDef|nil)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    197,
                    32
                ],
                "name": "register_privilege",
                "rawdesc": " * `definition` can be a description or a definition table (see [Privilege\n   definition]).\n * If it is a description, the priv will be granted to singleplayer and admin\n   by default.\n * To allow players with `basic_privs` to grant, see the `basic_privs`\n   minetest.conf setting.",
                "start": [
                    197,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                190,
                                37
                            ],
                            "name": "name",
                            "start": [
                                190,
                                33
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                190,
                                49
                            ],
                            "name": "definition",
                            "start": [
                                190,
                                39
                            ],
                            "type": "local",
                            "view": "string|core.PrivilegeDef|nil"
                        }
                    ],
                    "finish": [
                        190,
                        54
                    ],
                    "start": [
                        190,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_privilege(name: string, definition: string|core.PrivilegeDef|nil)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    190,
                    32
                ],
                "name": "register_privilege",
                "start": [
                    190,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                184,
                                32
                            ],
                            "name": "name",
                            "start": [
                                184,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                184,
                                44
                            ],
                            "name": "definition",
                            "start": [
                                184,
                                34
                            ],
                            "type": "local",
                            "view": "core.ItemDef"
                        }
                    ],
                    "finish": [
                        184,
                        49
                    ],
                    "start": [
                        184,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_tool(name: string, definition: core.ItemDef)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    184,
                    27
                ],
                "name": "register_tool",
                "start": [
                    184,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                183,
                                32
                            ],
                            "name": "name",
                            "start": [
                                183,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                183,
                                44
                            ],
                            "name": "definition",
                            "start": [
                                183,
                                34
                            ],
                            "type": "local",
                            "view": "core.ItemDef"
                        }
                    ],
                    "finish": [
                        183,
                        49
                    ],
                    "start": [
                        183,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_tool(name: string, definition: core.ItemDef)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    183,
                    27
                ],
                "name": "register_tool",
                "start": [
                    183,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        30,
                        39
                    ],
                    "start": [
                        30,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                30,
                                39
                            ],
                            "start": [
                                30,
                                26
                            ],
                            "type": "doc.type.array",
                            "view": "core.ABMDef[]"
                        }
                    ],
                    "view": "core.ABMDef[]"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    30,
                    39
                ],
                "name": "registered_abms",
                "start": [
                    30,
                    10
                ],
                "type": "doc.field",
                "view": "core.ABMDef[]",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        30,
                        39
                    ],
                    "start": [
                        30,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                30,
                                39
                            ],
                            "start": [
                                30,
                                26
                            ],
                            "type": "doc.type.array",
                            "view": "core.ABMDef[]"
                        }
                    ],
                    "view": "core.ABMDef[]"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    30,
                    39
                ],
                "name": "registered_abms",
                "start": [
                    30,
                    10
                ],
                "type": "doc.field",
                "view": "core.ABMDef[]",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        32,
                        61
                    ],
                    "start": [
                        32,
                        29
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        32,
                                        60
                                    ],
                                    "name": {
                                        "finish": [
                                            32,
                                            44
                                        ],
                                        "start": [
                                            32,
                                            31
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    32,
                                                    44
                                                ],
                                                "start": [
                                                    32,
                                                    31
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            }
                                        ],
                                        "view": "string"
                                    },
                                    "start": [
                                        32,
                                        31
                                    ],
                                    "type": "doc.type.field",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                32,
                                61
                            ],
                            "start": [
                                32,
                                29
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string]: string }"
                        }
                    ],
                    "view": "{ [string]: string }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    32,
                    61
                ],
                "name": "registered_aliases",
                "start": [
                    32,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string]: string }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        32,
                        61
                    ],
                    "start": [
                        32,
                        29
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        32,
                                        60
                                    ],
                                    "name": {
                                        "finish": [
                                            32,
                                            44
                                        ],
                                        "start": [
                                            32,
                                            31
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    32,
                                                    44
                                                ],
                                                "start": [
                                                    32,
                                                    31
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            }
                                        ],
                                        "view": "string"
                                    },
                                    "start": [
                                        32,
                                        31
                                    ],
                                    "type": "doc.type.field",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                32,
                                61
                            ],
                            "start": [
                                32,
                                29
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string]: string }"
                        }
                    ],
                    "view": "{ [string]: string }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    32,
                    61
                ],
                "name": "registered_aliases",
                "start": [
                    32,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string]: string }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        34,
                        73
                    ],
                    "start": [
                        34,
                        28
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        34,
                                        72
                                    ],
                                    "name": {
                                        "desc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                        "finish": [
                                            34,
                                            56
                                        ],
                                        "rawdesc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                        "start": [
                                            34,
                                            30
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    34,
                                                    36
                                                ],
                                                "start": [
                                                    34,
                                                    30
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            },
                                            {
                                                "desc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                                "finish": [
                                                    34,
                                                    56
                                                ],
                                                "rawdesc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                                "start": [
                                                    34,
                                                    39
                                                ],
                                                "type": "doc.type.name",
                                                "view": "integer"
                                            }
                                        ],
                                        "view": "string|integer"
                                    },
                                    "start": [
                                        34,
                                        30
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.BiomeDef"
                                }
                            ],
                            "finish": [
                                34,
                                73
                            ],
                            "start": [
                                34,
                                28
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string|integer]: core.BiomeDef }"
                        }
                    ],
                    "view": "{ [string|integer]: core.BiomeDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    34,
                    73
                ],
                "name": "registered_biomes",
                "start": [
                    34,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string|integer]: core.BiomeDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        34,
                        73
                    ],
                    "start": [
                        34,
                        28
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        34,
                                        72
                                    ],
                                    "name": {
                                        "desc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                        "finish": [
                                            34,
                                            56
                                        ],
                                        "rawdesc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                        "start": [
                                            34,
                                            30
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    34,
                                                    36
                                                ],
                                                "start": [
                                                    34,
                                                    30
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            },
                                            {
                                                "desc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                                "finish": [
                                                    34,
                                                    56
                                                ],
                                                "rawdesc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                                "start": [
                                                    34,
                                                    39
                                                ],
                                                "type": "doc.type.name",
                                                "view": "integer"
                                            }
                                        ],
                                        "view": "string|integer"
                                    },
                                    "start": [
                                        34,
                                        30
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.BiomeDef"
                                }
                            ],
                            "finish": [
                                34,
                                73
                            ],
                            "start": [
                                34,
                                28
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string|integer]: core.BiomeDef }"
                        }
                    ],
                    "view": "{ [string|integer]: core.BiomeDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    34,
                    73
                ],
                "name": "registered_biomes",
                "start": [
                    34,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string|integer]: core.BiomeDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        37,
                        65
                    ],
                    "start": [
                        37,
                        34
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        37,
                                        64
                                    ],
                                    "name": {
                                        "finish": [
                                            37,
                                            42
                                        ],
                                        "start": [
                                            37,
                                            36
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    37,
                                                    42
                                                ],
                                                "start": [
                                                    37,
                                                    36
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            }
                                        ],
                                        "view": "string"
                                    },
                                    "start": [
                                        37,
                                        36
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.ChatcommandDef"
                                }
                            ],
                            "finish": [
                                37,
                                65
                            ],
                            "start": [
                                37,
                                34
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string]: core.ChatcommandDef }"
                        }
                    ],
                    "view": "{ [string]: core.ChatcommandDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    37,
                    65
                ],
                "name": "registered_chatcommands",
                "start": [
                    37,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string]: core.ChatcommandDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        37,
                        65
                    ],
                    "start": [
                        37,
                        34
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        37,
                                        64
                                    ],
                                    "name": {
                                        "finish": [
                                            37,
                                            42
                                        ],
                                        "start": [
                                            37,
                                            36
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    37,
                                                    42
                                                ],
                                                "start": [
                                                    37,
                                                    36
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            }
                                        ],
                                        "view": "string"
                                    },
                                    "start": [
                                        37,
                                        36
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.ChatcommandDef"
                                }
                            ],
                            "finish": [
                                37,
                                65
                            ],
                            "start": [
                                37,
                                34
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string]: core.ChatcommandDef }"
                        }
                    ],
                    "view": "{ [string]: core.ChatcommandDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    37,
                    65
                ],
                "name": "registered_chatcommands",
                "start": [
                    37,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string]: core.ChatcommandDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        25,
                        63
                    ],
                    "start": [
                        25,
                        32
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        25,
                                        62
                                    ],
                                    "name": {
                                        "finish": [
                                            25,
                                            47
                                        ],
                                        "start": [
                                            25,
                                            34
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    25,
                                                    47
                                                ],
                                                "start": [
                                                    25,
                                                    34
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            }
                                        ],
                                        "view": "string"
                                    },
                                    "start": [
                                        25,
                                        34
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.ItemDef"
                                }
                            ],
                            "finish": [
                                25,
                                63
                            ],
                            "start": [
                                25,
                                32
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string]: core.ItemDef }"
                        }
                    ],
                    "view": "{ [string]: core.ItemDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    25,
                    63
                ],
                "name": "registered_craftitems",
                "start": [
                    25,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string]: core.ItemDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        25,
                        63
                    ],
                    "start": [
                        25,
                        32
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        25,
                                        62
                                    ],
                                    "name": {
                                        "finish": [
                                            25,
                                            47
                                        ],
                                        "start": [
                                            25,
                                            34
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    25,
                                                    47
                                                ],
                                                "start": [
                                                    25,
                                                    34
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            }
                                        ],
                                        "view": "string"
                                    },
                                    "start": [
                                        25,
                                        34
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.ItemDef"
                                }
                            ],
                            "finish": [
                                25,
                                63
                            ],
                            "start": [
                                25,
                                32
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string]: core.ItemDef }"
                        }
                    ],
                    "view": "{ [string]: core.ItemDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    25,
                    63
                ],
                "name": "registered_craftitems",
                "start": [
                    25,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string]: core.ItemDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        35,
                        83
                    ],
                    "start": [
                        35,
                        33
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        35,
                                        82
                                    ],
                                    "name": {
                                        "desc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                        "finish": [
                                            35,
                                            61
                                        ],
                                        "rawdesc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                        "start": [
                                            35,
                                            35
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    35,
                                                    41
                                                ],
                                                "start": [
                                                    35,
                                                    35
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            },
                                            {
                                                "desc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                                "finish": [
                                                    35,
                                                    61
                                                ],
                                                "rawdesc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                                "start": [
                                                    35,
                                                    44
                                                ],
                                                "type": "doc.type.name",
                                                "view": "integer"
                                            }
                                        ],
                                        "view": "string|integer"
                                    },
                                    "start": [
                                        35,
                                        35
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.DecorationDef"
                                }
                            ],
                            "finish": [
                                35,
                                83
                            ],
                            "start": [
                                35,
                                33
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string|integer]: core.DecorationDef }"
                        }
                    ],
                    "view": "{ [string|integer]: core.DecorationDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    35,
                    83
                ],
                "name": "registered_decorations",
                "start": [
                    35,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string|integer]: core.DecorationDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        35,
                        83
                    ],
                    "start": [
                        35,
                        33
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        35,
                                        82
                                    ],
                                    "name": {
                                        "desc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                        "finish": [
                                            35,
                                            61
                                        ],
                                        "rawdesc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                        "start": [
                                            35,
                                            35
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    35,
                                                    41
                                                ],
                                                "start": [
                                                    35,
                                                    35
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            },
                                            {
                                                "desc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                                "finish": [
                                                    35,
                                                    61
                                                ],
                                                "rawdesc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                                "start": [
                                                    35,
                                                    44
                                                ],
                                                "type": "doc.type.name",
                                                "view": "integer"
                                            }
                                        ],
                                        "view": "string|integer"
                                    },
                                    "start": [
                                        35,
                                        35
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.DecorationDef"
                                }
                            ],
                            "finish": [
                                35,
                                83
                            ],
                            "start": [
                                35,
                                33
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string|integer]: core.DecorationDef }"
                        }
                    ],
                    "view": "{ [string|integer]: core.DecorationDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    35,
                    83
                ],
                "name": "registered_decorations",
                "start": [
                    35,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string|integer]: core.DecorationDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        27,
                        56
                    ],
                    "start": [
                        27,
                        30
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        27,
                                        55
                                    ],
                                    "name": {
                                        "finish": [
                                            27,
                                            38
                                        ],
                                        "start": [
                                            27,
                                            32
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    27,
                                                    38
                                                ],
                                                "start": [
                                                    27,
                                                    32
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            }
                                        ],
                                        "view": "string"
                                    },
                                    "start": [
                                        27,
                                        32
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.EntityDef"
                                }
                            ],
                            "finish": [
                                27,
                                56
                            ],
                            "start": [
                                27,
                                30
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string]: core.EntityDef }"
                        }
                    ],
                    "view": "{ [string]: core.EntityDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    27,
                    56
                ],
                "name": "registered_entities",
                "start": [
                    27,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string]: core.EntityDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        27,
                        56
                    ],
                    "start": [
                        27,
                        30
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        27,
                                        55
                                    ],
                                    "name": {
                                        "finish": [
                                            27,
                                            38
                                        ],
                                        "start": [
                                            27,
                                            32
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    27,
                                                    38
                                                ],
                                                "start": [
                                                    27,
                                                    32
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            }
                                        ],
                                        "view": "string"
                                    },
                                    "start": [
                                        27,
                                        32
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.EntityDef"
                                }
                            ],
                            "finish": [
                                27,
                                56
                            ],
                            "start": [
                                27,
                                30
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string]: core.EntityDef }"
                        }
                    ],
                    "view": "{ [string]: core.EntityDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    27,
                    56
                ],
                "name": "registered_entities",
                "start": [
                    27,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string]: core.EntityDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "",
                "extends": {
                    "finish": [
                        40,
                        61
                    ],
                    "start": [
                        40,
                        33
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        40,
                                        60
                                    ],
                                    "name": {
                                        "finish": [
                                            40,
                                            38
                                        ],
                                        "start": [
                                            40,
                                            35
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    40,
                                                    38
                                                ],
                                                "start": [
                                                    40,
                                                    35
                                                ],
                                                "type": "doc.type.name",
                                                "view": "any"
                                            }
                                        ],
                                        "view": "any"
                                    },
                                    "start": [
                                        40,
                                        35
                                    ],
                                    "type": "doc.type.field",
                                    "view": "fun(dtime: number)"
                                }
                            ],
                            "finish": [
                                40,
                                61
                            ],
                            "start": [
                                40,
                                33
                            ],
                            "type": "doc.type.table",
                            "view": "{ [any]: fun(dtime: number) }"
                        }
                    ],
                    "view": "{ [any]: fun(dtime: number) }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    40,
                    61
                ],
                "name": "registered_globalsteps",
                "rawdesc": "",
                "start": [
                    40,
                    10
                ],
                "type": "doc.field",
                "view": "{ [any]: fun(dtime: number) }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "",
                "extends": {
                    "finish": [
                        40,
                        61
                    ],
                    "start": [
                        40,
                        33
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        40,
                                        60
                                    ],
                                    "name": {
                                        "finish": [
                                            40,
                                            38
                                        ],
                                        "start": [
                                            40,
                                            35
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    40,
                                                    38
                                                ],
                                                "start": [
                                                    40,
                                                    35
                                                ],
                                                "type": "doc.type.name",
                                                "view": "any"
                                            }
                                        ],
                                        "view": "any"
                                    },
                                    "start": [
                                        40,
                                        35
                                    ],
                                    "type": "doc.type.field",
                                    "view": "fun(dtime: number)"
                                }
                            ],
                            "finish": [
                                40,
                                61
                            ],
                            "start": [
                                40,
                                33
                            ],
                            "type": "doc.type.table",
                            "view": "{ [any]: fun(dtime: number) }"
                        }
                    ],
                    "view": "{ [any]: fun(dtime: number) }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    40,
                    61
                ],
                "name": "registered_globalsteps",
                "rawdesc": "",
                "start": [
                    40,
                    10
                ],
                "type": "doc.field",
                "view": "{ [any]: fun(dtime: number) }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nTODO verify whether all these are actually indexed by strings (or is there any difference?)",
                "extends": {
                    "finish": [
                        23,
                        58
                    ],
                    "start": [
                        23,
                        27
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        23,
                                        57
                                    ],
                                    "name": {
                                        "finish": [
                                            23,
                                            42
                                        ],
                                        "start": [
                                            23,
                                            29
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    23,
                                                    42
                                                ],
                                                "start": [
                                                    23,
                                                    29
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            }
                                        ],
                                        "view": "string"
                                    },
                                    "start": [
                                        23,
                                        29
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.ItemDef"
                                }
                            ],
                            "finish": [
                                23,
                                58
                            ],
                            "start": [
                                23,
                                27
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string]: core.ItemDef }"
                        }
                    ],
                    "view": "{ [string]: core.ItemDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    23,
                    58
                ],
                "name": "registered_items",
                "rawdesc": "\nTODO verify whether all these are actually indexed by strings (or is there any difference?)",
                "start": [
                    23,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string]: core.ItemDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nTODO verify whether all these are actually indexed by strings (or is there any difference?)",
                "extends": {
                    "finish": [
                        23,
                        58
                    ],
                    "start": [
                        23,
                        27
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        23,
                                        57
                                    ],
                                    "name": {
                                        "finish": [
                                            23,
                                            42
                                        ],
                                        "start": [
                                            23,
                                            29
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    23,
                                                    42
                                                ],
                                                "start": [
                                                    23,
                                                    29
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            }
                                        ],
                                        "view": "string"
                                    },
                                    "start": [
                                        23,
                                        29
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.ItemDef"
                                }
                            ],
                            "finish": [
                                23,
                                58
                            ],
                            "start": [
                                23,
                                27
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string]: core.ItemDef }"
                        }
                    ],
                    "view": "{ [string]: core.ItemDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    23,
                    58
                ],
                "name": "registered_items",
                "rawdesc": "\nTODO verify whether all these are actually indexed by strings (or is there any difference?)",
                "start": [
                    23,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string]: core.ItemDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        31,
                        39
                    ],
                    "start": [
                        31,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                31,
                                39
                            ],
                            "start": [
                                31,
                                26
                            ],
                            "type": "doc.type.array",
                            "view": "core.LBMDef[]"
                        }
                    ],
                    "view": "core.LBMDef[]"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    31,
                    39
                ],
                "name": "registered_lbms",
                "start": [
                    31,
                    10
                ],
                "type": "doc.field",
                "view": "core.LBMDef[]",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        31,
                        39
                    ],
                    "start": [
                        31,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                31,
                                39
                            ],
                            "start": [
                                31,
                                26
                            ],
                            "type": "doc.type.array",
                            "view": "core.LBMDef[]"
                        }
                    ],
                    "view": "core.LBMDef[]"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    31,
                    39
                ],
                "name": "registered_lbms",
                "start": [
                    31,
                    10
                ],
                "type": "doc.field",
                "view": "core.LBMDef[]",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        24,
                        58
                    ],
                    "start": [
                        24,
                        27
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        24,
                                        57
                                    ],
                                    "name": {
                                        "finish": [
                                            24,
                                            42
                                        ],
                                        "start": [
                                            24,
                                            29
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    24,
                                                    42
                                                ],
                                                "start": [
                                                    24,
                                                    29
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            }
                                        ],
                                        "view": "string"
                                    },
                                    "start": [
                                        24,
                                        29
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.NodeDef"
                                }
                            ],
                            "finish": [
                                24,
                                58
                            ],
                            "start": [
                                24,
                                27
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string]: core.NodeDef }"
                        }
                    ],
                    "view": "{ [string]: core.NodeDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    24,
                    58
                ],
                "name": "registered_nodes",
                "start": [
                    24,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string]: core.NodeDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        24,
                        58
                    ],
                    "start": [
                        24,
                        27
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        24,
                                        57
                                    ],
                                    "name": {
                                        "finish": [
                                            24,
                                            42
                                        ],
                                        "start": [
                                            24,
                                            29
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    24,
                                                    42
                                                ],
                                                "start": [
                                                    24,
                                                    29
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            }
                                        ],
                                        "view": "string"
                                    },
                                    "start": [
                                        24,
                                        29
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.NodeDef"
                                }
                            ],
                            "finish": [
                                24,
                                58
                            ],
                            "start": [
                                24,
                                27
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string]: core.NodeDef }"
                        }
                    ],
                    "view": "{ [string]: core.NodeDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    24,
                    58
                ],
                "name": "registered_nodes",
                "start": [
                    24,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string]: core.NodeDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        41,
                        50
                    ],
                    "start": [
                        41,
                        36
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        41,
                                        49
                                    ],
                                    "name": {
                                        "finish": [
                                            41,
                                            41
                                        ],
                                        "start": [
                                            41,
                                            38
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    41,
                                                    41
                                                ],
                                                "start": [
                                                    41,
                                                    38
                                                ],
                                                "type": "doc.type.name",
                                                "view": "any"
                                            }
                                        ],
                                        "view": "any"
                                    },
                                    "start": [
                                        41,
                                        38
                                    ],
                                    "type": "doc.type.field",
                                    "view": "fun()"
                                }
                            ],
                            "finish": [
                                41,
                                50
                            ],
                            "start": [
                                41,
                                36
                            ],
                            "type": "doc.type.table",
                            "view": "{ [any]: fun() }"
                        }
                    ],
                    "view": "{ [any]: fun() }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    41,
                    50
                ],
                "name": "registered_on_mods_loaded",
                "start": [
                    41,
                    10
                ],
                "type": "doc.field",
                "view": "{ [any]: fun() }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        41,
                        50
                    ],
                    "start": [
                        41,
                        36
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        41,
                                        49
                                    ],
                                    "name": {
                                        "finish": [
                                            41,
                                            41
                                        ],
                                        "start": [
                                            41,
                                            38
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    41,
                                                    41
                                                ],
                                                "start": [
                                                    41,
                                                    38
                                                ],
                                                "type": "doc.type.name",
                                                "view": "any"
                                            }
                                        ],
                                        "view": "any"
                                    },
                                    "start": [
                                        41,
                                        38
                                    ],
                                    "type": "doc.type.field",
                                    "view": "fun()"
                                }
                            ],
                            "finish": [
                                41,
                                50
                            ],
                            "start": [
                                41,
                                36
                            ],
                            "type": "doc.type.table",
                            "view": "{ [any]: fun() }"
                        }
                    ],
                    "view": "{ [any]: fun() }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    41,
                    50
                ],
                "name": "registered_on_mods_loaded",
                "start": [
                    41,
                    10
                ],
                "type": "doc.field",
                "view": "{ [any]: fun() }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        33,
                        69
                    ],
                    "start": [
                        33,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        33,
                                        68
                                    ],
                                    "name": {
                                        "desc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                        "finish": [
                                            33,
                                            54
                                        ],
                                        "rawdesc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                        "start": [
                                            33,
                                            28
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    33,
                                                    34
                                                ],
                                                "start": [
                                                    33,
                                                    28
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            },
                                            {
                                                "desc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                                "finish": [
                                                    33,
                                                    54
                                                ],
                                                "rawdesc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                                "start": [
                                                    33,
                                                    37
                                                ],
                                                "type": "doc.type.name",
                                                "view": "integer"
                                            }
                                        ],
                                        "view": "string|integer"
                                    },
                                    "start": [
                                        33,
                                        28
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.OreDef"
                                }
                            ],
                            "finish": [
                                33,
                                69
                            ],
                            "start": [
                                33,
                                26
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string|integer]: core.OreDef }"
                        }
                    ],
                    "view": "{ [string|integer]: core.OreDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    33,
                    69
                ],
                "name": "registered_ores",
                "start": [
                    33,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string|integer]: core.OreDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        33,
                        69
                    ],
                    "start": [
                        33,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        33,
                                        68
                                    ],
                                    "name": {
                                        "desc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                        "finish": [
                                            33,
                                            54
                                        ],
                                        "rawdesc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                        "start": [
                                            33,
                                            28
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    33,
                                                    34
                                                ],
                                                "start": [
                                                    33,
                                                    28
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            },
                                            {
                                                "desc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                                "finish": [
                                                    33,
                                                    54
                                                ],
                                                "rawdesc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                                "start": [
                                                    33,
                                                    37
                                                ],
                                                "type": "doc.type.name",
                                                "view": "integer"
                                            }
                                        ],
                                        "view": "string|integer"
                                    },
                                    "start": [
                                        33,
                                        28
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.OreDef"
                                }
                            ],
                            "finish": [
                                33,
                                69
                            ],
                            "start": [
                                33,
                                26
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string|integer]: core.OreDef }"
                        }
                    ],
                    "view": "{ [string|integer]: core.OreDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    33,
                    69
                ],
                "name": "registered_ores",
                "start": [
                    33,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string|integer]: core.OreDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        38,
                        61
                    ],
                    "start": [
                        38,
                        32
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        38,
                                        60
                                    ],
                                    "name": {
                                        "finish": [
                                            38,
                                            40
                                        ],
                                        "start": [
                                            38,
                                            34
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    38,
                                                    40
                                                ],
                                                "start": [
                                                    38,
                                                    34
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            }
                                        ],
                                        "view": "string"
                                    },
                                    "start": [
                                        38,
                                        34
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.PrivilegeDef"
                                }
                            ],
                            "finish": [
                                38,
                                61
                            ],
                            "start": [
                                38,
                                32
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string]: core.PrivilegeDef }"
                        }
                    ],
                    "view": "{ [string]: core.PrivilegeDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    38,
                    61
                ],
                "name": "registered_privileges",
                "start": [
                    38,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string]: core.PrivilegeDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        38,
                        61
                    ],
                    "start": [
                        38,
                        32
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        38,
                                        60
                                    ],
                                    "name": {
                                        "finish": [
                                            38,
                                            40
                                        ],
                                        "start": [
                                            38,
                                            34
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    38,
                                                    40
                                                ],
                                                "start": [
                                                    38,
                                                    34
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            }
                                        ],
                                        "view": "string"
                                    },
                                    "start": [
                                        38,
                                        34
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.PrivilegeDef"
                                }
                            ],
                            "finish": [
                                38,
                                61
                            ],
                            "start": [
                                38,
                                32
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string]: core.PrivilegeDef }"
                        }
                    ],
                    "view": "{ [string]: core.PrivilegeDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    38,
                    61
                ],
                "name": "registered_privileges",
                "start": [
                    38,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string]: core.PrivilegeDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        36,
                        81
                    ],
                    "start": [
                        36,
                        32
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        36,
                                        80
                                    ],
                                    "name": {
                                        "desc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                        "finish": [
                                            36,
                                            60
                                        ],
                                        "rawdesc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                        "start": [
                                            36,
                                            34
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    36,
                                                    40
                                                ],
                                                "start": [
                                                    36,
                                                    34
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            },
                                            {
                                                "desc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                                "finish": [
                                                    36,
                                                    60
                                                ],
                                                "rawdesc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                                "start": [
                                                    36,
                                                    43
                                                ],
                                                "type": "doc.type.name",
                                                "view": "integer"
                                            }
                                        ],
                                        "view": "string|integer"
                                    },
                                    "start": [
                                        36,
                                        34
                                    ],
                                    "type": "doc.type.field",
                                    "view": "string|core.RawSchematicDef"
                                }
                            ],
                            "finish": [
                                36,
                                81
                            ],
                            "start": [
                                36,
                                32
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string|integer]: string|core.RawSchematicDef }"
                        }
                    ],
                    "view": "{ [string|integer]: string|core.RawSchematicDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    36,
                    81
                ],
                "name": "registered_schematics",
                "start": [
                    36,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string|integer]: string|core.RawSchematicDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        36,
                        81
                    ],
                    "start": [
                        36,
                        32
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        36,
                                        80
                                    ],
                                    "name": {
                                        "desc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                        "finish": [
                                            36,
                                            60
                                        ],
                                        "rawdesc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                        "start": [
                                            36,
                                            34
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    36,
                                                    40
                                                ],
                                                "start": [
                                                    36,
                                                    34
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            },
                                            {
                                                "desc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                                "finish": [
                                                    36,
                                                    60
                                                ],
                                                "rawdesc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                                                "start": [
                                                    36,
                                                    43
                                                ],
                                                "type": "doc.type.name",
                                                "view": "integer"
                                            }
                                        ],
                                        "view": "string|integer"
                                    },
                                    "start": [
                                        36,
                                        34
                                    ],
                                    "type": "doc.type.field",
                                    "view": "string|core.RawSchematicDef"
                                }
                            ],
                            "finish": [
                                36,
                                81
                            ],
                            "start": [
                                36,
                                32
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string|integer]: string|core.RawSchematicDef }"
                        }
                    ],
                    "view": "{ [string|integer]: string|core.RawSchematicDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    36,
                    81
                ],
                "name": "registered_schematics",
                "start": [
                    36,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string|integer]: string|core.RawSchematicDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        26,
                        58
                    ],
                    "start": [
                        26,
                        27
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        26,
                                        57
                                    ],
                                    "name": {
                                        "finish": [
                                            26,
                                            42
                                        ],
                                        "start": [
                                            26,
                                            29
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    26,
                                                    42
                                                ],
                                                "start": [
                                                    26,
                                                    29
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            }
                                        ],
                                        "view": "string"
                                    },
                                    "start": [
                                        26,
                                        29
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.ItemDef"
                                }
                            ],
                            "finish": [
                                26,
                                58
                            ],
                            "start": [
                                26,
                                27
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string]: core.ItemDef }"
                        }
                    ],
                    "view": "{ [string]: core.ItemDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    26,
                    58
                ],
                "name": "registered_tools",
                "start": [
                    26,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string]: core.ItemDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        26,
                        58
                    ],
                    "start": [
                        26,
                        27
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        26,
                                        57
                                    ],
                                    "name": {
                                        "finish": [
                                            26,
                                            42
                                        ],
                                        "start": [
                                            26,
                                            29
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    26,
                                                    42
                                                ],
                                                "start": [
                                                    26,
                                                    29
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            }
                                        ],
                                        "view": "string"
                                    },
                                    "start": [
                                        26,
                                        29
                                    ],
                                    "type": "doc.type.field",
                                    "view": "core.ItemDef"
                                }
                            ],
                            "finish": [
                                26,
                                58
                            ],
                            "start": [
                                26,
                                27
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string]: core.ItemDef }"
                        }
                    ],
                    "view": "{ [string]: core.ItemDef }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    26,
                    58
                ],
                "name": "registered_tools",
                "start": [
                    26,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string]: core.ItemDef }",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Equivalent to `core.set_node(pos, {name=\"air\"})`, but a bit faster.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                298,
                                29
                            ],
                            "name": "pos",
                            "start": [
                                298,
                                26
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "desc": " * Equivalent to `core.set_node(pos, {name=\"air\"})`, but a bit faster.",
                    "finish": [
                        298,
                        34
                    ],
                    "rawdesc": " * Equivalent to `core.set_node(pos, {name=\"air\"})`, but a bit faster.",
                    "start": [
                        298,
                        0
                    ],
                    "type": "function",
                    "view": "function core.remove_node(pos: vector.Vector)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    298,
                    25
                ],
                "name": "remove_node",
                "rawdesc": " * Equivalent to `core.set_node(pos, {name=\"air\"})`, but a bit faster.",
                "start": [
                    298,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                237,
                                29
                            ],
                            "name": "pos",
                            "start": [
                                237,
                                26
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "finish": [
                        237,
                        34
                    ],
                    "start": [
                        237,
                        0
                    ],
                    "type": "function",
                    "view": "function core.remove_node(pos: vector.Vector)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    237,
                    25
                ],
                "name": "remove_node",
                "start": [
                    237,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Set node at position `pos`.\n * Any existing metadata is deleted.\n * `node`: table `{name=string, param1=number, param2=number}`\n   If param1 or param2 is omitted, it's set to `0`.\n * e.g. `core.set_node({x=0, y=10, z=0}, {name=\"default:wood\"})`",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                294,
                                26
                            ],
                            "name": "pos",
                            "start": [
                                294,
                                23
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                294,
                                32
                            ],
                            "name": "node",
                            "start": [
                                294,
                                28
                            ],
                            "type": "local",
                            "view": "{ name: string, param1: integer, param2: integer }"
                        }
                    ],
                    "desc": " * Set node at position `pos`.\n * Any existing metadata is deleted.\n * `node`: table `{name=string, param1=number, param2=number}`\n   If param1 or param2 is omitted, it's set to `0`.\n * e.g. `core.set_node({x=0, y=10, z=0}, {name=\"default:wood\"})`",
                    "finish": [
                        294,
                        37
                    ],
                    "rawdesc": " * Set node at position `pos`.\n * Any existing metadata is deleted.\n * `node`: table `{name=string, param1=number, param2=number}`\n   If param1 or param2 is omitted, it's set to `0`.\n * e.g. `core.set_node({x=0, y=10, z=0}, {name=\"default:wood\"})`",
                    "start": [
                        294,
                        0
                    ],
                    "type": "function",
                    "view": "function core.set_node(pos: vector.Vector, node: { name: string, param1: integer, param2: integer })"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    294,
                    22
                ],
                "name": "set_node",
                "rawdesc": " * Set node at position `pos`.\n * Any existing metadata is deleted.\n * `node`: table `{name=string, param1=number, param2=number}`\n   If param1 or param2 is omitted, it's set to `0`.\n * e.g. `core.set_node({x=0, y=10, z=0}, {name=\"default:wood\"})`",
                "start": [
                    294,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                234,
                                26
                            ],
                            "name": "pos",
                            "start": [
                                234,
                                23
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                234,
                                32
                            ],
                            "name": "node",
                            "start": [
                                234,
                                28
                            ],
                            "type": "local",
                            "view": "{ name: string, param1: integer, param2: integer }"
                        }
                    ],
                    "finish": [
                        234,
                        37
                    ],
                    "start": [
                        234,
                        0
                    ],
                    "type": "function",
                    "view": "function core.set_node(pos: vector.Vector, node: { name: string, param1: integer, param2: integer })"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    234,
                    22
                ],
                "name": "set_node",
                "start": [
                    234,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                35,
                                31
                            ],
                            "name": "val",
                            "start": [
                                35,
                                28
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "finish": [
                        35,
                        36
                    ],
                    "start": [
                        35,
                        0
                    ],
                    "type": "function",
                    "view": "function core.set_timeofday(val: number)"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    35,
                    27
                ],
                "name": "set_timeofday",
                "start": [
                    35,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * `playername`: name of player to show formspec\n * `formname`: name passed to `on_player_receive_fields` callbacks.\n   It should follow the `\"modname:<whatever>\"` naming convention.\n * `formname` must not be empty, unless you want to reshow\n   the inventory formspec without updating it for future opens.\n * `formspec`: formspec to display",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                320,
                                38
                            ],
                            "name": "playername",
                            "start": [
                                320,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                320,
                                48
                            ],
                            "name": "formname",
                            "start": [
                                320,
                                40
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                320,
                                58
                            ],
                            "name": "formspec",
                            "start": [
                                320,
                                50
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " * `playername`: name of player to show formspec\n * `formname`: name passed to `on_player_receive_fields` callbacks.\n   It should follow the `\"modname:<whatever>\"` naming convention.\n * `formname` must not be empty, unless you want to reshow\n   the inventory formspec without updating it for future opens.\n * `formspec`: formspec to display",
                    "finish": [
                        320,
                        63
                    ],
                    "rawdesc": " * `playername`: name of player to show formspec\n * `formname`: name passed to `on_player_receive_fields` callbacks.\n   It should follow the `\"modname:<whatever>\"` naming convention.\n * `formname` must not be empty, unless you want to reshow\n   the inventory formspec without updating it for future opens.\n * `formspec`: formspec to display",
                    "start": [
                        320,
                        0
                    ],
                    "type": "function",
                    "view": "function core.show_formspec(playername: string, formname: string, formspec: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    320,
                    27
                ],
                "name": "show_formspec",
                "rawdesc": " * `playername`: name of player to show formspec\n * `formname`: name passed to `on_player_receive_fields` callbacks.\n   It should follow the `\"modname:<whatever>\"` naming convention.\n * `formname` must not be empty, unless you want to reshow\n   the inventory formspec without updating it for future opens.\n * `formspec`: formspec to display",
                "start": [
                    320,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                250,
                                38
                            ],
                            "name": "playername",
                            "start": [
                                250,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                250,
                                48
                            ],
                            "name": "formname",
                            "start": [
                                250,
                                40
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                250,
                                58
                            ],
                            "name": "formspec",
                            "start": [
                                250,
                                50
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        250,
                        63
                    ],
                    "start": [
                        250,
                        0
                    ],
                    "type": "function",
                    "view": "function core.show_formspec(playername: string, formname: string, formspec: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    250,
                    27
                ],
                "name": "show_formspec",
                "start": [
                    250,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                343,
                                34
                            ],
                            "name": "textdomain",
                            "start": [
                                343,
                                24
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                343,
                                39
                            ],
                            "name": "str",
                            "start": [
                                343,
                                36
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                343,
                                44
                            ],
                            "start": [
                                343,
                                41
                            ],
                            "type": "...",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        343,
                        49
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        343,
                        0
                    ],
                    "type": "function",
                    "view": "function core.translate(textdomain: string, str: string, ...string)\n  -> string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    343,
                    23
                ],
                "name": "translate",
                "start": [
                    343,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                273,
                                34
                            ],
                            "name": "textdomain",
                            "start": [
                                273,
                                24
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                273,
                                39
                            ],
                            "name": "str",
                            "start": [
                                273,
                                36
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                273,
                                44
                            ],
                            "start": [
                                273,
                                41
                            ],
                            "type": "...",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        273,
                        49
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        273,
                        0
                    ],
                    "type": "function",
                    "view": "function core.translate(textdomain: string, str: string, ...string)\n  -> string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    273,
                    23
                ],
                "name": "translate",
                "start": [
                    273,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core",
        "type": "type",
        "view": "core"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "TODO other registered global registration function tables",
                "extends": {
                    "finish": [
                        43,
                        9
                    ],
                    "start": [
                        43,
                        7
                    ],
                    "type": "table",
                    "view": "core"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    43,
                    4
                ],
                "rawdesc": "TODO other registered global registration function tables",
                "start": [
                    43,
                    0
                ],
                "type": "setglobal",
                "view": "core",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "TODO other registered global registration function tables",
                "extends": {
                    "finish": [
                        43,
                        9
                    ],
                    "start": [
                        43,
                        7
                    ],
                    "type": "table",
                    "view": "core"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    43,
                    4
                ],
                "rawdesc": "TODO other registered global registration function tables",
                "start": [
                    43,
                    0
                ],
                "type": "setglobal",
                "view": "core",
                "visible": "public"
            }
        ],
        "name": "core",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    53,
                    21
                ],
                "start": [
                    53,
                    10
                ],
                "type": "doc.class",
                "view": "core.ABMDef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    53,
                    21
                ],
                "start": [
                    53,
                    10
                ],
                "type": "doc.class",
                "view": "core.ABMDef",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "core.ABMDef",
        "type": "type",
        "view": "core.ABMDef"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    55,
                    23
                ],
                "start": [
                    55,
                    10
                ],
                "type": "doc.class",
                "view": "core.BiomeDef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    55,
                    23
                ],
                "start": [
                    55,
                    10
                ],
                "type": "doc.class",
                "view": "core.BiomeDef",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "core.BiomeDef",
        "type": "type",
        "view": "core.BiomeDef"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    57,
                    29
                ],
                "start": [
                    57,
                    10
                ],
                "type": "doc.class",
                "view": "core.ChatcommandDef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    57,
                    29
                ],
                "start": [
                    57,
                    10
                ],
                "type": "doc.class",
                "view": "core.ChatcommandDef",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "core.ChatcommandDef",
        "type": "type",
        "view": "core.ChatcommandDef"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    59,
                    28
                ],
                "start": [
                    59,
                    10
                ],
                "type": "doc.class",
                "view": "core.DecorationDef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    59,
                    28
                ],
                "start": [
                    59,
                    10
                ],
                "type": "doc.class",
                "view": "core.DecorationDef",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "core.DecorationDef",
        "type": "type",
        "view": "core.DecorationDef"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    61,
                    24
                ],
                "start": [
                    61,
                    10
                ],
                "type": "doc.class",
                "view": "core.EntityDef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    61,
                    24
                ],
                "start": [
                    61,
                    10
                ],
                "type": "doc.class",
                "view": "core.EntityDef",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "core.EntityDef",
        "type": "type",
        "view": "core.EntityDef"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    130,
                    21
                ],
                "start": [
                    130,
                    10
                ],
                "type": "doc.class",
                "view": "core.InvRef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    130,
                    21
                ],
                "start": [
                    130,
                    10
                ],
                "type": "doc.class",
                "view": "core.InvRef",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        131,
                        92
                    ],
                    "start": [
                        131,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        131,
                                        42
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            131,
                                            28
                                        ],
                                        "start": [
                                            131,
                                            24
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        131,
                                        24
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.InvRef"
                                },
                                {
                                    "finish": [
                                        131,
                                        61
                                    ],
                                    "name": {
                                        "[1]": "listname",
                                        "finish": [
                                            131,
                                            52
                                        ],
                                        "start": [
                                            131,
                                            44
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "listname"
                                    },
                                    "start": [
                                        131,
                                        44
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": [
                                        131,
                                        74
                                    ],
                                    "name": {
                                        "[1]": "i",
                                        "finish": [
                                            131,
                                            64
                                        ],
                                        "start": [
                                            131,
                                            63
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "i"
                                    },
                                    "start": [
                                        131,
                                        63
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "integer"
                                }
                            ],
                            "finish": [
                                131,
                                92
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        131,
                                        92
                                    ],
                                    "start": [
                                        131,
                                        78
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                131,
                                                92
                                            ],
                                            "start": [
                                                131,
                                                78
                                            ],
                                            "type": "doc.type.name",
                                            "view": "core.ItemStack"
                                        }
                                    ],
                                    "view": "core.ItemStack"
                                }
                            ],
                            "start": [
                                131,
                                20
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.InvRef, listname: string, i: integer):core.ItemStack"
                        }
                    ],
                    "view": "fun(self: core.InvRef, listname: string, i: integer):core.ItemStack"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    131,
                    92
                ],
                "name": "get_stack",
                "start": [
                    131,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.InvRef, listname: string, i: integer):core.ItemStack",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        131,
                        92
                    ],
                    "start": [
                        131,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        131,
                                        42
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            131,
                                            28
                                        ],
                                        "start": [
                                            131,
                                            24
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        131,
                                        24
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.InvRef"
                                },
                                {
                                    "finish": [
                                        131,
                                        61
                                    ],
                                    "name": {
                                        "[1]": "listname",
                                        "finish": [
                                            131,
                                            52
                                        ],
                                        "start": [
                                            131,
                                            44
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "listname"
                                    },
                                    "start": [
                                        131,
                                        44
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": [
                                        131,
                                        74
                                    ],
                                    "name": {
                                        "[1]": "i",
                                        "finish": [
                                            131,
                                            64
                                        ],
                                        "start": [
                                            131,
                                            63
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "i"
                                    },
                                    "start": [
                                        131,
                                        63
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "integer"
                                }
                            ],
                            "finish": [
                                131,
                                92
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        131,
                                        92
                                    ],
                                    "start": [
                                        131,
                                        78
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                131,
                                                92
                                            ],
                                            "start": [
                                                131,
                                                78
                                            ],
                                            "type": "doc.type.name",
                                            "view": "core.ItemStack"
                                        }
                                    ],
                                    "view": "core.ItemStack"
                                }
                            ],
                            "start": [
                                131,
                                20
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.InvRef, listname: string, i: integer):core.ItemStack"
                        }
                    ],
                    "view": "fun(self: core.InvRef, listname: string, i: integer):core.ItemStack"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    131,
                    92
                ],
                "name": "get_stack",
                "start": [
                    131,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.InvRef, listname: string, i: integer):core.ItemStack",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        132,
                        99
                    ],
                    "start": [
                        132,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        132,
                                        42
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            132,
                                            28
                                        ],
                                        "start": [
                                            132,
                                            24
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        132,
                                        24
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.InvRef"
                                },
                                {
                                    "finish": [
                                        132,
                                        61
                                    ],
                                    "name": {
                                        "[1]": "listname",
                                        "finish": [
                                            132,
                                            52
                                        ],
                                        "start": [
                                            132,
                                            44
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "listname"
                                    },
                                    "start": [
                                        132,
                                        44
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": [
                                        132,
                                        74
                                    ],
                                    "name": {
                                        "[1]": "i",
                                        "finish": [
                                            132,
                                            64
                                        ],
                                        "start": [
                                            132,
                                            63
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "i"
                                    },
                                    "start": [
                                        132,
                                        63
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "integer"
                                },
                                {
                                    "finish": [
                                        132,
                                        98
                                    ],
                                    "name": {
                                        "[1]": "stack",
                                        "finish": [
                                            132,
                                            81
                                        ],
                                        "start": [
                                            132,
                                            76
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "stack"
                                    },
                                    "start": [
                                        132,
                                        76
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.ItemStack"
                                }
                            ],
                            "finish": [
                                132,
                                99
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                132,
                                20
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.InvRef, listname: string, i: integer, stack: core.ItemStack)"
                        }
                    ],
                    "view": "fun(self: core.InvRef, listname: string, i: integer, stack: core.ItemStack)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    132,
                    99
                ],
                "name": "set_stack",
                "start": [
                    132,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.InvRef, listname: string, i: integer, stack: core.ItemStack)",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        132,
                        99
                    ],
                    "start": [
                        132,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        132,
                                        42
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            132,
                                            28
                                        ],
                                        "start": [
                                            132,
                                            24
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        132,
                                        24
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.InvRef"
                                },
                                {
                                    "finish": [
                                        132,
                                        61
                                    ],
                                    "name": {
                                        "[1]": "listname",
                                        "finish": [
                                            132,
                                            52
                                        ],
                                        "start": [
                                            132,
                                            44
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "listname"
                                    },
                                    "start": [
                                        132,
                                        44
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": [
                                        132,
                                        74
                                    ],
                                    "name": {
                                        "[1]": "i",
                                        "finish": [
                                            132,
                                            64
                                        ],
                                        "start": [
                                            132,
                                            63
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "i"
                                    },
                                    "start": [
                                        132,
                                        63
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "integer"
                                },
                                {
                                    "finish": [
                                        132,
                                        98
                                    ],
                                    "name": {
                                        "[1]": "stack",
                                        "finish": [
                                            132,
                                            81
                                        ],
                                        "start": [
                                            132,
                                            76
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "stack"
                                    },
                                    "start": [
                                        132,
                                        76
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.ItemStack"
                                }
                            ],
                            "finish": [
                                132,
                                99
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                132,
                                20
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.InvRef, listname: string, i: integer, stack: core.ItemStack)"
                        }
                    ],
                    "view": "fun(self: core.InvRef, listname: string, i: integer, stack: core.ItemStack)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    132,
                    99
                ],
                "name": "set_stack",
                "start": [
                    132,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.InvRef, listname: string, i: integer, stack: core.ItemStack)",
                "visible": "public"
            }
        ],
        "name": "core.InvRef",
        "type": "type",
        "view": "core.InvRef"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    63,
                    22
                ],
                "start": [
                    63,
                    10
                ],
                "type": "doc.class",
                "view": "core.ItemDef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    63,
                    22
                ],
                "start": [
                    63,
                    10
                ],
                "type": "doc.class",
                "view": "core.ItemDef",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "TODO",
                "extends": {
                    "finish": [
                        87,
                        23
                    ],
                    "start": [
                        87,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                87,
                                23
                            ],
                            "start": [
                                87,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "any"
                        }
                    ],
                    "view": "any"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    87,
                    23
                ],
                "name": "after_use",
                "rawdesc": "TODO",
                "start": [
                    87,
                    10
                ],
                "type": "doc.field",
                "view": "any",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "TODO",
                "extends": {
                    "finish": [
                        87,
                        23
                    ],
                    "start": [
                        87,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                87,
                                23
                            ],
                            "start": [
                                87,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "any"
                        }
                    ],
                    "view": "any"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    87,
                    23
                ],
                "name": "after_use",
                "rawdesc": "TODO",
                "start": [
                    87,
                    10
                ],
                "type": "doc.field",
                "view": "any",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        73,
                        23
                    ],
                    "start": [
                        73,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                73,
                                22
                            ],
                            "start": [
                                73,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    73,
                    23
                ],
                "name": "color",
                "start": [
                    73,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        73,
                        23
                    ],
                    "start": [
                        73,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                73,
                                22
                            ],
                            "start": [
                                73,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    73,
                    23
                ],
                "name": "color",
                "start": [
                    73,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        64,
                        29
                    ],
                    "start": [
                        64,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                64,
                                28
                            ],
                            "start": [
                                64,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    64,
                    29
                ],
                "name": "description",
                "start": [
                    64,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        64,
                        29
                    ],
                    "start": [
                        64,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                64,
                                28
                            ],
                            "start": [
                                64,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    64,
                    29
                ],
                "name": "description",
                "start": [
                    64,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        66,
                        36
                    ],
                    "start": [
                        66,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        66,
                                        34
                                    ],
                                    "name": {
                                        "finish": [
                                            66,
                                            25
                                        ],
                                        "start": [
                                            66,
                                            19
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    66,
                                                    25
                                                ],
                                                "start": [
                                                    66,
                                                    19
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            }
                                        ],
                                        "view": "string"
                                    },
                                    "start": [
                                        66,
                                        19
                                    ],
                                    "type": "doc.type.field",
                                    "view": "number"
                                }
                            ],
                            "finish": [
                                66,
                                35
                            ],
                            "start": [
                                66,
                                17
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string]: number }"
                        }
                    ],
                    "view": "{ [string]: number }?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    66,
                    36
                ],
                "name": "groups",
                "start": [
                    66,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string]: number }?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        66,
                        36
                    ],
                    "start": [
                        66,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "fields": [
                                {
                                    "finish": [
                                        66,
                                        34
                                    ],
                                    "name": {
                                        "finish": [
                                            66,
                                            25
                                        ],
                                        "start": [
                                            66,
                                            19
                                        ],
                                        "type": "doc.type",
                                        "types": [
                                            {
                                                "finish": [
                                                    66,
                                                    25
                                                ],
                                                "start": [
                                                    66,
                                                    19
                                                ],
                                                "type": "doc.type.name",
                                                "view": "string"
                                            }
                                        ],
                                        "view": "string"
                                    },
                                    "start": [
                                        66,
                                        19
                                    ],
                                    "type": "doc.type.field",
                                    "view": "number"
                                }
                            ],
                            "finish": [
                                66,
                                35
                            ],
                            "start": [
                                66,
                                17
                            ],
                            "type": "doc.type.table",
                            "view": "{ [string]: number }"
                        }
                    ],
                    "view": "{ [string]: number }?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    66,
                    36
                ],
                "name": "groups",
                "start": [
                    66,
                    10
                ],
                "type": "doc.field",
                "view": "{ [string]: number }?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        67,
                        33
                    ],
                    "start": [
                        67,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                67,
                                32
                            ],
                            "start": [
                                67,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    67,
                    33
                ],
                "name": "inventory_image",
                "start": [
                    67,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        67,
                        33
                    ],
                    "start": [
                        67,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                67,
                                32
                            ],
                            "start": [
                                67,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    67,
                    33
                ],
                "name": "inventory_image",
                "start": [
                    67,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        68,
                        35
                    ],
                    "start": [
                        68,
                        28
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                68,
                                34
                            ],
                            "start": [
                                68,
                                28
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    68,
                    35
                ],
                "name": "inventory_overlay",
                "start": [
                    68,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        68,
                        35
                    ],
                    "start": [
                        68,
                        28
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                68,
                                34
                            ],
                            "start": [
                                68,
                                28
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    68,
                    35
                ],
                "name": "inventory_overlay",
                "start": [
                    68,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        77,
                        31
                    ],
                    "start": [
                        77,
                        23
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                77,
                                30
                            ],
                            "start": [
                                77,
                                23
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    77,
                    31
                ],
                "name": "light_source",
                "start": [
                    77,
                    10
                ],
                "type": "doc.field",
                "view": "integer?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        77,
                        31
                    ],
                    "start": [
                        77,
                        23
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                77,
                                30
                            ],
                            "start": [
                                77,
                                23
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    77,
                    31
                ],
                "name": "light_source",
                "start": [
                    77,
                    10
                ],
                "type": "doc.field",
                "view": "integer?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        76,
                        36
                    ],
                    "start": [
                        76,
                        28
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                76,
                                35
                            ],
                            "start": [
                                76,
                                28
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    76,
                    36
                ],
                "name": "liquids_pointable",
                "start": [
                    76,
                    10
                ],
                "type": "doc.field",
                "view": "boolean?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        76,
                        36
                    ],
                    "start": [
                        76,
                        28
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                76,
                                35
                            ],
                            "start": [
                                76,
                                28
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    76,
                    36
                ],
                "name": "liquids_pointable",
                "start": [
                    76,
                    10
                ],
                "type": "doc.field",
                "view": "boolean?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        80,
                        37
                    ],
                    "start": [
                        80,
                        30
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                80,
                                36
                            ],
                            "start": [
                                80,
                                30
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    80,
                    37
                ],
                "name": "node_dig_prediction",
                "start": [
                    80,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        80,
                        37
                    ],
                    "start": [
                        80,
                        30
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                80,
                                36
                            ],
                            "start": [
                                80,
                                30
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    80,
                    37
                ],
                "name": "node_dig_prediction",
                "start": [
                    80,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        79,
                        43
                    ],
                    "start": [
                        79,
                        36
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                79,
                                42
                            ],
                            "start": [
                                79,
                                36
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    79,
                    43
                ],
                "name": "node_placement_prediction",
                "start": [
                    79,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        79,
                        43
                    ],
                    "start": [
                        79,
                        36
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                79,
                                42
                            ],
                            "start": [
                                79,
                                36
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    79,
                    43
                ],
                "name": "node_placement_prediction",
                "start": [
                    79,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "TODO",
                "extends": {
                    "finish": [
                        84,
                        21
                    ],
                    "start": [
                        84,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                84,
                                21
                            ],
                            "start": [
                                84,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "any"
                        }
                    ],
                    "view": "any"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    84,
                    21
                ],
                "name": "on_drop",
                "rawdesc": "TODO",
                "start": [
                    84,
                    10
                ],
                "type": "doc.field",
                "view": "any",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "TODO",
                "extends": {
                    "finish": [
                        84,
                        21
                    ],
                    "start": [
                        84,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                84,
                                21
                            ],
                            "start": [
                                84,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "any"
                        }
                    ],
                    "view": "any"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    84,
                    21
                ],
                "name": "on_drop",
                "rawdesc": "TODO",
                "start": [
                    84,
                    10
                ],
                "type": "doc.field",
                "view": "any",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "TODO",
                "extends": {
                    "finish": [
                        85,
                        23
                    ],
                    "start": [
                        85,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                85,
                                23
                            ],
                            "start": [
                                85,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "any"
                        }
                    ],
                    "view": "any"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    85,
                    23
                ],
                "name": "on_pickup",
                "rawdesc": "TODO",
                "start": [
                    85,
                    10
                ],
                "type": "doc.field",
                "view": "any",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "TODO",
                "extends": {
                    "finish": [
                        85,
                        23
                    ],
                    "start": [
                        85,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                85,
                                23
                            ],
                            "start": [
                                85,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "any"
                        }
                    ],
                    "view": "any"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    85,
                    23
                ],
                "name": "on_pickup",
                "rawdesc": "TODO",
                "start": [
                    85,
                    10
                ],
                "type": "doc.field",
                "view": "any",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "TODO",
                "extends": {
                    "finish": [
                        82,
                        22
                    ],
                    "start": [
                        82,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                82,
                                22
                            ],
                            "start": [
                                82,
                                19
                            ],
                            "type": "doc.type.name",
                            "view": "any"
                        }
                    ],
                    "view": "any"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    82,
                    22
                ],
                "name": "on_place",
                "rawdesc": "TODO",
                "start": [
                    82,
                    10
                ],
                "type": "doc.field",
                "view": "any",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "TODO",
                "extends": {
                    "finish": [
                        82,
                        22
                    ],
                    "start": [
                        82,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                82,
                                22
                            ],
                            "start": [
                                82,
                                19
                            ],
                            "type": "doc.type.name",
                            "view": "any"
                        }
                    ],
                    "view": "any"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    82,
                    22
                ],
                "name": "on_place",
                "rawdesc": "TODO",
                "start": [
                    82,
                    10
                ],
                "type": "doc.field",
                "view": "any",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "TODO",
                "extends": {
                    "finish": [
                        83,
                        30
                    ],
                    "start": [
                        83,
                        27
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                83,
                                30
                            ],
                            "start": [
                                83,
                                27
                            ],
                            "type": "doc.type.name",
                            "view": "any"
                        }
                    ],
                    "view": "any"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    83,
                    30
                ],
                "name": "on_secondary_use",
                "rawdesc": "TODO",
                "start": [
                    83,
                    10
                ],
                "type": "doc.field",
                "view": "any",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "TODO",
                "extends": {
                    "finish": [
                        83,
                        30
                    ],
                    "start": [
                        83,
                        27
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                83,
                                30
                            ],
                            "start": [
                                83,
                                27
                            ],
                            "type": "doc.type.name",
                            "view": "any"
                        }
                    ],
                    "view": "any"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    83,
                    30
                ],
                "name": "on_secondary_use",
                "rawdesc": "TODO",
                "start": [
                    83,
                    10
                ],
                "type": "doc.field",
                "view": "any",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "TODO",
                "extends": {
                    "finish": [
                        86,
                        20
                    ],
                    "start": [
                        86,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                86,
                                20
                            ],
                            "start": [
                                86,
                                17
                            ],
                            "type": "doc.type.name",
                            "view": "any"
                        }
                    ],
                    "view": "any"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    86,
                    20
                ],
                "name": "on_use",
                "rawdesc": "TODO",
                "start": [
                    86,
                    10
                ],
                "type": "doc.field",
                "view": "any",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "TODO",
                "extends": {
                    "finish": [
                        86,
                        20
                    ],
                    "start": [
                        86,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                86,
                                20
                            ],
                            "start": [
                                86,
                                17
                            ],
                            "type": "doc.type.name",
                            "view": "any"
                        }
                    ],
                    "view": "any"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    86,
                    20
                ],
                "name": "on_use",
                "rawdesc": "TODO",
                "start": [
                    86,
                    10
                ],
                "type": "doc.field",
                "view": "any",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        72,
                        25
                    ],
                    "start": [
                        72,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                72,
                                24
                            ],
                            "start": [
                                72,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    72,
                    25
                ],
                "name": "palette",
                "start": [
                    72,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        72,
                        25
                    ],
                    "start": [
                        72,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                72,
                                24
                            ],
                            "start": [
                                72,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    72,
                    25
                ],
                "name": "palette",
                "start": [
                    72,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        75,
                        23
                    ],
                    "start": [
                        75,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                75,
                                22
                            ],
                            "start": [
                                75,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "number"
                        }
                    ],
                    "view": "number?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    75,
                    23
                ],
                "name": "range",
                "start": [
                    75,
                    10
                ],
                "type": "doc.field",
                "view": "number?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        75,
                        23
                    ],
                    "start": [
                        75,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                75,
                                22
                            ],
                            "start": [
                                75,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "number"
                        }
                    ],
                    "view": "number?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    75,
                    23
                ],
                "name": "range",
                "start": [
                    75,
                    10
                ],
                "type": "doc.field",
                "view": "number?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        65,
                        35
                    ],
                    "start": [
                        65,
                        28
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                65,
                                34
                            ],
                            "start": [
                                65,
                                28
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    65,
                    35
                ],
                "name": "short_description",
                "start": [
                    65,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        65,
                        35
                    ],
                    "start": [
                        65,
                        28
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                65,
                                34
                            ],
                            "start": [
                                65,
                                28
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    65,
                    35
                ],
                "name": "short_description",
                "start": [
                    65,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        81,
                        31
                    ],
                    "start": [
                        81,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                81,
                                30
                            ],
                            "start": [
                                81,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "core.ItemSound"
                        }
                    ],
                    "view": "(core.ItemSound)?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    81,
                    31
                ],
                "name": "sound",
                "start": [
                    81,
                    10
                ],
                "type": "doc.field",
                "view": "(core.ItemSound)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        81,
                        31
                    ],
                    "start": [
                        81,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                81,
                                30
                            ],
                            "start": [
                                81,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "core.ItemSound"
                        }
                    ],
                    "view": "(core.ItemSound)?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    81,
                    31
                ],
                "name": "sound",
                "start": [
                    81,
                    10
                ],
                "type": "doc.field",
                "view": "(core.ItemSound)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        74,
                        28
                    ],
                    "start": [
                        74,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                74,
                                27
                            ],
                            "start": [
                                74,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    74,
                    28
                ],
                "name": "stack_max",
                "start": [
                    74,
                    10
                ],
                "type": "doc.field",
                "view": "integer?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        74,
                        28
                    ],
                    "start": [
                        74,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                74,
                                27
                            ],
                            "start": [
                                74,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    74,
                    28
                ],
                "name": "stack_max",
                "start": [
                    74,
                    10
                ],
                "type": "doc.field",
                "view": "integer?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "TODO",
                "extends": {
                    "finish": [
                        78,
                        32
                    ],
                    "start": [
                        78,
                        28
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                78,
                                31
                            ],
                            "start": [
                                78,
                                28
                            ],
                            "type": "doc.type.name",
                            "view": "any"
                        }
                    ],
                    "view": "any"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    78,
                    32
                ],
                "name": "tool_capabilities",
                "rawdesc": "TODO",
                "start": [
                    78,
                    10
                ],
                "type": "doc.field",
                "view": "any",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "TODO",
                "extends": {
                    "finish": [
                        78,
                        32
                    ],
                    "start": [
                        78,
                        28
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                78,
                                31
                            ],
                            "start": [
                                78,
                                28
                            ],
                            "type": "doc.type.name",
                            "view": "any"
                        }
                    ],
                    "view": "any"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    78,
                    32
                ],
                "name": "tool_capabilities",
                "rawdesc": "TODO",
                "start": [
                    78,
                    10
                ],
                "type": "doc.field",
                "view": "any",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        69,
                        29
                    ],
                    "start": [
                        69,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                69,
                                28
                            ],
                            "start": [
                                69,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    69,
                    29
                ],
                "name": "wield_image",
                "start": [
                    69,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        69,
                        29
                    ],
                    "start": [
                        69,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                69,
                                28
                            ],
                            "start": [
                                69,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    69,
                    29
                ],
                "name": "wield_image",
                "start": [
                    69,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        70,
                        31
                    ],
                    "start": [
                        70,
                        24
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                70,
                                30
                            ],
                            "start": [
                                70,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    70,
                    31
                ],
                "name": "wield_overlay",
                "start": [
                    70,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        70,
                        31
                    ],
                    "start": [
                        70,
                        24
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                70,
                                30
                            ],
                            "start": [
                                70,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    70,
                    31
                ],
                "name": "wield_overlay",
                "start": [
                    70,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        71,
                        36
                    ],
                    "start": [
                        71,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                71,
                                35
                            ],
                            "start": [
                                71,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "vector.Vector"
                        }
                    ],
                    "view": "(vector.Vector)?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    71,
                    36
                ],
                "name": "wield_scale",
                "start": [
                    71,
                    10
                ],
                "type": "doc.field",
                "view": "(vector.Vector)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        71,
                        36
                    ],
                    "start": [
                        71,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                71,
                                35
                            ],
                            "start": [
                                71,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "vector.Vector"
                        }
                    ],
                    "view": "(vector.Vector)?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    71,
                    36
                ],
                "name": "wield_scale",
                "start": [
                    71,
                    10
                ],
                "type": "doc.field",
                "view": "(vector.Vector)?",
                "visible": "public"
            }
        ],
        "name": "core.ItemDef",
        "type": "type",
        "view": "core.ItemDef"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    89,
                    24
                ],
                "start": [
                    89,
                    10
                ],
                "type": "doc.class",
                "view": "core.ItemSound",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    89,
                    24
                ],
                "start": [
                    89,
                    10
                ],
                "type": "doc.class",
                "view": "core.ItemSound",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        90,
                        38
                    ],
                    "start": [
                        90,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                90,
                                38
                            ],
                            "start": [
                                90,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "core.SimpleSoundSpec"
                        }
                    ],
                    "view": "(core.SimpleSoundSpec)?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    90,
                    38
                ],
                "name": "breaks",
                "start": [
                    90,
                    10
                ],
                "type": "doc.field",
                "view": "(core.SimpleSoundSpec)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        90,
                        38
                    ],
                    "start": [
                        90,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                90,
                                38
                            ],
                            "start": [
                                90,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "core.SimpleSoundSpec"
                        }
                    ],
                    "view": "(core.SimpleSoundSpec)?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    90,
                    38
                ],
                "name": "breaks",
                "start": [
                    90,
                    10
                ],
                "type": "doc.field",
                "view": "(core.SimpleSoundSpec)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        91,
                        35
                    ],
                    "start": [
                        91,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                91,
                                35
                            ],
                            "start": [
                                91,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "core.SimpleSoundSpec"
                        }
                    ],
                    "view": "(core.SimpleSoundSpec)?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    91,
                    35
                ],
                "name": "eat",
                "start": [
                    91,
                    10
                ],
                "type": "doc.field",
                "view": "(core.SimpleSoundSpec)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        91,
                        35
                    ],
                    "start": [
                        91,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                91,
                                35
                            ],
                            "start": [
                                91,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "core.SimpleSoundSpec"
                        }
                    ],
                    "view": "(core.SimpleSoundSpec)?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    91,
                    35
                ],
                "name": "eat",
                "start": [
                    91,
                    10
                ],
                "type": "doc.field",
                "view": "(core.SimpleSoundSpec)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        92,
                        41
                    ],
                    "start": [
                        92,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                92,
                                41
                            ],
                            "start": [
                                92,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "core.SimpleSoundSpec"
                        }
                    ],
                    "view": "(core.SimpleSoundSpec)?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    92,
                    41
                ],
                "name": "punch_use",
                "start": [
                    92,
                    10
                ],
                "type": "doc.field",
                "view": "(core.SimpleSoundSpec)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        92,
                        41
                    ],
                    "start": [
                        92,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                92,
                                41
                            ],
                            "start": [
                                92,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "core.SimpleSoundSpec"
                        }
                    ],
                    "view": "(core.SimpleSoundSpec)?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    92,
                    41
                ],
                "name": "punch_use",
                "start": [
                    92,
                    10
                ],
                "type": "doc.field",
                "view": "(core.SimpleSoundSpec)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        93,
                        45
                    ],
                    "start": [
                        93,
                        25
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                93,
                                45
                            ],
                            "start": [
                                93,
                                25
                            ],
                            "type": "doc.type.name",
                            "view": "core.SimpleSoundSpec"
                        }
                    ],
                    "view": "(core.SimpleSoundSpec)?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    93,
                    45
                ],
                "name": "punch_use_air",
                "start": [
                    93,
                    10
                ],
                "type": "doc.field",
                "view": "(core.SimpleSoundSpec)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        93,
                        45
                    ],
                    "start": [
                        93,
                        25
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                93,
                                45
                            ],
                            "start": [
                                93,
                                25
                            ],
                            "type": "doc.type.name",
                            "view": "core.SimpleSoundSpec"
                        }
                    ],
                    "view": "(core.SimpleSoundSpec)?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    93,
                    45
                ],
                "name": "punch_use_air",
                "start": [
                    93,
                    10
                ],
                "type": "doc.field",
                "view": "(core.SimpleSoundSpec)?",
                "visible": "public"
            }
        ],
        "name": "core.ItemSound",
        "type": "type",
        "view": "core.ItemSound"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    134,
                    24
                ],
                "start": [
                    134,
                    10
                ],
                "type": "doc.class",
                "view": "core.ItemStack",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    134,
                    24
                ],
                "start": [
                    134,
                    10
                ],
                "type": "doc.class",
                "view": "core.ItemStack",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        137,
                        69
                    ],
                    "start": [
                        137,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        137,
                                        44
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            137,
                                            27
                                        ],
                                        "start": [
                                            137,
                                            23
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        137,
                                        23
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.ItemStack"
                                }
                            ],
                            "finish": [
                                137,
                                69
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        137,
                                        69
                                    ],
                                    "start": [
                                        137,
                                        48
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                137,
                                                69
                                            ],
                                            "start": [
                                                137,
                                                48
                                            ],
                                            "type": "doc.type.name",
                                            "view": "core.ItemStackMetaRef"
                                        }
                                    ],
                                    "view": "core.ItemStackMetaRef"
                                }
                            ],
                            "start": [
                                137,
                                19
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.ItemStack):core.ItemStackMetaRef"
                        }
                    ],
                    "view": "fun(self: core.ItemStack):core.ItemStackMetaRef"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    137,
                    69
                ],
                "name": "get_meta",
                "start": [
                    137,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.ItemStack):core.ItemStackMetaRef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        137,
                        69
                    ],
                    "start": [
                        137,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        137,
                                        44
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            137,
                                            27
                                        ],
                                        "start": [
                                            137,
                                            23
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        137,
                                        23
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.ItemStack"
                                }
                            ],
                            "finish": [
                                137,
                                69
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        137,
                                        69
                                    ],
                                    "start": [
                                        137,
                                        48
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                137,
                                                69
                                            ],
                                            "start": [
                                                137,
                                                48
                                            ],
                                            "type": "doc.type.name",
                                            "view": "core.ItemStackMetaRef"
                                        }
                                    ],
                                    "view": "core.ItemStackMetaRef"
                                }
                            ],
                            "start": [
                                137,
                                19
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.ItemStack):core.ItemStackMetaRef"
                        }
                    ],
                    "view": "fun(self: core.ItemStack):core.ItemStackMetaRef"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    137,
                    69
                ],
                "name": "get_meta",
                "start": [
                    137,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.ItemStack):core.ItemStackMetaRef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        136,
                        54
                    ],
                    "start": [
                        136,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        136,
                                        44
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            136,
                                            27
                                        ],
                                        "start": [
                                            136,
                                            23
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        136,
                                        23
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.ItemStack"
                                }
                            ],
                            "finish": [
                                136,
                                54
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        136,
                                        54
                                    ],
                                    "start": [
                                        136,
                                        48
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                136,
                                                54
                                            ],
                                            "start": [
                                                136,
                                                48
                                            ],
                                            "type": "doc.type.name",
                                            "view": "string"
                                        }
                                    ],
                                    "view": "string"
                                }
                            ],
                            "start": [
                                136,
                                19
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.ItemStack):string"
                        }
                    ],
                    "view": "fun(self: core.ItemStack):string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    136,
                    54
                ],
                "name": "get_name",
                "start": [
                    136,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.ItemStack):string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        136,
                        54
                    ],
                    "start": [
                        136,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        136,
                                        44
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            136,
                                            27
                                        ],
                                        "start": [
                                            136,
                                            23
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        136,
                                        23
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.ItemStack"
                                }
                            ],
                            "finish": [
                                136,
                                54
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        136,
                                        54
                                    ],
                                    "start": [
                                        136,
                                        48
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                136,
                                                54
                                            ],
                                            "start": [
                                                136,
                                                48
                                            ],
                                            "type": "doc.type.name",
                                            "view": "string"
                                        }
                                    ],
                                    "view": "string"
                                }
                            ],
                            "start": [
                                136,
                                19
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.ItemStack):string"
                        }
                    ],
                    "view": "fun(self: core.ItemStack):string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    136,
                    54
                ],
                "name": "get_name",
                "start": [
                    136,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.ItemStack):string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        135,
                        55
                    ],
                    "start": [
                        135,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        135,
                                        44
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            135,
                                            27
                                        ],
                                        "start": [
                                            135,
                                            23
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        135,
                                        23
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.ItemStack"
                                }
                            ],
                            "finish": [
                                135,
                                55
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        135,
                                        55
                                    ],
                                    "start": [
                                        135,
                                        48
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                135,
                                                55
                                            ],
                                            "start": [
                                                135,
                                                48
                                            ],
                                            "type": "doc.type.name",
                                            "view": "boolean"
                                        }
                                    ],
                                    "view": "boolean"
                                }
                            ],
                            "start": [
                                135,
                                19
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.ItemStack):boolean"
                        }
                    ],
                    "view": "fun(self: core.ItemStack):boolean"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    135,
                    55
                ],
                "name": "is_empty",
                "start": [
                    135,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.ItemStack):boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        135,
                        55
                    ],
                    "start": [
                        135,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        135,
                                        44
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            135,
                                            27
                                        ],
                                        "start": [
                                            135,
                                            23
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        135,
                                        23
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.ItemStack"
                                }
                            ],
                            "finish": [
                                135,
                                55
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        135,
                                        55
                                    ],
                                    "start": [
                                        135,
                                        48
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                135,
                                                55
                                            ],
                                            "start": [
                                                135,
                                                48
                                            ],
                                            "type": "doc.type.name",
                                            "view": "boolean"
                                        }
                                    ],
                                    "view": "boolean"
                                }
                            ],
                            "start": [
                                135,
                                19
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.ItemStack):boolean"
                        }
                    ],
                    "view": "fun(self: core.ItemStack):boolean"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    135,
                    55
                ],
                "name": "is_empty",
                "start": [
                    135,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.ItemStack):boolean",
                "visible": "public"
            }
        ],
        "name": "core.ItemStack",
        "type": "type",
        "view": "core.ItemStack"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            139,
                            50
                        ],
                        "start": [
                            139,
                            34
                        ],
                        "type": "doc.extends.name",
                        "view": "core.MetaDataRef"
                    }
                ],
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    139,
                    50
                ],
                "start": [
                    139,
                    10
                ],
                "type": "doc.class",
                "view": "core.ItemStackMetaRef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            139,
                            50
                        ],
                        "start": [
                            139,
                            34
                        ],
                        "type": "doc.extends.name",
                        "view": "core.MetaDataRef"
                    }
                ],
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    139,
                    50
                ],
                "start": [
                    139,
                    10
                ],
                "type": "doc.class",
                "view": "core.ItemStackMetaRef",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        144,
                        66
                    ],
                    "start": [
                        144,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        144,
                                        41
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            144,
                                            22
                                        ],
                                        "start": [
                                            144,
                                            18
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        144,
                                        18
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        144,
                                        55
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            144,
                                            46
                                        ],
                                        "start": [
                                            144,
                                            43
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        144,
                                        43
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                144,
                                66
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        144,
                                        66
                                    ],
                                    "start": [
                                        144,
                                        59
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                144,
                                                65
                                            ],
                                            "start": [
                                                144,
                                                59
                                            ],
                                            "type": "doc.type.name",
                                            "view": "string"
                                        }
                                    ],
                                    "view": "string?"
                                }
                            ],
                            "start": [
                                144,
                                14
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string):string?"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string):string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    144,
                    66
                ],
                "name": "get",
                "start": [
                    144,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string):string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        144,
                        66
                    ],
                    "start": [
                        144,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        144,
                                        41
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            144,
                                            22
                                        ],
                                        "start": [
                                            144,
                                            18
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        144,
                                        18
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        144,
                                        55
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            144,
                                            46
                                        ],
                                        "start": [
                                            144,
                                            43
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        144,
                                        43
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                144,
                                66
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        144,
                                        66
                                    ],
                                    "start": [
                                        144,
                                        59
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                144,
                                                65
                                            ],
                                            "start": [
                                                144,
                                                59
                                            ],
                                            "type": "doc.type.name",
                                            "view": "string"
                                        }
                                    ],
                                    "view": "string?"
                                }
                            ],
                            "start": [
                                144,
                                14
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string):string?"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string):string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    144,
                    66
                ],
                "name": "get",
                "start": [
                    144,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string):string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        148,
                        70
                    ],
                    "start": [
                        148,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        148,
                                        45
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            148,
                                            26
                                        ],
                                        "start": [
                                            148,
                                            22
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        148,
                                        22
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        148,
                                        59
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            148,
                                            50
                                        ],
                                        "start": [
                                            148,
                                            47
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        148,
                                        47
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                148,
                                70
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        148,
                                        70
                                    ],
                                    "start": [
                                        148,
                                        63
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                148,
                                                70
                                            ],
                                            "start": [
                                                148,
                                                63
                                            ],
                                            "type": "doc.type.name",
                                            "view": "integer"
                                        }
                                    ],
                                    "view": "integer"
                                }
                            ],
                            "start": [
                                148,
                                18
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string):integer"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string):integer"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    148,
                    70
                ],
                "name": "get_int",
                "start": [
                    148,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string):integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        148,
                        70
                    ],
                    "start": [
                        148,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        148,
                                        45
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            148,
                                            26
                                        ],
                                        "start": [
                                            148,
                                            22
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        148,
                                        22
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        148,
                                        59
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            148,
                                            50
                                        ],
                                        "start": [
                                            148,
                                            47
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        148,
                                        47
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                148,
                                70
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        148,
                                        70
                                    ],
                                    "start": [
                                        148,
                                        63
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                148,
                                                70
                                            ],
                                            "start": [
                                                148,
                                                63
                                            ],
                                            "type": "doc.type.name",
                                            "view": "integer"
                                        }
                                    ],
                                    "view": "integer"
                                }
                            ],
                            "start": [
                                148,
                                18
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string):integer"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string):integer"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    148,
                    70
                ],
                "name": "get_int",
                "start": [
                    148,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string):integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        146,
                        72
                    ],
                    "start": [
                        146,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        146,
                                        48
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            146,
                                            29
                                        ],
                                        "start": [
                                            146,
                                            25
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        146,
                                        25
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        146,
                                        62
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            146,
                                            53
                                        ],
                                        "start": [
                                            146,
                                            50
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        146,
                                        50
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                146,
                                72
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        146,
                                        72
                                    ],
                                    "start": [
                                        146,
                                        66
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                146,
                                                72
                                            ],
                                            "start": [
                                                146,
                                                66
                                            ],
                                            "type": "doc.type.name",
                                            "view": "string"
                                        }
                                    ],
                                    "view": "string"
                                }
                            ],
                            "start": [
                                146,
                                21
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string):string"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string):string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    146,
                    72
                ],
                "name": "get_string",
                "start": [
                    146,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string):string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        146,
                        72
                    ],
                    "start": [
                        146,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        146,
                                        48
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            146,
                                            29
                                        ],
                                        "start": [
                                            146,
                                            25
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        146,
                                        25
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        146,
                                        62
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            146,
                                            53
                                        ],
                                        "start": [
                                            146,
                                            50
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        146,
                                        50
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                146,
                                72
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        146,
                                        72
                                    ],
                                    "start": [
                                        146,
                                        66
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                146,
                                                72
                                            ],
                                            "start": [
                                                146,
                                                66
                                            ],
                                            "type": "doc.type.name",
                                            "view": "string"
                                        }
                                    ],
                                    "view": "string"
                                }
                            ],
                            "start": [
                                146,
                                21
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string):string"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string):string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    146,
                    72
                ],
                "name": "get_string",
                "start": [
                    146,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string):string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        147,
                        77
                    ],
                    "start": [
                        147,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        147,
                                        45
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            147,
                                            26
                                        ],
                                        "start": [
                                            147,
                                            22
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        147,
                                        22
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        147,
                                        59
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            147,
                                            50
                                        ],
                                        "start": [
                                            147,
                                            47
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        147,
                                        47
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": [
                                        147,
                                        76
                                    ],
                                    "name": {
                                        "[1]": "value",
                                        "finish": [
                                            147,
                                            66
                                        ],
                                        "start": [
                                            147,
                                            61
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "value"
                                    },
                                    "start": [
                                        147,
                                        61
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "integer"
                                }
                            ],
                            "finish": [
                                147,
                                77
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                147,
                                18
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string, value: integer)"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string, value: integer)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    147,
                    77
                ],
                "name": "set_int",
                "start": [
                    147,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string, value: integer)",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        147,
                        77
                    ],
                    "start": [
                        147,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        147,
                                        45
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            147,
                                            26
                                        ],
                                        "start": [
                                            147,
                                            22
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        147,
                                        22
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        147,
                                        59
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            147,
                                            50
                                        ],
                                        "start": [
                                            147,
                                            47
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        147,
                                        47
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": [
                                        147,
                                        76
                                    ],
                                    "name": {
                                        "[1]": "value",
                                        "finish": [
                                            147,
                                            66
                                        ],
                                        "start": [
                                            147,
                                            61
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "value"
                                    },
                                    "start": [
                                        147,
                                        61
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "integer"
                                }
                            ],
                            "finish": [
                                147,
                                77
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                147,
                                18
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string, value: integer)"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string, value: integer)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    147,
                    77
                ],
                "name": "set_int",
                "start": [
                    147,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string, value: integer)",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        145,
                        79
                    ],
                    "start": [
                        145,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        145,
                                        48
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            145,
                                            29
                                        ],
                                        "start": [
                                            145,
                                            25
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        145,
                                        25
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        145,
                                        62
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            145,
                                            53
                                        ],
                                        "start": [
                                            145,
                                            50
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        145,
                                        50
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": [
                                        145,
                                        78
                                    ],
                                    "name": {
                                        "[1]": "value",
                                        "finish": [
                                            145,
                                            69
                                        ],
                                        "start": [
                                            145,
                                            64
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "value"
                                    },
                                    "start": [
                                        145,
                                        64
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                145,
                                79
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                145,
                                21
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string, value: string)"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string, value: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    145,
                    79
                ],
                "name": "set_string",
                "start": [
                    145,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string, value: string)",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        145,
                        79
                    ],
                    "start": [
                        145,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        145,
                                        48
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            145,
                                            29
                                        ],
                                        "start": [
                                            145,
                                            25
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        145,
                                        25
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        145,
                                        62
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            145,
                                            53
                                        ],
                                        "start": [
                                            145,
                                            50
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        145,
                                        50
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": [
                                        145,
                                        78
                                    ],
                                    "name": {
                                        "[1]": "value",
                                        "finish": [
                                            145,
                                            69
                                        ],
                                        "start": [
                                            145,
                                            64
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "value"
                                    },
                                    "start": [
                                        145,
                                        64
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                145,
                                79
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                145,
                                21
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string, value: string)"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string, value: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    145,
                    79
                ],
                "name": "set_string",
                "start": [
                    145,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string, value: string)",
                "visible": "public"
            }
        ],
        "name": "core.ItemStackMetaRef",
        "type": "type",
        "view": "core.ItemStackMetaRef"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    23,
                    18
                ],
                "start": [
                    23,
                    10
                ],
                "type": "doc.class",
                "view": "core.Job",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        24,
                        26
                    ],
                    "start": [
                        24,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        24,
                                        25
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            24,
                                            25
                                        ],
                                        "start": [
                                            24,
                                            21
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        24,
                                        21
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "any"
                                }
                            ],
                            "finish": [
                                24,
                                26
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                24,
                                17
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: any)"
                        }
                    ],
                    "view": "fun(self: any)"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    24,
                    26
                ],
                "name": "cancel",
                "start": [
                    24,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: any)",
                "visible": "public"
            }
        ],
        "name": "core.Job",
        "type": "type",
        "view": "core.Job"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    95,
                    21
                ],
                "start": [
                    95,
                    10
                ],
                "type": "doc.class",
                "view": "core.LBMDef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    95,
                    21
                ],
                "start": [
                    95,
                    10
                ],
                "type": "doc.class",
                "view": "core.LBMDef",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "core.LBMDef",
        "type": "type",
        "view": "core.LBMDef"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            141,
                            41
                        ],
                        "start": [
                            141,
                            27
                        ],
                        "type": "doc.extends.name",
                        "view": "core.ObjectRef"
                    }
                ],
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    141,
                    41
                ],
                "start": [
                    141,
                    10
                ],
                "type": "doc.class",
                "view": "core.LuaEntity",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            141,
                            41
                        ],
                        "start": [
                            141,
                            27
                        ],
                        "type": "doc.extends.name",
                        "view": "core.ObjectRef"
                    }
                ],
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    141,
                    41
                ],
                "start": [
                    141,
                    10
                ],
                "type": "doc.class",
                "view": "core.LuaEntity",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "core.LuaEntity",
        "type": "type",
        "view": "core.LuaEntity"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    143,
                    26
                ],
                "start": [
                    143,
                    10
                ],
                "type": "doc.class",
                "view": "core.MetaDataRef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    143,
                    26
                ],
                "start": [
                    143,
                    10
                ],
                "type": "doc.class",
                "view": "core.MetaDataRef",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        144,
                        66
                    ],
                    "start": [
                        144,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        144,
                                        41
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            144,
                                            22
                                        ],
                                        "start": [
                                            144,
                                            18
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        144,
                                        18
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        144,
                                        55
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            144,
                                            46
                                        ],
                                        "start": [
                                            144,
                                            43
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        144,
                                        43
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                144,
                                66
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        144,
                                        66
                                    ],
                                    "start": [
                                        144,
                                        59
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                144,
                                                65
                                            ],
                                            "start": [
                                                144,
                                                59
                                            ],
                                            "type": "doc.type.name",
                                            "view": "string"
                                        }
                                    ],
                                    "view": "string?"
                                }
                            ],
                            "start": [
                                144,
                                14
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string):string?"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string):string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    144,
                    66
                ],
                "name": "get",
                "start": [
                    144,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string):string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        144,
                        66
                    ],
                    "start": [
                        144,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        144,
                                        41
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            144,
                                            22
                                        ],
                                        "start": [
                                            144,
                                            18
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        144,
                                        18
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        144,
                                        55
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            144,
                                            46
                                        ],
                                        "start": [
                                            144,
                                            43
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        144,
                                        43
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                144,
                                66
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        144,
                                        66
                                    ],
                                    "start": [
                                        144,
                                        59
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                144,
                                                65
                                            ],
                                            "start": [
                                                144,
                                                59
                                            ],
                                            "type": "doc.type.name",
                                            "view": "string"
                                        }
                                    ],
                                    "view": "string?"
                                }
                            ],
                            "start": [
                                144,
                                14
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string):string?"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string):string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    144,
                    66
                ],
                "name": "get",
                "start": [
                    144,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string):string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        148,
                        70
                    ],
                    "start": [
                        148,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        148,
                                        45
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            148,
                                            26
                                        ],
                                        "start": [
                                            148,
                                            22
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        148,
                                        22
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        148,
                                        59
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            148,
                                            50
                                        ],
                                        "start": [
                                            148,
                                            47
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        148,
                                        47
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                148,
                                70
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        148,
                                        70
                                    ],
                                    "start": [
                                        148,
                                        63
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                148,
                                                70
                                            ],
                                            "start": [
                                                148,
                                                63
                                            ],
                                            "type": "doc.type.name",
                                            "view": "integer"
                                        }
                                    ],
                                    "view": "integer"
                                }
                            ],
                            "start": [
                                148,
                                18
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string):integer"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string):integer"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    148,
                    70
                ],
                "name": "get_int",
                "start": [
                    148,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string):integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        148,
                        70
                    ],
                    "start": [
                        148,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        148,
                                        45
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            148,
                                            26
                                        ],
                                        "start": [
                                            148,
                                            22
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        148,
                                        22
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        148,
                                        59
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            148,
                                            50
                                        ],
                                        "start": [
                                            148,
                                            47
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        148,
                                        47
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                148,
                                70
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        148,
                                        70
                                    ],
                                    "start": [
                                        148,
                                        63
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                148,
                                                70
                                            ],
                                            "start": [
                                                148,
                                                63
                                            ],
                                            "type": "doc.type.name",
                                            "view": "integer"
                                        }
                                    ],
                                    "view": "integer"
                                }
                            ],
                            "start": [
                                148,
                                18
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string):integer"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string):integer"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    148,
                    70
                ],
                "name": "get_int",
                "start": [
                    148,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string):integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        146,
                        72
                    ],
                    "start": [
                        146,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        146,
                                        48
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            146,
                                            29
                                        ],
                                        "start": [
                                            146,
                                            25
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        146,
                                        25
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        146,
                                        62
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            146,
                                            53
                                        ],
                                        "start": [
                                            146,
                                            50
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        146,
                                        50
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                146,
                                72
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        146,
                                        72
                                    ],
                                    "start": [
                                        146,
                                        66
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                146,
                                                72
                                            ],
                                            "start": [
                                                146,
                                                66
                                            ],
                                            "type": "doc.type.name",
                                            "view": "string"
                                        }
                                    ],
                                    "view": "string"
                                }
                            ],
                            "start": [
                                146,
                                21
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string):string"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string):string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    146,
                    72
                ],
                "name": "get_string",
                "start": [
                    146,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string):string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        146,
                        72
                    ],
                    "start": [
                        146,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        146,
                                        48
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            146,
                                            29
                                        ],
                                        "start": [
                                            146,
                                            25
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        146,
                                        25
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        146,
                                        62
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            146,
                                            53
                                        ],
                                        "start": [
                                            146,
                                            50
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        146,
                                        50
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                146,
                                72
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        146,
                                        72
                                    ],
                                    "start": [
                                        146,
                                        66
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                146,
                                                72
                                            ],
                                            "start": [
                                                146,
                                                66
                                            ],
                                            "type": "doc.type.name",
                                            "view": "string"
                                        }
                                    ],
                                    "view": "string"
                                }
                            ],
                            "start": [
                                146,
                                21
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string):string"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string):string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    146,
                    72
                ],
                "name": "get_string",
                "start": [
                    146,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string):string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        147,
                        77
                    ],
                    "start": [
                        147,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        147,
                                        45
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            147,
                                            26
                                        ],
                                        "start": [
                                            147,
                                            22
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        147,
                                        22
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        147,
                                        59
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            147,
                                            50
                                        ],
                                        "start": [
                                            147,
                                            47
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        147,
                                        47
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": [
                                        147,
                                        76
                                    ],
                                    "name": {
                                        "[1]": "value",
                                        "finish": [
                                            147,
                                            66
                                        ],
                                        "start": [
                                            147,
                                            61
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "value"
                                    },
                                    "start": [
                                        147,
                                        61
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "integer"
                                }
                            ],
                            "finish": [
                                147,
                                77
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                147,
                                18
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string, value: integer)"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string, value: integer)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    147,
                    77
                ],
                "name": "set_int",
                "start": [
                    147,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string, value: integer)",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        147,
                        77
                    ],
                    "start": [
                        147,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        147,
                                        45
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            147,
                                            26
                                        ],
                                        "start": [
                                            147,
                                            22
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        147,
                                        22
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        147,
                                        59
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            147,
                                            50
                                        ],
                                        "start": [
                                            147,
                                            47
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        147,
                                        47
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": [
                                        147,
                                        76
                                    ],
                                    "name": {
                                        "[1]": "value",
                                        "finish": [
                                            147,
                                            66
                                        ],
                                        "start": [
                                            147,
                                            61
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "value"
                                    },
                                    "start": [
                                        147,
                                        61
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "integer"
                                }
                            ],
                            "finish": [
                                147,
                                77
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                147,
                                18
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string, value: integer)"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string, value: integer)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    147,
                    77
                ],
                "name": "set_int",
                "start": [
                    147,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string, value: integer)",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        145,
                        79
                    ],
                    "start": [
                        145,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        145,
                                        48
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            145,
                                            29
                                        ],
                                        "start": [
                                            145,
                                            25
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        145,
                                        25
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        145,
                                        62
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            145,
                                            53
                                        ],
                                        "start": [
                                            145,
                                            50
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        145,
                                        50
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": [
                                        145,
                                        78
                                    ],
                                    "name": {
                                        "[1]": "value",
                                        "finish": [
                                            145,
                                            69
                                        ],
                                        "start": [
                                            145,
                                            64
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "value"
                                    },
                                    "start": [
                                        145,
                                        64
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                145,
                                79
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                145,
                                21
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string, value: string)"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string, value: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    145,
                    79
                ],
                "name": "set_string",
                "start": [
                    145,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string, value: string)",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        145,
                        79
                    ],
                    "start": [
                        145,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        145,
                                        48
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            145,
                                            29
                                        ],
                                        "start": [
                                            145,
                                            25
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        145,
                                        25
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.MetaDataRef"
                                },
                                {
                                    "finish": [
                                        145,
                                        62
                                    ],
                                    "name": {
                                        "[1]": "key",
                                        "finish": [
                                            145,
                                            53
                                        ],
                                        "start": [
                                            145,
                                            50
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "key"
                                    },
                                    "start": [
                                        145,
                                        50
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": [
                                        145,
                                        78
                                    ],
                                    "name": {
                                        "[1]": "value",
                                        "finish": [
                                            145,
                                            69
                                        ],
                                        "start": [
                                            145,
                                            64
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "value"
                                    },
                                    "start": [
                                        145,
                                        64
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                145,
                                79
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                145,
                                21
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.MetaDataRef, key: string, value: string)"
                        }
                    ],
                    "view": "fun(self: core.MetaDataRef, key: string, value: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    145,
                    79
                ],
                "name": "set_string",
                "start": [
                    145,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.MetaDataRef, key: string, value: string)",
                "visible": "public"
            }
        ],
        "name": "core.MetaDataRef",
        "type": "type",
        "view": "core.MetaDataRef"
    },
    {
        "defines": [
            {
                "finish": [
                    120,
                    73
                ],
                "start": [
                    120,
                    10
                ],
                "type": "doc.alias",
                "view": "{ name: string, param1: integer, param2: integer }"
            },
            {
                "finish": [
                    120,
                    73
                ],
                "start": [
                    120,
                    10
                ],
                "type": "doc.alias",
                "view": "{ name: string, param1: integer, param2: integer }"
            }
        ],
        "fields": [],
        "name": "core.Node",
        "type": "type",
        "view": "core.Node"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    97,
                    22
                ],
                "start": [
                    97,
                    10
                ],
                "type": "doc.class",
                "view": "core.NodeDef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    97,
                    22
                ],
                "start": [
                    97,
                    10
                ],
                "type": "doc.class",
                "view": "core.NodeDef",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "core.NodeDef",
        "type": "type",
        "view": "core.NodeDef"
    },
    {
        "defines": [
            {
                "finish": [
                    11,
                    30
                ],
                "start": [
                    11,
                    10
                ],
                "type": "doc.alias",
                "view": "string"
            },
            {
                "finish": [
                    11,
                    30
                ],
                "start": [
                    11,
                    10
                ],
                "type": "doc.alias",
                "view": "string"
            }
        ],
        "fields": [],
        "name": "core.NodeName",
        "type": "type",
        "view": "core.NodeName"
    },
    {
        "defines": [
            {
                "finish": [
                    121,
                    78
                ],
                "start": [
                    121,
                    10
                ],
                "type": "doc.alias",
                "view": "{ name: string, param1: integer, param2: integer }"
            },
            {
                "finish": [
                    121,
                    78
                ],
                "start": [
                    121,
                    10
                ],
                "type": "doc.alias",
                "view": "{ name: string, param1: integer, param2: integer }"
            }
        ],
        "fields": [],
        "name": "core.NodeOpt",
        "type": "type",
        "view": "core.NodeOpt"
    },
    {
        "defines": [
            {
                "desc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                "finish": [
                    15,
                    35
                ],
                "rawdesc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                "start": [
                    15,
                    10
                ],
                "type": "doc.alias",
                "view": "integer"
            },
            {
                "desc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                "finish": [
                    15,
                    35
                ],
                "rawdesc": "This is an implementation detail and should be treated as an opaque type\nTODO: use opaque type https://github.com/LuaLS/lua-language-server/issues/2074",
                "start": [
                    15,
                    10
                ],
                "type": "doc.alias",
                "view": "integer"
            }
        ],
        "fields": [],
        "name": "core.ObjectHandle",
        "type": "type",
        "view": "core.ObjectHandle"
    },
    {
        "defines": [
            {
                "finish": [
                    9,
                    31
                ],
                "start": [
                    9,
                    10
                ],
                "type": "doc.alias",
                "view": "integer"
            },
            {
                "finish": [
                    9,
                    31
                ],
                "start": [
                    9,
                    10
                ],
                "type": "doc.alias",
                "view": "integer"
            }
        ],
        "fields": [],
        "name": "core.ObjectId",
        "type": "type",
        "view": "core.ObjectId"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    150,
                    24
                ],
                "start": [
                    150,
                    10
                ],
                "type": "doc.class",
                "view": "core.ObjectRef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    150,
                    24
                ],
                "start": [
                    150,
                    10
                ],
                "type": "doc.class",
                "view": "core.ObjectRef",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "core.ObjectRef",
        "type": "type",
        "view": "core.ObjectRef"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    99,
                    21
                ],
                "start": [
                    99,
                    10
                ],
                "type": "doc.class",
                "view": "core.OreDef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    99,
                    21
                ],
                "start": [
                    99,
                    10
                ],
                "type": "doc.class",
                "view": "core.OreDef",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "core.OreDef",
        "type": "type",
        "view": "core.OreDef"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            152,
                            38
                        ],
                        "start": [
                            152,
                            24
                        ],
                        "type": "doc.extends.name",
                        "view": "core.ObjectRef"
                    }
                ],
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    152,
                    38
                ],
                "start": [
                    152,
                    10
                ],
                "type": "doc.class",
                "view": "core.Player",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            152,
                            38
                        ],
                        "start": [
                            152,
                            24
                        ],
                        "type": "doc.extends.name",
                        "view": "core.ObjectRef"
                    }
                ],
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    152,
                    38
                ],
                "start": [
                    152,
                    10
                ],
                "type": "doc.class",
                "view": "core.Player",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": " Actually an ObjectRef method, but returns nil on anything other than a player,\n so let's put it here and avoid the nil",
                "extends": {
                    "finish": [
                        156,
                        61
                    ],
                    "start": [
                        156,
                        24
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        156,
                                        46
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            156,
                                            32
                                        ],
                                        "start": [
                                            156,
                                            28
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        156,
                                        28
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.Player"
                                }
                            ],
                            "finish": [
                                156,
                                61
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        156,
                                        61
                                    ],
                                    "start": [
                                        156,
                                        50
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                156,
                                                61
                                            ],
                                            "start": [
                                                156,
                                                50
                                            ],
                                            "type": "doc.type.name",
                                            "view": "core.InvRef"
                                        }
                                    ],
                                    "view": "core.InvRef"
                                }
                            ],
                            "start": [
                                156,
                                24
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.Player):core.InvRef"
                        }
                    ],
                    "view": "fun(self: core.Player):core.InvRef"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    156,
                    61
                ],
                "name": "get_inventory",
                "rawdesc": " Actually an ObjectRef method, but returns nil on anything other than a player,\n so let's put it here and avoid the nil",
                "start": [
                    156,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.Player):core.InvRef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " Actually an ObjectRef method, but returns nil on anything other than a player,\n so let's put it here and avoid the nil",
                "extends": {
                    "finish": [
                        156,
                        61
                    ],
                    "start": [
                        156,
                        24
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        156,
                                        46
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            156,
                                            32
                                        ],
                                        "start": [
                                            156,
                                            28
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        156,
                                        28
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.Player"
                                }
                            ],
                            "finish": [
                                156,
                                61
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        156,
                                        61
                                    ],
                                    "start": [
                                        156,
                                        50
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                156,
                                                61
                                            ],
                                            "start": [
                                                156,
                                                50
                                            ],
                                            "type": "doc.type.name",
                                            "view": "core.InvRef"
                                        }
                                    ],
                                    "view": "core.InvRef"
                                }
                            ],
                            "start": [
                                156,
                                24
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.Player):core.InvRef"
                        }
                    ],
                    "view": "fun(self: core.Player):core.InvRef"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    156,
                    61
                ],
                "name": "get_inventory",
                "rawdesc": " Actually an ObjectRef method, but returns nil on anything other than a player,\n so let's put it here and avoid the nil",
                "start": [
                    156,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.Player):core.InvRef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        153,
                        58
                    ],
                    "start": [
                        153,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        153,
                                        48
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            153,
                                            34
                                        ],
                                        "start": [
                                            153,
                                            30
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        153,
                                        30
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.Player"
                                }
                            ],
                            "finish": [
                                153,
                                58
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        153,
                                        58
                                    ],
                                    "start": [
                                        153,
                                        52
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                153,
                                                58
                                            ],
                                            "start": [
                                                153,
                                                52
                                            ],
                                            "type": "doc.type.name",
                                            "view": "string"
                                        }
                                    ],
                                    "view": "string"
                                }
                            ],
                            "start": [
                                153,
                                26
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.Player):string"
                        }
                    ],
                    "view": "fun(self: core.Player):string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    153,
                    58
                ],
                "name": "get_player_name",
                "start": [
                    153,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.Player):string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        153,
                        58
                    ],
                    "start": [
                        153,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        153,
                                        48
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            153,
                                            34
                                        ],
                                        "start": [
                                            153,
                                            30
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        153,
                                        30
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.Player"
                                }
                            ],
                            "finish": [
                                153,
                                58
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        153,
                                        58
                                    ],
                                    "start": [
                                        153,
                                        52
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                153,
                                                58
                                            ],
                                            "start": [
                                                153,
                                                52
                                            ],
                                            "type": "doc.type.name",
                                            "view": "string"
                                        }
                                    ],
                                    "view": "string"
                                }
                            ],
                            "start": [
                                153,
                                26
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.Player):string"
                        }
                    ],
                    "view": "fun(self: core.Player):string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    153,
                    58
                ],
                "name": "get_player_name",
                "start": [
                    153,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.Player):string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        157,
                        59
                    ],
                    "start": [
                        157,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        157,
                                        48
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            157,
                                            34
                                        ],
                                        "start": [
                                            157,
                                            30
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        157,
                                        30
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.Player"
                                }
                            ],
                            "finish": [
                                157,
                                59
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        157,
                                        59
                                    ],
                                    "start": [
                                        157,
                                        52
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                157,
                                                59
                                            ],
                                            "start": [
                                                157,
                                                52
                                            ],
                                            "type": "doc.type.name",
                                            "view": "integer"
                                        }
                                    ],
                                    "view": "integer"
                                }
                            ],
                            "start": [
                                157,
                                26
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.Player):integer"
                        }
                    ],
                    "view": "fun(self: core.Player):integer"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    157,
                    59
                ],
                "name": "get_wield_index",
                "start": [
                    157,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.Player):integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        157,
                        59
                    ],
                    "start": [
                        157,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        157,
                                        48
                                    ],
                                    "name": {
                                        "[1]": "self",
                                        "finish": [
                                            157,
                                            34
                                        ],
                                        "start": [
                                            157,
                                            30
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "self"
                                    },
                                    "start": [
                                        157,
                                        30
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "core.Player"
                                }
                            ],
                            "finish": [
                                157,
                                59
                            ],
                            "returns": [
                                {
                                    "finish": [
                                        157,
                                        59
                                    ],
                                    "start": [
                                        157,
                                        52
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                157,
                                                59
                                            ],
                                            "start": [
                                                157,
                                                52
                                            ],
                                            "type": "doc.type.name",
                                            "view": "integer"
                                        }
                                    ],
                                    "view": "integer"
                                }
                            ],
                            "start": [
                                157,
                                26
                            ],
                            "type": "doc.type.function",
                            "view": "fun(self: core.Player):integer"
                        }
                    ],
                    "view": "fun(self: core.Player):integer"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    157,
                    59
                ],
                "name": "get_wield_index",
                "start": [
                    157,
                    10
                ],
                "type": "doc.field",
                "view": "fun(self: core.Player):integer",
                "visible": "public"
            }
        ],
        "name": "core.Player",
        "type": "type",
        "view": "core.Player"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    101,
                    27
                ],
                "start": [
                    101,
                    10
                ],
                "type": "doc.class",
                "view": "core.PrivilegeDef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    101,
                    27
                ],
                "start": [
                    101,
                    10
                ],
                "type": "doc.class",
                "view": "core.PrivilegeDef",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        102,
                        29
                    ],
                    "start": [
                        102,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                102,
                                28
                            ],
                            "start": [
                                102,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    102,
                    29
                ],
                "name": "description",
                "start": [
                    102,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        102,
                        29
                    ],
                    "start": [
                        102,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                102,
                                28
                            ],
                            "start": [
                                102,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    102,
                    29
                ],
                "name": "description",
                "start": [
                    102,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        104,
                        32
                    ],
                    "start": [
                        104,
                        24
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                104,
                                31
                            ],
                            "start": [
                                104,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    104,
                    32
                ],
                "name": "give_to_admin",
                "start": [
                    104,
                    10
                ],
                "type": "doc.field",
                "view": "boolean?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        104,
                        32
                    ],
                    "start": [
                        104,
                        24
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                104,
                                31
                            ],
                            "start": [
                                104,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    104,
                    32
                ],
                "name": "give_to_admin",
                "start": [
                    104,
                    10
                ],
                "type": "doc.field",
                "view": "boolean?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        103,
                        39
                    ],
                    "start": [
                        103,
                        31
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                103,
                                38
                            ],
                            "start": [
                                103,
                                31
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    103,
                    39
                ],
                "name": "give_to_singleplayer",
                "start": [
                    103,
                    10
                ],
                "type": "doc.field",
                "view": "boolean?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        103,
                        39
                    ],
                    "start": [
                        103,
                        31
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                103,
                                38
                            ],
                            "start": [
                                103,
                                31
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    103,
                    39
                ],
                "name": "give_to_singleplayer",
                "start": [
                    103,
                    10
                ],
                "type": "doc.field",
                "view": "boolean?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        105,
                        61
                    ],
                    "start": [
                        105,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        105,
                                        36
                                    ],
                                    "name": {
                                        "[1]": "name",
                                        "finish": [
                                            105,
                                            27
                                        ],
                                        "start": [
                                            105,
                                            23
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "name"
                                    },
                                    "start": [
                                        105,
                                        23
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": [
                                        105,
                                        60
                                    ],
                                    "name": {
                                        "[1]": "granter_name",
                                        "finish": [
                                            105,
                                            50
                                        ],
                                        "start": [
                                            105,
                                            38
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "granter_name"
                                    },
                                    "start": [
                                        105,
                                        38
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string?"
                                }
                            ],
                            "finish": [
                                105,
                                61
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                105,
                                19
                            ],
                            "type": "doc.type.function",
                            "view": "fun(name: string, granter_name?: string)"
                        }
                    ],
                    "view": "fun(name: string, granter_name?: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    105,
                    61
                ],
                "name": "on_grant",
                "start": [
                    105,
                    10
                ],
                "type": "doc.field",
                "view": "fun(name: string, granter_name?: string)",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        105,
                        61
                    ],
                    "start": [
                        105,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        105,
                                        36
                                    ],
                                    "name": {
                                        "[1]": "name",
                                        "finish": [
                                            105,
                                            27
                                        ],
                                        "start": [
                                            105,
                                            23
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "name"
                                    },
                                    "start": [
                                        105,
                                        23
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": [
                                        105,
                                        60
                                    ],
                                    "name": {
                                        "[1]": "granter_name",
                                        "finish": [
                                            105,
                                            50
                                        ],
                                        "start": [
                                            105,
                                            38
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "granter_name"
                                    },
                                    "start": [
                                        105,
                                        38
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string?"
                                }
                            ],
                            "finish": [
                                105,
                                61
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                105,
                                19
                            ],
                            "type": "doc.type.function",
                            "view": "fun(name: string, granter_name?: string)"
                        }
                    ],
                    "view": "fun(name: string, granter_name?: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    105,
                    61
                ],
                "name": "on_grant",
                "start": [
                    105,
                    10
                ],
                "type": "doc.field",
                "view": "fun(name: string, granter_name?: string)",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        106,
                        62
                    ],
                    "start": [
                        106,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        106,
                                        37
                                    ],
                                    "name": {
                                        "[1]": "name",
                                        "finish": [
                                            106,
                                            28
                                        ],
                                        "start": [
                                            106,
                                            24
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "name"
                                    },
                                    "start": [
                                        106,
                                        24
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": [
                                        106,
                                        61
                                    ],
                                    "name": {
                                        "[1]": "revoker_name",
                                        "finish": [
                                            106,
                                            51
                                        ],
                                        "start": [
                                            106,
                                            39
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "revoker_name"
                                    },
                                    "start": [
                                        106,
                                        39
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string?"
                                }
                            ],
                            "finish": [
                                106,
                                62
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                106,
                                20
                            ],
                            "type": "doc.type.function",
                            "view": "fun(name: string, revoker_name?: string)"
                        }
                    ],
                    "view": "fun(name: string, revoker_name?: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    106,
                    62
                ],
                "name": "on_revoke",
                "start": [
                    106,
                    10
                ],
                "type": "doc.field",
                "view": "fun(name: string, revoker_name?: string)",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        106,
                        62
                    ],
                    "start": [
                        106,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        106,
                                        37
                                    ],
                                    "name": {
                                        "[1]": "name",
                                        "finish": [
                                            106,
                                            28
                                        ],
                                        "start": [
                                            106,
                                            24
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "name"
                                    },
                                    "start": [
                                        106,
                                        24
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": [
                                        106,
                                        61
                                    ],
                                    "name": {
                                        "[1]": "revoker_name",
                                        "finish": [
                                            106,
                                            51
                                        ],
                                        "start": [
                                            106,
                                            39
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "revoker_name"
                                    },
                                    "start": [
                                        106,
                                        39
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "string?"
                                }
                            ],
                            "finish": [
                                106,
                                62
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                106,
                                20
                            ],
                            "type": "doc.type.function",
                            "view": "fun(name: string, revoker_name?: string)"
                        }
                    ],
                    "view": "fun(name: string, revoker_name?: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    106,
                    62
                ],
                "name": "on_revoke",
                "start": [
                    106,
                    10
                ],
                "type": "doc.field",
                "view": "fun(name: string, revoker_name?: string)",
                "visible": "public"
            }
        ],
        "name": "core.PrivilegeDef",
        "type": "type",
        "view": "core.PrivilegeDef"
    },
    {
        "defines": [
            {
                "finish": [
                    118,
                    40
                ],
                "start": [
                    118,
                    10
                ],
                "type": "doc.alias",
                "view": "{ [string]: boolean }"
            },
            {
                "finish": [
                    118,
                    40
                ],
                "start": [
                    118,
                    10
                ],
                "type": "doc.alias",
                "view": "{ [string]: boolean }"
            }
        ],
        "fields": [],
        "name": "core.Privs",
        "type": "type",
        "view": "core.Privs"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    109,
                    30
                ],
                "start": [
                    109,
                    10
                ],
                "type": "doc.class",
                "view": "core.RawSchematicDef",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    109,
                    30
                ],
                "start": [
                    109,
                    10
                ],
                "type": "doc.class",
                "view": "core.RawSchematicDef",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "core.RawSchematicDef",
        "type": "type",
        "view": "core.RawSchematicDef"
    },
    {
        "defines": [
            {
                "finish": [
                    108,
                    57
                ],
                "start": [
                    108,
                    10
                ],
                "type": "doc.alias",
                "view": "string|core.RawSchematicDef"
            },
            {
                "finish": [
                    108,
                    57
                ],
                "start": [
                    108,
                    10
                ],
                "type": "doc.alias",
                "view": "string|core.RawSchematicDef"
            }
        ],
        "fields": [],
        "name": "core.SchematicDef",
        "type": "type",
        "view": "core.SchematicDef"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    111,
                    30
                ],
                "start": [
                    111,
                    10
                ],
                "type": "doc.class",
                "view": "core.SimpleSoundSpec",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    111,
                    30
                ],
                "start": [
                    111,
                    10
                ],
                "type": "doc.class",
                "view": "core.SimpleSoundSpec",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "core.SimpleSoundSpec",
        "type": "type",
        "view": "core.SimpleSoundSpec"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                29,
                                24
                            ],
                            "name": "time",
                            "start": [
                                29,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                29,
                                30
                            ],
                            "name": "func",
                            "start": [
                                29,
                                26
                            ],
                            "type": "local",
                            "view": "fun(...any)"
                        },
                        {
                            "finish": [
                                29,
                                35
                            ],
                            "start": [
                                29,
                                32
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "finish": [
                        29,
                        40
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "core.Job"
                        }
                    ],
                    "start": [
                        29,
                        0
                    ],
                    "type": "function",
                    "view": "function core.after(time: number, func: fun(...any), ...any)\n  -> core.Job"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    29,
                    19
                ],
                "name": "after",
                "start": [
                    29,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.after",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                266,
                                32
                            ],
                            "name": "text",
                            "start": [
                                266,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        266,
                        37
                    ],
                    "start": [
                        266,
                        0
                    ],
                    "type": "function",
                    "view": "function core.chat_send_all(text: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    266,
                    27
                ],
                "name": "chat_send_all",
                "start": [
                    266,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                217,
                                32
                            ],
                            "name": "text",
                            "start": [
                                217,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        217,
                        37
                    ],
                    "start": [
                        217,
                        0
                    ],
                    "type": "function",
                    "view": "function core.chat_send_all(text: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    217,
                    27
                ],
                "name": "chat_send_all",
                "start": [
                    217,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.chat_send_all",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * `name`: Name of the player",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                271,
                                35
                            ],
                            "name": "name",
                            "start": [
                                271,
                                31
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                271,
                                41
                            ],
                            "name": "text",
                            "start": [
                                271,
                                37
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " * `name`: Name of the player",
                    "finish": [
                        271,
                        46
                    ],
                    "rawdesc": " * `name`: Name of the player",
                    "start": [
                        271,
                        0
                    ],
                    "type": "function",
                    "view": "function core.chat_send_player(name: string, text: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    271,
                    30
                ],
                "name": "chat_send_player",
                "rawdesc": " * `name`: Name of the player",
                "start": [
                    271,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                221,
                                35
                            ],
                            "name": "name",
                            "start": [
                                221,
                                31
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                221,
                                41
                            ],
                            "name": "text",
                            "start": [
                                221,
                                37
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        221,
                        46
                    ],
                    "start": [
                        221,
                        0
                    ],
                    "type": "function",
                    "view": "function core.chat_send_player(name: string, text: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    221,
                    30
                ],
                "name": "chat_send_player",
                "start": [
                    221,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.chat_send_player",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "@*return* — Result, missing privileges",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                260,
                                47
                            ],
                            "name": "player_or_name",
                            "start": [
                                260,
                                33
                            ],
                            "type": "local",
                            "view": "string|core.Player"
                        },
                        {
                            "finish": [
                                260,
                                52
                            ],
                            "start": [
                                260,
                                49
                            ],
                            "type": "...",
                            "view": "string"
                        }
                    ],
                    "desc": "@*return* — Result, missing privileges",
                    "finish": [
                        260,
                        57
                    ],
                    "returns": [
                        {
                            "desc": "Result, missing privileges",
                            "rawdesc": "Result, missing privileges",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "desc": "Result, missing privileges",
                            "rawdesc": "Result, missing privileges",
                            "type": "function.return",
                            "view": "{ [string]: boolean }"
                        }
                    ],
                    "start": [
                        260,
                        0
                    ],
                    "type": "function",
                    "view": "function core.check_player_privs(player_or_name: string|core.Player, ...string)\n  -> boolean\n  2. { [string]: boolean }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    260,
                    32
                ],
                "name": "check_player_privs",
                "start": [
                    260,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "@*return* — Result, missing privileges",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                211,
                                47
                            ],
                            "name": "player_or_name",
                            "start": [
                                211,
                                33
                            ],
                            "type": "local",
                            "view": "string|core.Player"
                        },
                        {
                            "finish": [
                                211,
                                52
                            ],
                            "start": [
                                211,
                                49
                            ],
                            "type": "...",
                            "view": "string"
                        }
                    ],
                    "desc": "@*return* — Result, missing privileges",
                    "finish": [
                        211,
                        57
                    ],
                    "returns": [
                        {
                            "desc": "Result, missing privileges",
                            "rawdesc": "Result, missing privileges",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "desc": "Result, missing privileges",
                            "rawdesc": "Result, missing privileges",
                            "type": "function.return",
                            "view": "{ [string]: boolean }"
                        }
                    ],
                    "start": [
                        211,
                        0
                    ],
                    "type": "function",
                    "view": "function core.check_player_privs(player_or_name: string|core.Player, ...string)\n  -> boolean\n  2. { [string]: boolean }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    211,
                    32
                ],
                "name": "check_player_privs",
                "start": [
                    211,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.check_player_privs",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                51,
                                23
                            ],
                            "start": [
                                51,
                                20
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "finish": [
                        51,
                        28
                    ],
                    "start": [
                        51,
                        0
                    ],
                    "type": "function",
                    "view": "function core.debug(...any)"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    51,
                    19
                ],
                "name": "debug",
                "start": [
                    51,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.debug",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Used by the server to format a chat message, based on the setting `chat_message_format`.\n   Refer to the documentation of the setting for a list of valid placeholders.\n * Takes player name and message, and returns the formatted string to be sent to players.\n * Can be redefined by mods if required, for things like colored names or messages.\n * **Only** the first occurrence of each placeholder will be replaced.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                282,
                                38
                            ],
                            "name": "name",
                            "start": [
                                282,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                282,
                                47
                            ],
                            "name": "message",
                            "start": [
                                282,
                                40
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " * Used by the server to format a chat message, based on the setting `chat_message_format`.\n   Refer to the documentation of the setting for a list of valid placeholders.\n * Takes player name and message, and returns the formatted string to be sent to players.\n * Can be redefined by mods if required, for things like colored names or messages.\n * **Only** the first occurrence of each placeholder will be replaced.",
                    "finish": [
                        282,
                        52
                    ],
                    "rawdesc": " * Used by the server to format a chat message, based on the setting `chat_message_format`.\n   Refer to the documentation of the setting for a list of valid placeholders.\n * Takes player name and message, and returns the formatted string to be sent to players.\n * Can be redefined by mods if required, for things like colored names or messages.\n * **Only** the first occurrence of each placeholder will be replaced.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        282,
                        0
                    ],
                    "type": "function",
                    "view": "function core.format_chat_message(name: string, message: string)\n  -> string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    282,
                    33
                ],
                "name": "format_chat_message",
                "rawdesc": " * Used by the server to format a chat message, based on the setting `chat_message_format`.\n   Refer to the documentation of the setting for a list of valid placeholders.\n * Takes player name and message, and returns the formatted string to be sent to players.\n * Can be redefined by mods if required, for things like colored names or messages.\n * **Only** the first occurrence of each placeholder will be replaced.",
                "start": [
                    282,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                227,
                                38
                            ],
                            "name": "name",
                            "start": [
                                227,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                227,
                                47
                            ],
                            "name": "message",
                            "start": [
                                227,
                                40
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        227,
                        52
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        227,
                        0
                    ],
                    "type": "function",
                    "view": "function core.format_chat_message(name: string, message: string)\n  -> string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    227,
                    33
                ],
                "name": "format_chat_message",
                "start": [
                    227,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.format_chat_message",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "returns the currently loading mod's name, when loading a mod.",
                "extends": {
                    "args": [],
                    "desc": "returns the currently loading mod's name, when loading a mod.",
                    "finish": [
                        7,
                        39
                    ],
                    "rawdesc": "returns the currently loading mod's name, when loading a mod.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        7,
                        0
                    ],
                    "type": "function",
                    "view": "function core.get_current_modname()\n  -> string"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    7,
                    33
                ],
                "name": "get_current_modname",
                "rawdesc": "returns the currently loading mod's name, when loading a mod.",
                "start": [
                    7,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.get_current_modname",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                43,
                                26
                            ],
                            "name": "pos",
                            "start": [
                                43,
                                23
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "finish": [
                        43,
                        31
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "core.MetaDataRef"
                        }
                    ],
                    "start": [
                        43,
                        0
                    ],
                    "type": "function",
                    "view": "function core.get_meta(pos: vector.Vector)\n  -> core.MetaDataRef"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    43,
                    22
                ],
                "name": "get_meta",
                "start": [
                    43,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.get_meta",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                174,
                                33
                            ],
                            "name": "modname",
                            "start": [
                                174,
                                26
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        174,
                        38
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        174,
                        0
                    ],
                    "type": "function",
                    "view": "function core.get_modpath(modname: string)\n  -> string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    174,
                    25
                ],
                "name": "get_modpath",
                "start": [
                    174,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                173,
                                33
                            ],
                            "name": "modname",
                            "start": [
                                173,
                                26
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        173,
                        38
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        173,
                        0
                    ],
                    "type": "function",
                    "view": "function core.get_modpath(modname: string)\n  -> string?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    173,
                    25
                ],
                "name": "get_modpath",
                "start": [
                    173,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.get_modpath",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns the node at the given position as table in the same format as `set_node`.\n * This function never returns `nil` and instead returns\n   `{name=\"ignore\", param1=0, param2=0}` for unloaded areas.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                306,
                                26
                            ],
                            "name": "pos",
                            "start": [
                                306,
                                23
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "desc": " * Returns the node at the given position as table in the same format as `set_node`.\n * This function never returns `nil` and instead returns\n   `{name=\"ignore\", param1=0, param2=0}` for unloaded areas.",
                    "finish": [
                        306,
                        31
                    ],
                    "rawdesc": " * Returns the node at the given position as table in the same format as `set_node`.\n * This function never returns `nil` and instead returns\n   `{name=\"ignore\", param1=0, param2=0}` for unloaded areas.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "{ name: string, param1: integer, param2: integer }"
                        }
                    ],
                    "start": [
                        306,
                        0
                    ],
                    "type": "function",
                    "view": "function core.get_node(pos: vector.Vector)\n  -> { name: string, param1: integer, param2: integer }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    306,
                    22
                ],
                "name": "get_node",
                "rawdesc": " * Returns the node at the given position as table in the same format as `set_node`.\n * This function never returns `nil` and instead returns\n   `{name=\"ignore\", param1=0, param2=0}` for unloaded areas.",
                "start": [
                    306,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                242,
                                26
                            ],
                            "name": "pos",
                            "start": [
                                242,
                                23
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "finish": [
                        242,
                        31
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "{ name: string, param1: integer, param2: integer }"
                        }
                    ],
                    "start": [
                        242,
                        0
                    ],
                    "type": "function",
                    "view": "function core.get_node(pos: vector.Vector)\n  -> { name: string, param1: integer, param2: integer }"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    242,
                    22
                ],
                "name": "get_node",
                "start": [
                    242,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.get_node",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "@*return* — (str : string, ... : string) : string",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                336,
                                39
                            ],
                            "name": "textdomain",
                            "start": [
                                336,
                                29
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "@*return* — (str : string, ... : string) : string",
                    "finish": [
                        336,
                        44
                    ],
                    "returns": [
                        {
                            "desc": "(str : string, ... : string) : string",
                            "rawdesc": "(str : string, ... : string) : string",
                            "type": "function.return",
                            "view": "function"
                        }
                    ],
                    "start": [
                        336,
                        0
                    ],
                    "type": "function",
                    "view": "function core.get_translator(textdomain?: string)\n  -> function"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    336,
                    28
                ],
                "name": "get_translator",
                "start": [
                    336,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "@*return* — (str : string, ... : string) : string",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                266,
                                39
                            ],
                            "name": "textdomain",
                            "start": [
                                266,
                                29
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "@*return* — (str : string, ... : string) : string",
                    "finish": [
                        266,
                        44
                    ],
                    "returns": [
                        {
                            "desc": "(str : string, ... : string) : string",
                            "rawdesc": "(str : string, ... : string) : string",
                            "type": "function.return",
                            "view": "function"
                        }
                    ],
                    "start": [
                        266,
                        0
                    ],
                    "type": "function",
                    "view": "function core.get_translator(textdomain?: string)\n  -> function"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    266,
                    28
                ],
                "name": "get_translator",
                "start": [
                    266,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.get_translator",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * returns true if passed 'y', 'yes', 'true' or a number that isn't zero.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                166,
                                24
                            ],
                            "name": "arg",
                            "start": [
                                166,
                                21
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " * returns true if passed 'y', 'yes', 'true' or a number that isn't zero.",
                    "finish": [
                        166,
                        29
                    ],
                    "rawdesc": " * returns true if passed 'y', 'yes', 'true' or a number that isn't zero.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        166,
                        0
                    ],
                    "type": "function",
                    "view": "function core.is_yes(arg: any)\n  -> boolean"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    166,
                    20
                ],
                "name": "is_yes",
                "rawdesc": " * returns true if passed 'y', 'yes', 'true' or a number that isn't zero.",
                "start": [
                    166,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                165,
                                24
                            ],
                            "name": "arg",
                            "start": [
                                165,
                                21
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        165,
                        29
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        165,
                        0
                    ],
                    "type": "function",
                    "view": "function core.is_yes(arg: any)\n  -> boolean"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    165,
                    20
                ],
                "name": "is_yes",
                "start": [
                    165,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.is_yes",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "```lua\nlevel:\n    | \"none\"\n    | \"verbose\"\n    | \"action\"\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                49,
                                23
                            ],
                            "name": "level",
                            "start": [
                                49,
                                18
                            ],
                            "type": "local",
                            "view": "\"action\"|\"error\"|\"info\"|\"none\"|\"verbose\"...(+1)"
                        },
                        {
                            "finish": [
                                49,
                                28
                            ],
                            "name": "str",
                            "start": [
                                49,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "```lua\nlevel:\n    | \"none\"\n    | \"verbose\"\n    | \"action\"\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n```",
                    "finish": [
                        49,
                        33
                    ],
                    "rawdesc": "```lua\nlevel:\n    | \"none\"\n    | \"verbose\"\n    | \"action\"\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n```",
                    "start": [
                        49,
                        0
                    ],
                    "type": "function",
                    "view": "function core.log(level: \"action\"|\"error\"|\"info\"|\"none\"|\"verbose\"...(+1), str: string)"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    49,
                    17
                ],
                "name": "log",
                "rawdesc": "```lua\nlevel:\n    | \"none\"\n    | \"verbose\"\n    | \"action\"\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n```",
                "start": [
                    49,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.log",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns the string representation of `privs`\n * `delim`: String to delimit privs. Defaults to `\",\"`.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                253,
                                35
                            ],
                            "name": "privs",
                            "start": [
                                253,
                                30
                            ],
                            "type": "local",
                            "view": "{ [string]: boolean }"
                        }
                    ],
                    "desc": " * Returns the string representation of `privs`\n * `delim`: String to delimit privs. Defaults to `\",\"`.",
                    "finish": [
                        253,
                        40
                    ],
                    "rawdesc": " * Returns the string representation of `privs`\n * `delim`: String to delimit privs. Defaults to `\",\"`.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        253,
                        0
                    ],
                    "type": "function",
                    "view": "function core.privs_to_string(privs: { [string]: boolean })\n  -> string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    253,
                    29
                ],
                "name": "privs_to_string",
                "rawdesc": " * Returns the string representation of `privs`\n * `delim`: String to delimit privs. Defaults to `\",\"`.",
                "start": [
                    253,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                204,
                                35
                            ],
                            "name": "privs",
                            "start": [
                                204,
                                30
                            ],
                            "type": "local",
                            "view": "{ [string]: boolean }"
                        }
                    ],
                    "finish": [
                        204,
                        40
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        204,
                        0
                    ],
                    "type": "function",
                    "view": "function core.privs_to_string(privs: { [string]: boolean })\n  -> string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    204,
                    29
                ],
                "name": "privs_to_string",
                "start": [
                    204,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.privs_to_string",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                21,
                                35
                            ],
                            "name": "f",
                            "start": [
                                21,
                                34
                            ],
                            "type": "local",
                            "view": "fun(dtime: number)"
                        }
                    ],
                    "finish": [
                        21,
                        40
                    ],
                    "start": [
                        21,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_globalstep(f: fun(dtime: number))"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    21,
                    33
                ],
                "name": "register_globalstep",
                "start": [
                    21,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.register_globalstep",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " Called when a player joins the game\n last_login: The timestamp of the previous login, or nil if player is new",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                12,
                                38
                            ],
                            "name": "f",
                            "start": [
                                12,
                                37
                            ],
                            "type": "local",
                            "view": "fun(player_ref: core.Player, last_login?: integer)"
                        }
                    ],
                    "desc": " Called when a player joins the game\n last_login: The timestamp of the previous login, or nil if player is new",
                    "finish": [
                        12,
                        43
                    ],
                    "rawdesc": " Called when a player joins the game\n last_login: The timestamp of the previous login, or nil if player is new",
                    "start": [
                        12,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_on_joinplayer(f: fun(player_ref: core.Player, last_login?: integer))"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    12,
                    36
                ],
                "name": "register_on_joinplayer",
                "rawdesc": " Called when a player joins the game\n last_login: The timestamp of the previous login, or nil if player is new",
                "start": [
                    12,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.register_on_joinplayer",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " Called when a player leaves the game\n Does not get executed for connected players on shutdown.\n timed_out: True for timeout, false for other reasons.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                18,
                                39
                            ],
                            "name": "f",
                            "start": [
                                18,
                                38
                            ],
                            "type": "local",
                            "view": "fun(player_ref: core.Player, timed_out: boolean)"
                        }
                    ],
                    "desc": " Called when a player leaves the game\n Does not get executed for connected players on shutdown.\n timed_out: True for timeout, false for other reasons.",
                    "finish": [
                        18,
                        44
                    ],
                    "rawdesc": " Called when a player leaves the game\n Does not get executed for connected players on shutdown.\n timed_out: True for timeout, false for other reasons.",
                    "start": [
                        18,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_on_leaveplayer(f: fun(player_ref: core.Player, timed_out: boolean))"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    18,
                    37
                ],
                "name": "register_on_leaveplayer",
                "rawdesc": " Called when a player leaves the game\n Does not get executed for connected players on shutdown.\n timed_out: True for timeout, false for other reasons.",
                "start": [
                    18,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.register_on_leaveplayer",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                32,
                                39
                            ],
                            "name": "f",
                            "start": [
                                32,
                                38
                            ],
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "finish": [
                        32,
                        44
                    ],
                    "start": [
                        32,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_on_mods_loaded(f: fun())"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    32,
                    37
                ],
                "name": "register_on_mods_loaded",
                "start": [
                    32,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.register_on_mods_loaded",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Called when the server received input from `player`.\n   Specifically, this is called on any of the\n   following events:\n       * a button was pressed,\n       * Enter was pressed while the focus was on a text field\n       * a checkbox was toggled,\n       * something was selected in a dropdown list,\n       * a different tab was selected,\n       * selection was changed in a textlist or table,\n       * an entry was double-clicked in a textlist or table,\n       * a scrollbar was moved, or\n       * the form was actively closed by the player.\n * `formname` is the name passed to `core.show_formspec`.\n   Special case: The empty string refers to the player inventory\n   (the formspec set by the `set_inventory_formspec` player method).\n * Fields are sent for formspec elements which define a field. `fields`\n   is a table containing each formspecs element value (as string), with\n   the `name` parameter as index for each. The value depends on the\n   formspec element type:\n     * `animated_image`: Returns the index of the current frame.\n     * `button` and variants: If pressed, contains the user-facing button\n       text as value. If not pressed, is `nil`\n     * `field`, `textarea` and variants: Text in the field\n     * `dropdown`: Either the index or value, depending on the `index event`\n       dropdown argument.\n     * `tabheader`: Tab index, starting with `\"1\"` (only if tab changed)\n     * `checkbox`: `\"true\"` if checked, `\"false\"` if unchecked\n     * `textlist`: See `core.explode_textlist_event`\n     * `table`: See `core.explode_table_event`\n     * `scrollbar`: See `core.explode_scrollbar_event`\n     * Special case: `[\"quit\"]=\"true\"` is sent when the user actively\n       closed the form by mouse click, keypress or through a button_exit[]\n       element.\n     * Special case: `[\"key_enter\"]=\"true\"` is sent when the user pressed\n       the Enter key and the focus was either nowhere (causing the formspec\n       to be closed) or on a button. If the focus was on a text field,\n       additionally, the index `key_enter_field` contains the name of the\n       text field. See also: `field_close_on_enter`.\n * Newest functions are called first\n * If function returns `true`, remaining functions are not called",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                243,
                                72
                            ],
                            "name": "on_player_receive_fields",
                            "start": [
                                243,
                                48
                            ],
                            "type": "local",
                            "view": "fun(player: core.Player, formname: string, fields: { [string]: string }):boolean?"
                        }
                    ],
                    "desc": " * Called when the server received input from `player`.\n   Specifically, this is called on any of the\n   following events:\n       * a button was pressed,\n       * Enter was pressed while the focus was on a text field\n       * a checkbox was toggled,\n       * something was selected in a dropdown list,\n       * a different tab was selected,\n       * selection was changed in a textlist or table,\n       * an entry was double-clicked in a textlist or table,\n       * a scrollbar was moved, or\n       * the form was actively closed by the player.\n * `formname` is the name passed to `core.show_formspec`.\n   Special case: The empty string refers to the player inventory\n   (the formspec set by the `set_inventory_formspec` player method).\n * Fields are sent for formspec elements which define a field. `fields`\n   is a table containing each formspecs element value (as string), with\n   the `name` parameter as index for each. The value depends on the\n   formspec element type:\n     * `animated_image`: Returns the index of the current frame.\n     * `button` and variants: If pressed, contains the user-facing button\n       text as value. If not pressed, is `nil`\n     * `field`, `textarea` and variants: Text in the field\n     * `dropdown`: Either the index or value, depending on the `index event`\n       dropdown argument.\n     * `tabheader`: Tab index, starting with `\"1\"` (only if tab changed)\n     * `checkbox`: `\"true\"` if checked, `\"false\"` if unchecked\n     * `textlist`: See `core.explode_textlist_event`\n     * `table`: See `core.explode_table_event`\n     * `scrollbar`: See `core.explode_scrollbar_event`\n     * Special case: `[\"quit\"]=\"true\"` is sent when the user actively\n       closed the form by mouse click, keypress or through a button_exit[]\n       element.\n     * Special case: `[\"key_enter\"]=\"true\"` is sent when the user pressed\n       the Enter key and the focus was either nowhere (causing the formspec\n       to be closed) or on a button. If the focus was on a text field,\n       additionally, the index `key_enter_field` contains the name of the\n       text field. See also: `field_close_on_enter`.\n * Newest functions are called first\n * If function returns `true`, remaining functions are not called",
                    "finish": [
                        243,
                        77
                    ],
                    "rawdesc": " * Called when the server received input from `player`.\n   Specifically, this is called on any of the\n   following events:\n       * a button was pressed,\n       * Enter was pressed while the focus was on a text field\n       * a checkbox was toggled,\n       * something was selected in a dropdown list,\n       * a different tab was selected,\n       * selection was changed in a textlist or table,\n       * an entry was double-clicked in a textlist or table,\n       * a scrollbar was moved, or\n       * the form was actively closed by the player.\n * `formname` is the name passed to `core.show_formspec`.\n   Special case: The empty string refers to the player inventory\n   (the formspec set by the `set_inventory_formspec` player method).\n * Fields are sent for formspec elements which define a field. `fields`\n   is a table containing each formspecs element value (as string), with\n   the `name` parameter as index for each. The value depends on the\n   formspec element type:\n     * `animated_image`: Returns the index of the current frame.\n     * `button` and variants: If pressed, contains the user-facing button\n       text as value. If not pressed, is `nil`\n     * `field`, `textarea` and variants: Text in the field\n     * `dropdown`: Either the index or value, depending on the `index event`\n       dropdown argument.\n     * `tabheader`: Tab index, starting with `\"1\"` (only if tab changed)\n     * `checkbox`: `\"true\"` if checked, `\"false\"` if unchecked\n     * `textlist`: See `core.explode_textlist_event`\n     * `table`: See `core.explode_table_event`\n     * `scrollbar`: See `core.explode_scrollbar_event`\n     * Special case: `[\"quit\"]=\"true\"` is sent when the user actively\n       closed the form by mouse click, keypress or through a button_exit[]\n       element.\n     * Special case: `[\"key_enter\"]=\"true\"` is sent when the user pressed\n       the Enter key and the focus was either nowhere (causing the formspec\n       to be closed) or on a button. If the focus was on a text field,\n       additionally, the index `key_enter_field` contains the name of the\n       text field. See also: `field_close_on_enter`.\n * Newest functions are called first\n * If function returns `true`, remaining functions are not called",
                    "start": [
                        243,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_on_player_receive_fields(on_player_receive_fields: fun(player: core.Player, formname: string, fields: { [string]: string }):boolean?)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    243,
                    47
                ],
                "name": "register_on_player_receive_fields",
                "rawdesc": " * Called when the server received input from `player`.\n   Specifically, this is called on any of the\n   following events:\n       * a button was pressed,\n       * Enter was pressed while the focus was on a text field\n       * a checkbox was toggled,\n       * something was selected in a dropdown list,\n       * a different tab was selected,\n       * selection was changed in a textlist or table,\n       * an entry was double-clicked in a textlist or table,\n       * a scrollbar was moved, or\n       * the form was actively closed by the player.\n * `formname` is the name passed to `core.show_formspec`.\n   Special case: The empty string refers to the player inventory\n   (the formspec set by the `set_inventory_formspec` player method).\n * Fields are sent for formspec elements which define a field. `fields`\n   is a table containing each formspecs element value (as string), with\n   the `name` parameter as index for each. The value depends on the\n   formspec element type:\n     * `animated_image`: Returns the index of the current frame.\n     * `button` and variants: If pressed, contains the user-facing button\n       text as value. If not pressed, is `nil`\n     * `field`, `textarea` and variants: Text in the field\n     * `dropdown`: Either the index or value, depending on the `index event`\n       dropdown argument.\n     * `tabheader`: Tab index, starting with `\"1\"` (only if tab changed)\n     * `checkbox`: `\"true\"` if checked, `\"false\"` if unchecked\n     * `textlist`: See `core.explode_textlist_event`\n     * `table`: See `core.explode_table_event`\n     * `scrollbar`: See `core.explode_scrollbar_event`\n     * Special case: `[\"quit\"]=\"true\"` is sent when the user actively\n       closed the form by mouse click, keypress or through a button_exit[]\n       element.\n     * Special case: `[\"key_enter\"]=\"true\"` is sent when the user pressed\n       the Enter key and the focus was either nowhere (causing the formspec\n       to be closed) or on a button. If the focus was on a text field,\n       additionally, the index `key_enter_field` contains the name of the\n       text field. See also: `field_close_on_enter`.\n * Newest functions are called first\n * If function returns `true`, remaining functions are not called",
                "start": [
                    243,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                196,
                                72
                            ],
                            "name": "on_player_receive_fields",
                            "start": [
                                196,
                                48
                            ],
                            "type": "local",
                            "view": "fun(player: core.Player, formname: string, fields: { [string]: string }):boolean?"
                        }
                    ],
                    "finish": [
                        196,
                        77
                    ],
                    "start": [
                        196,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_on_player_receive_fields(on_player_receive_fields: fun(player: core.Player, formname: string, fields: { [string]: string }):boolean?)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    196,
                    47
                ],
                "name": "register_on_player_receive_fields",
                "start": [
                    196,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.register_on_player_receive_fields",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * `definition` can be a description or a definition table (see [Privilege\n   definition]).\n * If it is a description, the priv will be granted to singleplayer and admin\n   by default.\n * To allow players with `basic_privs` to grant, see the `basic_privs`\n   minetest.conf setting.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                197,
                                37
                            ],
                            "name": "name",
                            "start": [
                                197,
                                33
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                197,
                                49
                            ],
                            "name": "definition",
                            "start": [
                                197,
                                39
                            ],
                            "type": "local",
                            "view": "string|core.PrivilegeDef|nil"
                        }
                    ],
                    "desc": " * `definition` can be a description or a definition table (see [Privilege\n   definition]).\n * If it is a description, the priv will be granted to singleplayer and admin\n   by default.\n * To allow players with `basic_privs` to grant, see the `basic_privs`\n   minetest.conf setting.",
                    "finish": [
                        197,
                        54
                    ],
                    "rawdesc": " * `definition` can be a description or a definition table (see [Privilege\n   definition]).\n * If it is a description, the priv will be granted to singleplayer and admin\n   by default.\n * To allow players with `basic_privs` to grant, see the `basic_privs`\n   minetest.conf setting.",
                    "start": [
                        197,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_privilege(name: string, definition: string|core.PrivilegeDef|nil)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    197,
                    32
                ],
                "name": "register_privilege",
                "rawdesc": " * `definition` can be a description or a definition table (see [Privilege\n   definition]).\n * If it is a description, the priv will be granted to singleplayer and admin\n   by default.\n * To allow players with `basic_privs` to grant, see the `basic_privs`\n   minetest.conf setting.",
                "start": [
                    197,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                190,
                                37
                            ],
                            "name": "name",
                            "start": [
                                190,
                                33
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                190,
                                49
                            ],
                            "name": "definition",
                            "start": [
                                190,
                                39
                            ],
                            "type": "local",
                            "view": "string|core.PrivilegeDef|nil"
                        }
                    ],
                    "finish": [
                        190,
                        54
                    ],
                    "start": [
                        190,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_privilege(name: string, definition: string|core.PrivilegeDef|nil)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    190,
                    32
                ],
                "name": "register_privilege",
                "start": [
                    190,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.register_privilege",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                184,
                                32
                            ],
                            "name": "name",
                            "start": [
                                184,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                184,
                                44
                            ],
                            "name": "definition",
                            "start": [
                                184,
                                34
                            ],
                            "type": "local",
                            "view": "core.ItemDef"
                        }
                    ],
                    "finish": [
                        184,
                        49
                    ],
                    "start": [
                        184,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_tool(name: string, definition: core.ItemDef)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    184,
                    27
                ],
                "name": "register_tool",
                "start": [
                    184,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                183,
                                32
                            ],
                            "name": "name",
                            "start": [
                                183,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                183,
                                44
                            ],
                            "name": "definition",
                            "start": [
                                183,
                                34
                            ],
                            "type": "local",
                            "view": "core.ItemDef"
                        }
                    ],
                    "finish": [
                        183,
                        49
                    ],
                    "start": [
                        183,
                        0
                    ],
                    "type": "function",
                    "view": "function core.register_tool(name: string, definition: core.ItemDef)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    183,
                    27
                ],
                "name": "register_tool",
                "start": [
                    183,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.register_tool",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Equivalent to `core.set_node(pos, {name=\"air\"})`, but a bit faster.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                298,
                                29
                            ],
                            "name": "pos",
                            "start": [
                                298,
                                26
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "desc": " * Equivalent to `core.set_node(pos, {name=\"air\"})`, but a bit faster.",
                    "finish": [
                        298,
                        34
                    ],
                    "rawdesc": " * Equivalent to `core.set_node(pos, {name=\"air\"})`, but a bit faster.",
                    "start": [
                        298,
                        0
                    ],
                    "type": "function",
                    "view": "function core.remove_node(pos: vector.Vector)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    298,
                    25
                ],
                "name": "remove_node",
                "rawdesc": " * Equivalent to `core.set_node(pos, {name=\"air\"})`, but a bit faster.",
                "start": [
                    298,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                237,
                                29
                            ],
                            "name": "pos",
                            "start": [
                                237,
                                26
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "finish": [
                        237,
                        34
                    ],
                    "start": [
                        237,
                        0
                    ],
                    "type": "function",
                    "view": "function core.remove_node(pos: vector.Vector)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    237,
                    25
                ],
                "name": "remove_node",
                "start": [
                    237,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.remove_node",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Set node at position `pos`.\n * Any existing metadata is deleted.\n * `node`: table `{name=string, param1=number, param2=number}`\n   If param1 or param2 is omitted, it's set to `0`.\n * e.g. `core.set_node({x=0, y=10, z=0}, {name=\"default:wood\"})`",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                294,
                                26
                            ],
                            "name": "pos",
                            "start": [
                                294,
                                23
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                294,
                                32
                            ],
                            "name": "node",
                            "start": [
                                294,
                                28
                            ],
                            "type": "local",
                            "view": "{ name: string, param1: integer, param2: integer }"
                        }
                    ],
                    "desc": " * Set node at position `pos`.\n * Any existing metadata is deleted.\n * `node`: table `{name=string, param1=number, param2=number}`\n   If param1 or param2 is omitted, it's set to `0`.\n * e.g. `core.set_node({x=0, y=10, z=0}, {name=\"default:wood\"})`",
                    "finish": [
                        294,
                        37
                    ],
                    "rawdesc": " * Set node at position `pos`.\n * Any existing metadata is deleted.\n * `node`: table `{name=string, param1=number, param2=number}`\n   If param1 or param2 is omitted, it's set to `0`.\n * e.g. `core.set_node({x=0, y=10, z=0}, {name=\"default:wood\"})`",
                    "start": [
                        294,
                        0
                    ],
                    "type": "function",
                    "view": "function core.set_node(pos: vector.Vector, node: { name: string, param1: integer, param2: integer })"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    294,
                    22
                ],
                "name": "set_node",
                "rawdesc": " * Set node at position `pos`.\n * Any existing metadata is deleted.\n * `node`: table `{name=string, param1=number, param2=number}`\n   If param1 or param2 is omitted, it's set to `0`.\n * e.g. `core.set_node({x=0, y=10, z=0}, {name=\"default:wood\"})`",
                "start": [
                    294,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                234,
                                26
                            ],
                            "name": "pos",
                            "start": [
                                234,
                                23
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                234,
                                32
                            ],
                            "name": "node",
                            "start": [
                                234,
                                28
                            ],
                            "type": "local",
                            "view": "{ name: string, param1: integer, param2: integer }"
                        }
                    ],
                    "finish": [
                        234,
                        37
                    ],
                    "start": [
                        234,
                        0
                    ],
                    "type": "function",
                    "view": "function core.set_node(pos: vector.Vector, node: { name: string, param1: integer, param2: integer })"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    234,
                    22
                ],
                "name": "set_node",
                "start": [
                    234,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.set_node",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                35,
                                31
                            ],
                            "name": "val",
                            "start": [
                                35,
                                28
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "finish": [
                        35,
                        36
                    ],
                    "start": [
                        35,
                        0
                    ],
                    "type": "function",
                    "view": "function core.set_timeofday(val: number)"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    35,
                    27
                ],
                "name": "set_timeofday",
                "start": [
                    35,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.set_timeofday",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * `playername`: name of player to show formspec\n * `formname`: name passed to `on_player_receive_fields` callbacks.\n   It should follow the `\"modname:<whatever>\"` naming convention.\n * `formname` must not be empty, unless you want to reshow\n   the inventory formspec without updating it for future opens.\n * `formspec`: formspec to display",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                320,
                                38
                            ],
                            "name": "playername",
                            "start": [
                                320,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                320,
                                48
                            ],
                            "name": "formname",
                            "start": [
                                320,
                                40
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                320,
                                58
                            ],
                            "name": "formspec",
                            "start": [
                                320,
                                50
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " * `playername`: name of player to show formspec\n * `formname`: name passed to `on_player_receive_fields` callbacks.\n   It should follow the `\"modname:<whatever>\"` naming convention.\n * `formname` must not be empty, unless you want to reshow\n   the inventory formspec without updating it for future opens.\n * `formspec`: formspec to display",
                    "finish": [
                        320,
                        63
                    ],
                    "rawdesc": " * `playername`: name of player to show formspec\n * `formname`: name passed to `on_player_receive_fields` callbacks.\n   It should follow the `\"modname:<whatever>\"` naming convention.\n * `formname` must not be empty, unless you want to reshow\n   the inventory formspec without updating it for future opens.\n * `formspec`: formspec to display",
                    "start": [
                        320,
                        0
                    ],
                    "type": "function",
                    "view": "function core.show_formspec(playername: string, formname: string, formspec: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    320,
                    27
                ],
                "name": "show_formspec",
                "rawdesc": " * `playername`: name of player to show formspec\n * `formname`: name passed to `on_player_receive_fields` callbacks.\n   It should follow the `\"modname:<whatever>\"` naming convention.\n * `formname` must not be empty, unless you want to reshow\n   the inventory formspec without updating it for future opens.\n * `formspec`: formspec to display",
                "start": [
                    320,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                250,
                                38
                            ],
                            "name": "playername",
                            "start": [
                                250,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                250,
                                48
                            ],
                            "name": "formname",
                            "start": [
                                250,
                                40
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                250,
                                58
                            ],
                            "name": "formspec",
                            "start": [
                                250,
                                50
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        250,
                        63
                    ],
                    "start": [
                        250,
                        0
                    ],
                    "type": "function",
                    "view": "function core.show_formspec(playername: string, formname: string, formspec: string)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    250,
                    27
                ],
                "name": "show_formspec",
                "start": [
                    250,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.show_formspec",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                343,
                                34
                            ],
                            "name": "textdomain",
                            "start": [
                                343,
                                24
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                343,
                                39
                            ],
                            "name": "str",
                            "start": [
                                343,
                                36
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                343,
                                44
                            ],
                            "start": [
                                343,
                                41
                            ],
                            "type": "...",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        343,
                        49
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        343,
                        0
                    ],
                    "type": "function",
                    "view": "function core.translate(textdomain: string, str: string, ...string)\n  -> string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    343,
                    23
                ],
                "name": "translate",
                "start": [
                    343,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                273,
                                34
                            ],
                            "name": "textdomain",
                            "start": [
                                273,
                                24
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                273,
                                39
                            ],
                            "name": "str",
                            "start": [
                                273,
                                36
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                273,
                                44
                            ],
                            "start": [
                                273,
                                41
                            ],
                            "type": "...",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        273,
                        49
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        273,
                        0
                    ],
                    "type": "function",
                    "view": "function core.translate(textdomain: string, str: string, ...string)\n  -> string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    273,
                    23
                ],
                "name": "translate",
                "start": [
                    273,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "core.translate",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
                    "finish": [
                        8,
                        14
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
                    "start": [
                        8,
                        12
                    ],
                    "type": "table",
                    "view": "coroutinelib"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/coroutine.lua",
                "finish": [
                    8,
                    9
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
                "start": [
                    8,
                    0
                ],
                "type": "setglobal",
                "view": "coroutinelib",
                "visible": "public"
            }
        ],
        "name": "coroutine",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                39,
                                27
                            ],
                            "name": "co",
                            "start": [
                                39,
                                25
                            ],
                            "type": "local",
                            "view": "thread"
                        }
                    ],
                    "desc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                    "finish": [
                        39,
                        32
                    ],
                    "rawdesc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                    "returns": [
                        {
                            "name": "noerror",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errorobject",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        39,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.close(co: thread)\n  -> noerror: boolean\n  2. errorobject: any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/coroutine.lua",
                "finish": [
                    39,
                    24
                ],
                "name": "close",
                "rawdesc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                "start": [
                    39,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "coroutine.close",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                18,
                                27
                            ],
                            "name": "f",
                            "start": [
                                18,
                                26
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "desc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                    "finish": [
                        18,
                        32
                    ],
                    "rawdesc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "thread"
                        }
                    ],
                    "start": [
                        18,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.create(f: fun(...any):...unknown)\n  -> thread"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/coroutine.lua",
                "finish": [
                    18,
                    25
                ],
                "name": "create",
                "rawdesc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                "start": [
                    18,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "coroutine.create",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns true when the running coroutine can yield.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                "extends": {
                    "args": [],
                    "desc": "\nReturns true when the running coroutine can yield.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                    "finish": [
                        28,
                        36
                    ],
                    "rawdesc": "\nReturns true when the running coroutine can yield.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        28,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.isyieldable()\n  -> boolean"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/coroutine.lua",
                "finish": [
                    28,
                    30
                ],
                "name": "isyieldable",
                "rawdesc": "\nReturns true when the running coroutine can yield.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                "start": [
                    28,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "coroutine.isyieldable",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                50,
                                28
                            ],
                            "name": "co",
                            "start": [
                                50,
                                26
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                50,
                                34
                            ],
                            "name": "val1",
                            "start": [
                                50,
                                30
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                50,
                                39
                            ],
                            "start": [
                                50,
                                36
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                    "finish": [
                        50,
                        44
                    ],
                    "rawdesc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                    "returns": [
                        {
                            "name": "success",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        50,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.resume(co: thread, val1?: any, ...any)\n  -> success: boolean\n  2. ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/coroutine.lua",
                "finish": [
                    50,
                    25
                ],
                "name": "resume",
                "rawdesc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                "start": [
                    50,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "coroutine.resume",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                "extends": {
                    "args": [],
                    "desc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                    "finish": [
                        60,
                        32
                    ],
                    "rawdesc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                    "returns": [
                        {
                            "name": "running",
                            "type": "function.return",
                            "view": "thread"
                        },
                        {
                            "name": "ismain",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        60,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.running()\n  -> running: thread\n  2. ismain: boolean"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/coroutine.lua",
                "finish": [
                    60,
                    26
                ],
                "name": "running",
                "rawdesc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                "start": [
                    60,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "coroutine.running",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                74,
                                28
                            ],
                            "name": "co",
                            "start": [
                                74,
                                26
                            ],
                            "type": "local",
                            "view": "thread"
                        }
                    ],
                    "desc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                    "finish": [
                        74,
                        33
                    ],
                    "rawdesc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"dead\"|\"normal\"|\"running\"|\"suspended\""
                        }
                    ],
                    "start": [
                        74,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.status(co: thread)\n  -> \"dead\"|\"normal\"|\"running\"|\"suspended\""
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/coroutine.lua",
                "finish": [
                    74,
                    25
                ],
                "name": "status",
                "rawdesc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                "start": [
                    74,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "coroutine.status",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                84,
                                25
                            ],
                            "name": "f",
                            "start": [
                                84,
                                24
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "desc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                    "finish": [
                        84,
                        30
                    ],
                    "rawdesc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "start": [
                        84,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.wrap(f: fun(...any):...unknown)\n  -> fun(...any):...unknown"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/coroutine.lua",
                "finish": [
                    84,
                    23
                ],
                "name": "wrap",
                "rawdesc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                "start": [
                    84,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "coroutine.wrap",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": true,
                "deprecated": false,
                "desc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                93,
                                28
                            ],
                            "start": [
                                93,
                                25
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                    "finish": [
                        93,
                        33
                    ],
                    "rawdesc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        93,
                        0
                    ],
                    "type": "function",
                    "view": "(async) function coroutine.yield(...any)\n  -> ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/coroutine.lua",
                "finish": [
                    93,
                    24
                ],
                "name": "yield",
                "rawdesc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                "start": [
                    93,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "coroutine.yield",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/coroutine.lua",
                "finish": [
                    7,
                    22
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "coroutinelib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                39,
                                27
                            ],
                            "name": "co",
                            "start": [
                                39,
                                25
                            ],
                            "type": "local",
                            "view": "thread"
                        }
                    ],
                    "desc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                    "finish": [
                        39,
                        32
                    ],
                    "rawdesc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                    "returns": [
                        {
                            "name": "noerror",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errorobject",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        39,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.close(co: thread)\n  -> noerror: boolean\n  2. errorobject: any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/coroutine.lua",
                "finish": [
                    39,
                    24
                ],
                "name": "close",
                "rawdesc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                "start": [
                    39,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                18,
                                27
                            ],
                            "name": "f",
                            "start": [
                                18,
                                26
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "desc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                    "finish": [
                        18,
                        32
                    ],
                    "rawdesc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "thread"
                        }
                    ],
                    "start": [
                        18,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.create(f: fun(...any):...unknown)\n  -> thread"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/coroutine.lua",
                "finish": [
                    18,
                    25
                ],
                "name": "create",
                "rawdesc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                "start": [
                    18,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns true when the running coroutine can yield.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                "extends": {
                    "args": [],
                    "desc": "\nReturns true when the running coroutine can yield.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                    "finish": [
                        28,
                        36
                    ],
                    "rawdesc": "\nReturns true when the running coroutine can yield.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        28,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.isyieldable()\n  -> boolean"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/coroutine.lua",
                "finish": [
                    28,
                    30
                ],
                "name": "isyieldable",
                "rawdesc": "\nReturns true when the running coroutine can yield.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                "start": [
                    28,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                50,
                                28
                            ],
                            "name": "co",
                            "start": [
                                50,
                                26
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                50,
                                34
                            ],
                            "name": "val1",
                            "start": [
                                50,
                                30
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                50,
                                39
                            ],
                            "start": [
                                50,
                                36
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                    "finish": [
                        50,
                        44
                    ],
                    "rawdesc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                    "returns": [
                        {
                            "name": "success",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        50,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.resume(co: thread, val1?: any, ...any)\n  -> success: boolean\n  2. ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/coroutine.lua",
                "finish": [
                    50,
                    25
                ],
                "name": "resume",
                "rawdesc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                "start": [
                    50,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                "extends": {
                    "args": [],
                    "desc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                    "finish": [
                        60,
                        32
                    ],
                    "rawdesc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                    "returns": [
                        {
                            "name": "running",
                            "type": "function.return",
                            "view": "thread"
                        },
                        {
                            "name": "ismain",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        60,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.running()\n  -> running: thread\n  2. ismain: boolean"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/coroutine.lua",
                "finish": [
                    60,
                    26
                ],
                "name": "running",
                "rawdesc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                "start": [
                    60,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                74,
                                28
                            ],
                            "name": "co",
                            "start": [
                                74,
                                26
                            ],
                            "type": "local",
                            "view": "thread"
                        }
                    ],
                    "desc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                    "finish": [
                        74,
                        33
                    ],
                    "rawdesc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"dead\"|\"normal\"|\"running\"|\"suspended\""
                        }
                    ],
                    "start": [
                        74,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.status(co: thread)\n  -> \"dead\"|\"normal\"|\"running\"|\"suspended\""
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/coroutine.lua",
                "finish": [
                    74,
                    25
                ],
                "name": "status",
                "rawdesc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                "start": [
                    74,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                84,
                                25
                            ],
                            "name": "f",
                            "start": [
                                84,
                                24
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "desc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                    "finish": [
                        84,
                        30
                    ],
                    "rawdesc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "start": [
                        84,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.wrap(f: fun(...any):...unknown)\n  -> fun(...any):...unknown"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/coroutine.lua",
                "finish": [
                    84,
                    23
                ],
                "name": "wrap",
                "rawdesc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                "start": [
                    84,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": true,
                "deprecated": false,
                "desc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                93,
                                28
                            ],
                            "start": [
                                93,
                                25
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                    "finish": [
                        93,
                        33
                    ],
                    "rawdesc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        93,
                        0
                    ],
                    "type": "function",
                    "view": "(async) function coroutine.yield(...any)\n  -> ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/coroutine.lua",
                "finish": [
                    93,
                    24
                ],
                "name": "yield",
                "rawdesc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                "start": [
                    93,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "coroutinelib",
        "type": "type",
        "view": "coroutinelib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
                    "finish": [
                        8,
                        10
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
                    "start": [
                        8,
                        8
                    ],
                    "type": "table",
                    "view": "debuglib"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    8,
                    5
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
                "start": [
                    8,
                    0
                ],
                "type": "setglobal",
                "view": "debuglib",
                "visible": "public"
            }
        ],
        "name": "debug",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                "extends": {
                    "args": [],
                    "desc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                    "finish": [
                        31,
                        26
                    ],
                    "rawdesc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                    "start": [
                        31,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.debug()"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    31,
                    20
                ],
                "name": "debug",
                "rawdesc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                "start": [
                    31,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.debug",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                42,
                                24
                            ],
                            "name": "o",
                            "start": [
                                42,
                                23
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                    "finish": [
                        42,
                        29
                    ],
                    "rawdesc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        42,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getfenv(o: any)\n  -> table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    42,
                    22
                ],
                "name": "getfenv",
                "rawdesc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                "start": [
                    42,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.getfenv",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                54,
                                25
                            ],
                            "name": "co",
                            "start": [
                                54,
                                23
                            ],
                            "type": "local",
                            "view": "thread?"
                        }
                    ],
                    "desc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                    "finish": [
                        54,
                        30
                    ],
                    "rawdesc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                    "returns": [
                        {
                            "name": "hook",
                            "type": "function.return",
                            "view": "function"
                        },
                        {
                            "name": "mask",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "count",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        54,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.gethook(co?: thread)\n  -> hook: function\n  2. mask: string\n  3. count: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    54,
                    22
                ],
                "name": "gethook",
                "rawdesc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                "start": [
                    54,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.gethook",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"L\" -- `activelines`\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                76,
                                29
                            ],
                            "name": "thread",
                            "start": [
                                76,
                                23
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                76,
                                32
                            ],
                            "name": "f",
                            "start": [
                                76,
                                31
                            ],
                            "type": "local",
                            "view": "integer|fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                76,
                                38
                            ],
                            "name": "what",
                            "start": [
                                76,
                                34
                            ],
                            "type": "local",
                            "view": "(string|\"L\"|\"S\"|\"f\"|\"l\"...(+3))?"
                        }
                    ],
                    "desc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"L\" -- `activelines`\n```",
                    "finish": [
                        76,
                        43
                    ],
                    "rawdesc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"L\" -- `activelines`\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "debuginfo"
                        }
                    ],
                    "start": [
                        76,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getinfo(thread: thread, f: integer|fun(...any):...unknown, what?: string|\"L\"|\"S\"|\"f\"|\"l\"...(+3))\n  -> debuginfo"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    76,
                    22
                ],
                "name": "getinfo",
                "rawdesc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"L\" -- `activelines`\n```",
                "start": [
                    76,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.getinfo",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                90,
                                30
                            ],
                            "name": "thread",
                            "start": [
                                90,
                                24
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                90,
                                33
                            ],
                            "name": "f",
                            "start": [
                                90,
                                32
                            ],
                            "type": "local",
                            "view": "integer|fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                90,
                                40
                            ],
                            "name": "index",
                            "start": [
                                90,
                                35
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                    "finish": [
                        90,
                        45
                    ],
                    "rawdesc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        90,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getlocal(thread: thread, f: integer|fun(...any):...unknown, index: integer)\n  -> name: string\n  2. value: any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    90,
                    23
                ],
                "name": "getlocal",
                "rawdesc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                "start": [
                    90,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.getlocal",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                100,
                                34
                            ],
                            "name": "object",
                            "start": [
                                100,
                                28
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                    "finish": [
                        100,
                        39
                    ],
                    "rawdesc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                    "returns": [
                        {
                            "name": "metatable",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        100,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getmetatable(object: any)\n  -> metatable: table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    100,
                    27
                ],
                "name": "getmetatable",
                "rawdesc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                "start": [
                    100,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.getmetatable",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                "extends": {
                    "args": [],
                    "desc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                    "finish": [
                        109,
                        32
                    ],
                    "rawdesc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        109,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getregistry()\n  -> table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    109,
                    26
                ],
                "name": "getregistry",
                "rawdesc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                "start": [
                    109,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.getregistry",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                121,
                                27
                            ],
                            "name": "f",
                            "start": [
                                121,
                                26
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                121,
                                31
                            ],
                            "name": "up",
                            "start": [
                                121,
                                29
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                    "finish": [
                        121,
                        36
                    ],
                    "rawdesc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        121,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getupvalue(f: fun(...any):...unknown, up: integer)\n  -> name: string\n  2. value: any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    121,
                    25
                ],
                "name": "getupvalue",
                "rawdesc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                "start": [
                    121,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.getupvalue",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the Lua value associated to u.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                131,
                                29
                            ],
                            "name": "u",
                            "start": [
                                131,
                                28
                            ],
                            "type": "local",
                            "view": "userdata"
                        }
                    ],
                    "desc": "\nReturns the Lua value associated to u.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                    "finish": [
                        131,
                        34
                    ],
                    "rawdesc": "\nReturns the Lua value associated to u.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        131,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getuservalue(u: userdata)\n  -> any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    131,
                    27
                ],
                "name": "getuservalue",
                "rawdesc": "\nReturns the Lua value associated to u.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                "start": [
                    131,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.getuservalue",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                146,
                                35
                            ],
                            "name": "limit",
                            "start": [
                                146,
                                30
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                    "finish": [
                        146,
                        40
                    ],
                    "rawdesc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean|integer"
                        }
                    ],
                    "start": [
                        146,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setcstacklimit(limit: integer)\n  -> boolean|integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    146,
                    29
                ],
                "name": "setcstacklimit",
                "rawdesc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                "start": [
                    146,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.setcstacklimit",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                158,
                                29
                            ],
                            "name": "object",
                            "start": [
                                158,
                                23
                            ],
                            "type": "local",
                            "view": "<T>"
                        },
                        {
                            "finish": [
                                158,
                                34
                            ],
                            "name": "env",
                            "start": [
                                158,
                                31
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                    "finish": [
                        158,
                        39
                    ],
                    "rawdesc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                    "returns": [
                        {
                            "name": "object",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": [
                        158,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setfenv(object: <T>, env: table)\n  -> object: <T>"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    158,
                    22
                ],
                "name": "setfenv",
                "rawdesc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                "start": [
                    158,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.setfenv",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                177,
                                29
                            ],
                            "name": "thread",
                            "start": [
                                177,
                                23
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                177,
                                35
                            ],
                            "name": "hook",
                            "start": [
                                177,
                                31
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                177,
                                41
                            ],
                            "name": "mask",
                            "start": [
                                177,
                                37
                            ],
                            "type": "local",
                            "view": "string|\"c\"|\"l\"|\"r\""
                        },
                        {
                            "finish": [
                                177,
                                48
                            ],
                            "name": "count",
                            "start": [
                                177,
                                43
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                    "finish": [
                        177,
                        53
                    ],
                    "rawdesc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                    "start": [
                        177,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.sethook(thread: thread, hook: fun(...any):...unknown, mask: string|\"c\"|\"l\"|\"r\", count?: integer)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    177,
                    22
                ],
                "name": "sethook",
                "rawdesc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                "start": [
                    177,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.sethook",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                190,
                                30
                            ],
                            "name": "thread",
                            "start": [
                                190,
                                24
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                190,
                                37
                            ],
                            "name": "level",
                            "start": [
                                190,
                                32
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                190,
                                44
                            ],
                            "name": "index",
                            "start": [
                                190,
                                39
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                190,
                                51
                            ],
                            "name": "value",
                            "start": [
                                190,
                                46
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                    "finish": [
                        190,
                        56
                    ],
                    "rawdesc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        190,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setlocal(thread: thread, level: integer, index: integer, value: any)\n  -> name: string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    190,
                    23
                ],
                "name": "setlocal",
                "rawdesc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                "start": [
                    190,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.setlocal",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                201,
                                33
                            ],
                            "name": "value",
                            "start": [
                                201,
                                28
                            ],
                            "type": "local",
                            "view": "<T>"
                        },
                        {
                            "finish": [
                                201,
                                39
                            ],
                            "name": "meta",
                            "start": [
                                201,
                                35
                            ],
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                    "finish": [
                        201,
                        44
                    ],
                    "rawdesc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                    "returns": [
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": [
                        201,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setmetatable(value: <T>, meta?: table)\n  -> value: <T>"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    201,
                    27
                ],
                "name": "setmetatable",
                "rawdesc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                "start": [
                    201,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.setmetatable",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                212,
                                27
                            ],
                            "name": "f",
                            "start": [
                                212,
                                26
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                212,
                                31
                            ],
                            "name": "up",
                            "start": [
                                212,
                                29
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                212,
                                38
                            ],
                            "name": "value",
                            "start": [
                                212,
                                33
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                    "finish": [
                        212,
                        43
                    ],
                    "rawdesc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        212,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setupvalue(f: fun(...any):...unknown, up: integer, value: any)\n  -> name: string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    212,
                    25
                ],
                "name": "setupvalue",
                "rawdesc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                "start": [
                    212,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.setupvalue",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the given value as the Lua value associated to the given udata.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                222,
                                33
                            ],
                            "name": "udata",
                            "start": [
                                222,
                                28
                            ],
                            "type": "local",
                            "view": "userdata"
                        },
                        {
                            "finish": [
                                222,
                                40
                            ],
                            "name": "value",
                            "start": [
                                222,
                                35
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nSets the given value as the Lua value associated to the given udata.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                    "finish": [
                        222,
                        45
                    ],
                    "rawdesc": "\nSets the given value as the Lua value associated to the given udata.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                    "returns": [
                        {
                            "name": "udata",
                            "type": "function.return",
                            "view": "userdata"
                        }
                    ],
                    "start": [
                        222,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setuservalue(udata: userdata, value: any)\n  -> udata: userdata"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    222,
                    27
                ],
                "name": "setuservalue",
                "rawdesc": "\nSets the given value as the Lua value associated to the given udata.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                "start": [
                    222,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.setuservalue",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                235,
                                31
                            ],
                            "name": "thread",
                            "start": [
                                235,
                                25
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                235,
                                40
                            ],
                            "name": "message",
                            "start": [
                                235,
                                33
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                235,
                                47
                            ],
                            "name": "level",
                            "start": [
                                235,
                                42
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                    "finish": [
                        235,
                        52
                    ],
                    "rawdesc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                    "returns": [
                        {
                            "name": "message",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        235,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.traceback(thread: thread, message?: any, level?: integer)\n  -> message: string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    235,
                    24
                ],
                "name": "traceback",
                "rawdesc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                "start": [
                    235,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.traceback",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                247,
                                26
                            ],
                            "name": "f",
                            "start": [
                                247,
                                25
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                247,
                                29
                            ],
                            "name": "n",
                            "start": [
                                247,
                                28
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                    "finish": [
                        247,
                        34
                    ],
                    "rawdesc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                    "returns": [
                        {
                            "name": "id",
                            "type": "function.return",
                            "view": "lightuserdata"
                        }
                    ],
                    "start": [
                        247,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.upvalueid(f: fun(...any):...unknown, n: integer)\n  -> id: lightuserdata"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    247,
                    24
                ],
                "name": "upvalueid",
                "rawdesc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                "start": [
                    247,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.upvalueid",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                259,
                                29
                            ],
                            "name": "f1",
                            "start": [
                                259,
                                27
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                259,
                                33
                            ],
                            "name": "n1",
                            "start": [
                                259,
                                31
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                259,
                                37
                            ],
                            "name": "f2",
                            "start": [
                                259,
                                35
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                259,
                                41
                            ],
                            "name": "n2",
                            "start": [
                                259,
                                39
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                    "finish": [
                        259,
                        46
                    ],
                    "rawdesc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                    "start": [
                        259,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.upvaluejoin(f1: fun(...any):...unknown, n1: integer, f2: fun(...any):...unknown, n2: integer)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    259,
                    26
                ],
                "name": "upvaluejoin",
                "rawdesc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                "start": [
                    259,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.upvaluejoin",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    10,
                    19
                ],
                "start": [
                    10,
                    10
                ],
                "type": "doc.class",
                "view": "debuginfo",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        24,
                        31
                    ],
                    "start": [
                        24,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                24,
                                31
                            ],
                            "start": [
                                24,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "table"
                        }
                    ],
                    "view": "table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    24,
                    31
                ],
                "name": "activelines",
                "start": [
                    24,
                    10
                ],
                "type": "doc.field",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        18,
                        33
                    ],
                    "start": [
                        18,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                18,
                                33
                            ],
                            "start": [
                                18,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    18,
                    33
                ],
                "name": "currentline",
                "start": [
                    18,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        23,
                        34
                    ],
                    "start": [
                        23,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                23,
                                34
                            ],
                            "start": [
                                23,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "function"
                        }
                    ],
                    "view": "function"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    23,
                    34
                ],
                "name": "func",
                "start": [
                    23,
                    10
                ],
                "type": "doc.field",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        19,
                        33
                    ],
                    "start": [
                        19,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                19,
                                33
                            ],
                            "start": [
                                19,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    19,
                    33
                ],
                "name": "istailcall",
                "start": [
                    19,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        22,
                        33
                    ],
                    "start": [
                        22,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                22,
                                33
                            ],
                            "start": [
                                22,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    22,
                    33
                ],
                "name": "isvararg",
                "start": [
                    22,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        16,
                        33
                    ],
                    "start": [
                        16,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                16,
                                33
                            ],
                            "start": [
                                16,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    16,
                    33
                ],
                "name": "lastlinedefined",
                "start": [
                    16,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        15,
                        33
                    ],
                    "start": [
                        15,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                15,
                                33
                            ],
                            "start": [
                                15,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    15,
                    33
                ],
                "name": "linedefined",
                "start": [
                    15,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        11,
                        32
                    ],
                    "start": [
                        11,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                11,
                                32
                            ],
                            "start": [
                                11,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    11,
                    32
                ],
                "name": "name",
                "start": [
                    11,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        12,
                        32
                    ],
                    "start": [
                        12,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                12,
                                32
                            ],
                            "start": [
                                12,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    12,
                    32
                ],
                "name": "namewhat",
                "start": [
                    12,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        21,
                        33
                    ],
                    "start": [
                        21,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                21,
                                33
                            ],
                            "start": [
                                21,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    21,
                    33
                ],
                "name": "nparams",
                "start": [
                    21,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        20,
                        33
                    ],
                    "start": [
                        20,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                20,
                                33
                            ],
                            "start": [
                                20,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    20,
                    33
                ],
                "name": "nups",
                "start": [
                    20,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        14,
                        32
                    ],
                    "start": [
                        14,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                14,
                                32
                            ],
                            "start": [
                                14,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    14,
                    32
                ],
                "name": "short_src",
                "start": [
                    14,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        13,
                        32
                    ],
                    "start": [
                        13,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                13,
                                32
                            ],
                            "start": [
                                13,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    13,
                    32
                ],
                "name": "source",
                "start": [
                    13,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        17,
                        32
                    ],
                    "start": [
                        17,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                17,
                                32
                            ],
                            "start": [
                                17,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    17,
                    32
                ],
                "name": "what",
                "start": [
                    17,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "debuginfo",
        "type": "type",
        "view": "debuginfo"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    7,
                    18
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "debuglib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                "extends": {
                    "args": [],
                    "desc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                    "finish": [
                        31,
                        26
                    ],
                    "rawdesc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                    "start": [
                        31,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.debug()"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    31,
                    20
                ],
                "name": "debug",
                "rawdesc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                "start": [
                    31,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                42,
                                24
                            ],
                            "name": "o",
                            "start": [
                                42,
                                23
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                    "finish": [
                        42,
                        29
                    ],
                    "rawdesc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        42,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getfenv(o: any)\n  -> table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    42,
                    22
                ],
                "name": "getfenv",
                "rawdesc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                "start": [
                    42,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                54,
                                25
                            ],
                            "name": "co",
                            "start": [
                                54,
                                23
                            ],
                            "type": "local",
                            "view": "thread?"
                        }
                    ],
                    "desc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                    "finish": [
                        54,
                        30
                    ],
                    "rawdesc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                    "returns": [
                        {
                            "name": "hook",
                            "type": "function.return",
                            "view": "function"
                        },
                        {
                            "name": "mask",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "count",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        54,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.gethook(co?: thread)\n  -> hook: function\n  2. mask: string\n  3. count: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    54,
                    22
                ],
                "name": "gethook",
                "rawdesc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                "start": [
                    54,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"L\" -- `activelines`\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                76,
                                29
                            ],
                            "name": "thread",
                            "start": [
                                76,
                                23
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                76,
                                32
                            ],
                            "name": "f",
                            "start": [
                                76,
                                31
                            ],
                            "type": "local",
                            "view": "integer|fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                76,
                                38
                            ],
                            "name": "what",
                            "start": [
                                76,
                                34
                            ],
                            "type": "local",
                            "view": "(string|\"L\"|\"S\"|\"f\"|\"l\"...(+3))?"
                        }
                    ],
                    "desc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"L\" -- `activelines`\n```",
                    "finish": [
                        76,
                        43
                    ],
                    "rawdesc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"L\" -- `activelines`\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "debuginfo"
                        }
                    ],
                    "start": [
                        76,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getinfo(thread: thread, f: integer|fun(...any):...unknown, what?: string|\"L\"|\"S\"|\"f\"|\"l\"...(+3))\n  -> debuginfo"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    76,
                    22
                ],
                "name": "getinfo",
                "rawdesc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"L\" -- `activelines`\n```",
                "start": [
                    76,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                90,
                                30
                            ],
                            "name": "thread",
                            "start": [
                                90,
                                24
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                90,
                                33
                            ],
                            "name": "f",
                            "start": [
                                90,
                                32
                            ],
                            "type": "local",
                            "view": "integer|fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                90,
                                40
                            ],
                            "name": "index",
                            "start": [
                                90,
                                35
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                    "finish": [
                        90,
                        45
                    ],
                    "rawdesc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        90,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getlocal(thread: thread, f: integer|fun(...any):...unknown, index: integer)\n  -> name: string\n  2. value: any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    90,
                    23
                ],
                "name": "getlocal",
                "rawdesc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                "start": [
                    90,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                100,
                                34
                            ],
                            "name": "object",
                            "start": [
                                100,
                                28
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                    "finish": [
                        100,
                        39
                    ],
                    "rawdesc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                    "returns": [
                        {
                            "name": "metatable",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        100,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getmetatable(object: any)\n  -> metatable: table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    100,
                    27
                ],
                "name": "getmetatable",
                "rawdesc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                "start": [
                    100,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                "extends": {
                    "args": [],
                    "desc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                    "finish": [
                        109,
                        32
                    ],
                    "rawdesc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        109,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getregistry()\n  -> table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    109,
                    26
                ],
                "name": "getregistry",
                "rawdesc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                "start": [
                    109,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                121,
                                27
                            ],
                            "name": "f",
                            "start": [
                                121,
                                26
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                121,
                                31
                            ],
                            "name": "up",
                            "start": [
                                121,
                                29
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                    "finish": [
                        121,
                        36
                    ],
                    "rawdesc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        121,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getupvalue(f: fun(...any):...unknown, up: integer)\n  -> name: string\n  2. value: any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    121,
                    25
                ],
                "name": "getupvalue",
                "rawdesc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                "start": [
                    121,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the Lua value associated to u.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                131,
                                29
                            ],
                            "name": "u",
                            "start": [
                                131,
                                28
                            ],
                            "type": "local",
                            "view": "userdata"
                        }
                    ],
                    "desc": "\nReturns the Lua value associated to u.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                    "finish": [
                        131,
                        34
                    ],
                    "rawdesc": "\nReturns the Lua value associated to u.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        131,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getuservalue(u: userdata)\n  -> any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    131,
                    27
                ],
                "name": "getuservalue",
                "rawdesc": "\nReturns the Lua value associated to u.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                "start": [
                    131,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                146,
                                35
                            ],
                            "name": "limit",
                            "start": [
                                146,
                                30
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                    "finish": [
                        146,
                        40
                    ],
                    "rawdesc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean|integer"
                        }
                    ],
                    "start": [
                        146,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setcstacklimit(limit: integer)\n  -> boolean|integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    146,
                    29
                ],
                "name": "setcstacklimit",
                "rawdesc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                "start": [
                    146,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                158,
                                29
                            ],
                            "name": "object",
                            "start": [
                                158,
                                23
                            ],
                            "type": "local",
                            "view": "<T>"
                        },
                        {
                            "finish": [
                                158,
                                34
                            ],
                            "name": "env",
                            "start": [
                                158,
                                31
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                    "finish": [
                        158,
                        39
                    ],
                    "rawdesc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                    "returns": [
                        {
                            "name": "object",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": [
                        158,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setfenv(object: <T>, env: table)\n  -> object: <T>"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    158,
                    22
                ],
                "name": "setfenv",
                "rawdesc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                "start": [
                    158,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                177,
                                29
                            ],
                            "name": "thread",
                            "start": [
                                177,
                                23
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                177,
                                35
                            ],
                            "name": "hook",
                            "start": [
                                177,
                                31
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                177,
                                41
                            ],
                            "name": "mask",
                            "start": [
                                177,
                                37
                            ],
                            "type": "local",
                            "view": "string|\"c\"|\"l\"|\"r\""
                        },
                        {
                            "finish": [
                                177,
                                48
                            ],
                            "name": "count",
                            "start": [
                                177,
                                43
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                    "finish": [
                        177,
                        53
                    ],
                    "rawdesc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                    "start": [
                        177,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.sethook(thread: thread, hook: fun(...any):...unknown, mask: string|\"c\"|\"l\"|\"r\", count?: integer)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    177,
                    22
                ],
                "name": "sethook",
                "rawdesc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                "start": [
                    177,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                190,
                                30
                            ],
                            "name": "thread",
                            "start": [
                                190,
                                24
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                190,
                                37
                            ],
                            "name": "level",
                            "start": [
                                190,
                                32
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                190,
                                44
                            ],
                            "name": "index",
                            "start": [
                                190,
                                39
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                190,
                                51
                            ],
                            "name": "value",
                            "start": [
                                190,
                                46
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                    "finish": [
                        190,
                        56
                    ],
                    "rawdesc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        190,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setlocal(thread: thread, level: integer, index: integer, value: any)\n  -> name: string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    190,
                    23
                ],
                "name": "setlocal",
                "rawdesc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                "start": [
                    190,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                201,
                                33
                            ],
                            "name": "value",
                            "start": [
                                201,
                                28
                            ],
                            "type": "local",
                            "view": "<T>"
                        },
                        {
                            "finish": [
                                201,
                                39
                            ],
                            "name": "meta",
                            "start": [
                                201,
                                35
                            ],
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                    "finish": [
                        201,
                        44
                    ],
                    "rawdesc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                    "returns": [
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": [
                        201,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setmetatable(value: <T>, meta?: table)\n  -> value: <T>"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    201,
                    27
                ],
                "name": "setmetatable",
                "rawdesc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                "start": [
                    201,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                212,
                                27
                            ],
                            "name": "f",
                            "start": [
                                212,
                                26
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                212,
                                31
                            ],
                            "name": "up",
                            "start": [
                                212,
                                29
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                212,
                                38
                            ],
                            "name": "value",
                            "start": [
                                212,
                                33
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                    "finish": [
                        212,
                        43
                    ],
                    "rawdesc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        212,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setupvalue(f: fun(...any):...unknown, up: integer, value: any)\n  -> name: string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    212,
                    25
                ],
                "name": "setupvalue",
                "rawdesc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                "start": [
                    212,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the given value as the Lua value associated to the given udata.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                222,
                                33
                            ],
                            "name": "udata",
                            "start": [
                                222,
                                28
                            ],
                            "type": "local",
                            "view": "userdata"
                        },
                        {
                            "finish": [
                                222,
                                40
                            ],
                            "name": "value",
                            "start": [
                                222,
                                35
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nSets the given value as the Lua value associated to the given udata.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                    "finish": [
                        222,
                        45
                    ],
                    "rawdesc": "\nSets the given value as the Lua value associated to the given udata.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                    "returns": [
                        {
                            "name": "udata",
                            "type": "function.return",
                            "view": "userdata"
                        }
                    ],
                    "start": [
                        222,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setuservalue(udata: userdata, value: any)\n  -> udata: userdata"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    222,
                    27
                ],
                "name": "setuservalue",
                "rawdesc": "\nSets the given value as the Lua value associated to the given udata.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                "start": [
                    222,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                235,
                                31
                            ],
                            "name": "thread",
                            "start": [
                                235,
                                25
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                235,
                                40
                            ],
                            "name": "message",
                            "start": [
                                235,
                                33
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                235,
                                47
                            ],
                            "name": "level",
                            "start": [
                                235,
                                42
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                    "finish": [
                        235,
                        52
                    ],
                    "rawdesc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                    "returns": [
                        {
                            "name": "message",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        235,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.traceback(thread: thread, message?: any, level?: integer)\n  -> message: string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    235,
                    24
                ],
                "name": "traceback",
                "rawdesc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                "start": [
                    235,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                247,
                                26
                            ],
                            "name": "f",
                            "start": [
                                247,
                                25
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                247,
                                29
                            ],
                            "name": "n",
                            "start": [
                                247,
                                28
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                    "finish": [
                        247,
                        34
                    ],
                    "rawdesc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                    "returns": [
                        {
                            "name": "id",
                            "type": "function.return",
                            "view": "lightuserdata"
                        }
                    ],
                    "start": [
                        247,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.upvalueid(f: fun(...any):...unknown, n: integer)\n  -> id: lightuserdata"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    247,
                    24
                ],
                "name": "upvalueid",
                "rawdesc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                "start": [
                    247,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                259,
                                29
                            ],
                            "name": "f1",
                            "start": [
                                259,
                                27
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                259,
                                33
                            ],
                            "name": "n1",
                            "start": [
                                259,
                                31
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                259,
                                37
                            ],
                            "name": "f2",
                            "start": [
                                259,
                                35
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                259,
                                41
                            ],
                            "name": "n2",
                            "start": [
                                259,
                                39
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                    "finish": [
                        259,
                        46
                    ],
                    "rawdesc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                    "start": [
                        259,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.upvaluejoin(f1: fun(...any):...unknown, n1: integer, f2: fun(...any):...unknown, n2: integer)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/debug.lua",
                "finish": [
                    259,
                    26
                ],
                "name": "upvaluejoin",
                "rawdesc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                "start": [
                    259,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debuglib",
        "type": "type",
        "view": "debuglib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nOpens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-dofile\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                50,
                                24
                            ],
                            "name": "filename",
                            "start": [
                                50,
                                16
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nOpens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-dofile\"])",
                    "finish": [
                        50,
                        29
                    ],
                    "rawdesc": "\nOpens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-dofile\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        50,
                        0
                    ],
                    "type": "function",
                    "view": "function dofile(filename?: string)\n  -> ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    50,
                    15
                ],
                "rawdesc": "\nOpens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-dofile\"])",
                "start": [
                    50,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "dofile",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nTerminates the last protected function called and returns message as the error object.\n\nUsually, `error` adds some information about the error position at the beginning of the message, if the message is a string.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-error\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                62,
                                22
                            ],
                            "name": "message",
                            "start": [
                                62,
                                15
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                62,
                                29
                            ],
                            "name": "level",
                            "start": [
                                62,
                                24
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nTerminates the last protected function called and returns message as the error object.\n\nUsually, `error` adds some information about the error position at the beginning of the message, if the message is a string.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-error\"])",
                    "finish": [
                        62,
                        34
                    ],
                    "rawdesc": "\nTerminates the last protected function called and returns message as the error object.\n\nUsually, `error` adds some information about the error position at the beginning of the message, if the message is a string.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-error\"])",
                    "start": [
                        62,
                        0
                    ],
                    "type": "function",
                    "view": "function error(message: any, level?: integer)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    62,
                    14
                ],
                "rawdesc": "\nTerminates the last protected function called and returns message as the error object.\n\nUsually, `error` adds some information about the error position at the beginning of the message, if the message is a string.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-error\"])",
                "start": [
                    62,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "error",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "finish": [
                    179,
                    34
                ],
                "rawdesc": "```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "start": [
                    179,
                    10
                ],
                "type": "doc.alias",
                "view": "\"exit\"|\"signal\""
            }
        ],
        "fields": [],
        "name": "exitcode",
        "type": "type",
        "view": "exitcode"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            7,
                            24
                        ],
                        "start": [
                            7,
                            17
                        ],
                        "type": "doc.extends.name",
                        "view": "boolean"
                    }
                ],
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/builtin.lua",
                "finish": [
                    7,
                    24
                ],
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "false",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "false",
        "type": "type",
        "view": "false"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            15,
                            30
                        ],
                        "start": [
                            15,
                            22
                        ],
                        "type": "doc.extends.name",
                        "view": "userdata"
                    }
                ],
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    15,
                    30
                ],
                "start": [
                    15,
                    10
                ],
                "type": "doc.class",
                "view": "ffi.VLA*",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "ffi.VLA*",
        "type": "type",
        "view": "ffi.VLA*"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            16,
                            30
                        ],
                        "start": [
                            16,
                            22
                        ],
                        "type": "doc.extends.name",
                        "view": "userdata"
                    }
                ],
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    16,
                    30
                ],
                "start": [
                    16,
                    10
                ],
                "type": "doc.class",
                "view": "ffi.VLS*",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "ffi.VLS*",
        "type": "type",
        "view": "ffi.VLS*"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            13,
                            32
                        ],
                        "start": [
                            13,
                            22
                        ],
                        "type": "doc.extends.name",
                        "view": "ffi.cdata*"
                    }
                ],
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    13,
                    32
                ],
                "start": [
                    13,
                    10
                ],
                "type": "doc.class",
                "view": "ffi.cb*",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                115,
                                8
                            ],
                            "name": "self",
                            "start": [
                                115,
                                8
                            ],
                            "type": "self",
                            "view": "ffi.cb*"
                        }
                    ],
                    "finish": [
                        115,
                        22
                    ],
                    "start": [
                        115,
                        0
                    ],
                    "type": "function",
                    "view": "(method) ffi.cb*:free()"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    115,
                    16
                ],
                "name": "free",
                "start": [
                    115,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                118,
                                8
                            ],
                            "name": "self",
                            "start": [
                                118,
                                8
                            ],
                            "type": "self",
                            "view": "ffi.cb*"
                        },
                        {
                            "finish": [
                                118,
                                20
                            ],
                            "name": "func",
                            "start": [
                                118,
                                16
                            ],
                            "type": "local",
                            "view": "function"
                        }
                    ],
                    "finish": [
                        118,
                        25
                    ],
                    "start": [
                        118,
                        0
                    ],
                    "type": "function",
                    "view": "(method) ffi.cb*:set(func: function)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    118,
                    15
                ],
                "name": "set",
                "start": [
                    118,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "ffi.cb*",
        "type": "type",
        "view": "ffi.cb*"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            11,
                            30
                        ],
                        "start": [
                            11,
                            22
                        ],
                        "type": "doc.extends.name",
                        "view": "userdata"
                    }
                ],
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    11,
                    30
                ],
                "start": [
                    11,
                    10
                ],
                "type": "doc.class",
                "view": "ffi.cdata*",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "ffi.cdata*",
        "type": "type",
        "view": "ffi.cdata*"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            10,
                            28
                        ],
                        "start": [
                            10,
                            22
                        ],
                        "type": "doc.extends.name",
                        "view": "string"
                    }
                ],
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    10,
                    28
                ],
                "start": [
                    10,
                    10
                ],
                "type": "doc.class",
                "view": "ffi.cdecl*",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                20,
                                22
                            ],
                            "name": "s",
                            "start": [
                                20,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                20,
                                25
                            ],
                            "name": "i",
                            "start": [
                                20,
                                24
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                20,
                                28
                            ],
                            "name": "j",
                            "start": [
                                20,
                                27
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                    "finish": [
                        20,
                        33
                    ],
                    "rawdesc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        20,
                        0
                    ],
                    "type": "function",
                    "view": "function string.byte(s: string|number, i?: integer, j?: integer)\n  -> ...integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    20,
                    20
                ],
                "name": "byte",
                "rawdesc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                "start": [
                    20,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                31,
                                25
                            ],
                            "name": "byte",
                            "start": [
                                31,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                31,
                                30
                            ],
                            "start": [
                                31,
                                27
                            ],
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                    "finish": [
                        31,
                        35
                    ],
                    "rawdesc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        31,
                        0
                    ],
                    "type": "function",
                    "view": "function string.char(byte: integer, ...integer)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    31,
                    20
                ],
                "name": "char",
                "rawdesc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                "start": [
                    31,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                42,
                                22
                            ],
                            "name": "f",
                            "start": [
                                42,
                                21
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                42,
                                29
                            ],
                            "name": "strip",
                            "start": [
                                42,
                                24
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                    "finish": [
                        42,
                        34
                    ],
                    "rawdesc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        42,
                        0
                    ],
                    "type": "function",
                    "view": "function string.dump(f: fun(...any):...unknown, strip?: boolean)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    42,
                    20
                ],
                "name": "dump",
                "rawdesc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                "start": [
                    42,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` — captured",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                57,
                                22
                            ],
                            "name": "s",
                            "start": [
                                57,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                57,
                                31
                            ],
                            "name": "pattern",
                            "start": [
                                57,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                57,
                                37
                            ],
                            "name": "init",
                            "start": [
                                57,
                                33
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                57,
                                44
                            ],
                            "name": "plain",
                            "start": [
                                57,
                                39
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` — captured",
                    "finish": [
                        57,
                        49
                    ],
                    "rawdesc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])",
                    "returns": [
                        {
                            "name": "start",
                            "type": "function.return",
                            "view": "integer|nil"
                        },
                        {
                            "name": "end",
                            "type": "function.return",
                            "view": "integer|nil"
                        },
                        {
                            "desc": "captured",
                            "name": "...",
                            "rawdesc": "captured",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        57,
                        0
                    ],
                    "type": "function",
                    "view": "function string.find(s: string|number, pattern: string|number, init?: integer, plain?: boolean)\n  -> start: integer|nil\n  2. end: integer|nil\n  3. ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    57,
                    20
                ],
                "name": "find",
                "rawdesc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])",
                "start": [
                    57,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                68,
                                24
                            ],
                            "name": "s",
                            "start": [
                                68,
                                23
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                68,
                                29
                            ],
                            "start": [
                                68,
                                26
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                    "finish": [
                        68,
                        34
                    ],
                    "rawdesc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        68,
                        0
                    ],
                    "type": "function",
                    "view": "function string.format(s: string|number, ...any)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    68,
                    22
                ],
                "name": "format",
                "rawdesc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                "start": [
                    68,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                79,
                                24
                            ],
                            "name": "s",
                            "start": [
                                79,
                                23
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                79,
                                33
                            ],
                            "name": "pattern",
                            "start": [
                                79,
                                26
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                    "finish": [
                        79,
                        38
                    ],
                    "rawdesc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():string, ...unknown"
                        }
                    ],
                    "start": [
                        79,
                        0
                    ],
                    "type": "function",
                    "view": "function string.gmatch(s: string|number, pattern: string|number)\n  -> fun():string, ...unknown"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    79,
                    22
                ],
                "name": "gmatch",
                "rawdesc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                "start": [
                    79,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                92,
                                22
                            ],
                            "name": "s",
                            "start": [
                                92,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                92,
                                31
                            ],
                            "name": "pattern",
                            "start": [
                                92,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                92,
                                37
                            ],
                            "name": "repl",
                            "start": [
                                92,
                                33
                            ],
                            "type": "local",
                            "view": "string|number|function|table"
                        },
                        {
                            "finish": [
                                92,
                                40
                            ],
                            "name": "n",
                            "start": [
                                92,
                                39
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                    "finish": [
                        92,
                        45
                    ],
                    "rawdesc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "count",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        92,
                        0
                    ],
                    "type": "function",
                    "view": "function string.gsub(s: string|number, pattern: string|number, repl: string|number|function|table, n?: integer)\n  -> string\n  2. count: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    92,
                    20
                ],
                "name": "gsub",
                "rawdesc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                "start": [
                    92,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                102,
                                21
                            ],
                            "name": "s",
                            "start": [
                                102,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                    "finish": [
                        102,
                        26
                    ],
                    "rawdesc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        102,
                        0
                    ],
                    "type": "function",
                    "view": "function string.len(s: string|number)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    102,
                    19
                ],
                "name": "len",
                "rawdesc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                "start": [
                    102,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                112,
                                23
                            ],
                            "name": "s",
                            "start": [
                                112,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                    "finish": [
                        112,
                        28
                    ],
                    "rawdesc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        112,
                        0
                    ],
                    "type": "function",
                    "view": "function string.lower(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    112,
                    21
                ],
                "name": "lower",
                "rawdesc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                "start": [
                    112,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                124,
                                23
                            ],
                            "name": "s",
                            "start": [
                                124,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                124,
                                32
                            ],
                            "name": "pattern",
                            "start": [
                                124,
                                25
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                124,
                                38
                            ],
                            "name": "init",
                            "start": [
                                124,
                                34
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                    "finish": [
                        124,
                        43
                    ],
                    "rawdesc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        124,
                        0
                    ],
                    "type": "function",
                    "view": "function string.match(s: string|number, pattern: string|number, init?: integer)\n  -> ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    124,
                    21
                ],
                "name": "match",
                "rawdesc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                "start": [
                    124,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                138,
                                24
                            ],
                            "name": "fmt",
                            "start": [
                                138,
                                21
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                138,
                                28
                            ],
                            "name": "v1",
                            "start": [
                                138,
                                26
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                138,
                                32
                            ],
                            "name": "v2",
                            "start": [
                                138,
                                30
                            ],
                            "type": "local",
                            "view": "(string|number)?"
                        },
                        {
                            "finish": [
                                138,
                                37
                            ],
                            "start": [
                                138,
                                34
                            ],
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                    "finish": [
                        138,
                        42
                    ],
                    "rawdesc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                    "returns": [
                        {
                            "name": "binary",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        138,
                        0
                    ],
                    "type": "function",
                    "view": "function string.pack(fmt: string, v1: string|number, v2?: string|number, ...string|number)\n  -> binary: string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    138,
                    20
                ],
                "name": "pack",
                "rawdesc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                "start": [
                    138,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                149,
                                28
                            ],
                            "name": "fmt",
                            "start": [
                                149,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                    "finish": [
                        149,
                        33
                    ],
                    "rawdesc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        149,
                        0
                    ],
                    "type": "function",
                    "view": "function string.packsize(fmt: string)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    149,
                    24
                ],
                "name": "packsize",
                "rawdesc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                "start": [
                    149,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                161,
                                21
                            ],
                            "name": "s",
                            "start": [
                                161,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                161,
                                24
                            ],
                            "name": "n",
                            "start": [
                                161,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                161,
                                29
                            ],
                            "name": "sep",
                            "start": [
                                161,
                                26
                            ],
                            "type": "local",
                            "view": "(string|number)?"
                        }
                    ],
                    "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                    "finish": [
                        161,
                        34
                    ],
                    "rawdesc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        161,
                        0
                    ],
                    "type": "function",
                    "view": "function string.rep(s: string|number, n: integer, sep?: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    161,
                    19
                ],
                "name": "rep",
                "rawdesc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                "start": [
                    161,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                171,
                                25
                            ],
                            "name": "s",
                            "start": [
                                171,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                    "finish": [
                        171,
                        30
                    ],
                    "rawdesc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        171,
                        0
                    ],
                    "type": "function",
                    "view": "function string.reverse(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    171,
                    23
                ],
                "name": "reverse",
                "rawdesc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                "start": [
                    171,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                28,
                                32
                            ],
                            "name": "str1",
                            "start": [
                                28,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                28,
                                38
                            ],
                            "name": "str2",
                            "start": [
                                28,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        30,
                        3
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        28,
                        0
                    ],
                    "type": "function",
                    "view": "function string.starts_with(str1: string, str2: string)\n  -> boolean"
                },
                "file": "mods/spacea_api/utils.lua",
                "finish": [
                    28,
                    27
                ],
                "name": "starts_with",
                "start": [
                    28,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                183,
                                21
                            ],
                            "name": "s",
                            "start": [
                                183,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                183,
                                24
                            ],
                            "name": "i",
                            "start": [
                                183,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                183,
                                27
                            ],
                            "name": "j",
                            "start": [
                                183,
                                26
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                    "finish": [
                        183,
                        32
                    ],
                    "rawdesc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        183,
                        0
                    ],
                    "type": "function",
                    "view": "function string.sub(s: string|number, i: integer, j?: integer)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    183,
                    19
                ],
                "name": "sub",
                "rawdesc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                "start": [
                    183,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/51/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                196,
                                26
                            ],
                            "name": "fmt",
                            "start": [
                                196,
                                23
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                196,
                                29
                            ],
                            "name": "s",
                            "start": [
                                196,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                196,
                                34
                            ],
                            "name": "pos",
                            "start": [
                                196,
                                31
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/51/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                    "finish": [
                        196,
                        39
                    ],
                    "rawdesc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/51/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        196,
                        0
                    ],
                    "type": "function",
                    "view": "function string.unpack(fmt: string, s: string, pos?: integer)\n  -> ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    196,
                    22
                ],
                "name": "unpack",
                "rawdesc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/51/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                "start": [
                    196,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                206,
                                23
                            ],
                            "name": "s",
                            "start": [
                                206,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                    "finish": [
                        206,
                        28
                    ],
                    "rawdesc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        206,
                        0
                    ],
                    "type": "function",
                    "view": "function string.upper(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    206,
                    21
                ],
                "name": "upper",
                "rawdesc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                "start": [
                    206,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "ffi.cdecl*",
        "type": "type",
        "view": "ffi.cdecl*"
    },
    {
        "defines": [
            {
                "finish": [
                    12,
                    54
                ],
                "start": [
                    12,
                    10
                ],
                "type": "doc.alias",
                "view": "ffi.cdata*|ffi.cdecl*|ffi.ctype*"
            }
        ],
        "fields": [],
        "name": "ffi.ct*",
        "type": "type",
        "view": "ffi.ct*"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            5,
                            30
                        ],
                        "start": [
                            5,
                            22
                        ],
                        "type": "doc.extends.name",
                        "view": "userdata"
                    }
                ],
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    5,
                    30
                ],
                "start": [
                    5,
                    10
                ],
                "type": "doc.class",
                "view": "ffi.ctype*",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "ffi.ctype*",
        "type": "type",
        "view": "ffi.ctype*"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            2,
                            31
                        ],
                        "start": [
                            2,
                            26
                        ],
                        "type": "doc.extends.name",
                        "view": "table"
                    }
                ],
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    2,
                    31
                ],
                "start": [
                    2,
                    10
                ],
                "type": "doc.class",
                "view": "ffi.namespace*",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        3,
                        27
                    ],
                    "start": [
                        3,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                3,
                                27
                            ],
                            "start": [
                                3,
                                19
                            ],
                            "type": "doc.type.name",
                            "view": "function"
                        }
                    ],
                    "view": "function"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    3,
                    27
                ],
                "name": "[string]",
                "start": [
                    3,
                    11
                ],
                "type": "doc.field",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "ffi.namespace*",
        "type": "type",
        "view": "ffi.namespace*"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    19,
                    16
                ],
                "start": [
                    19,
                    10
                ],
                "type": "doc.class",
                "view": "ffilib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        20,
                        29
                    ],
                    "start": [
                        20,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                20,
                                29
                            ],
                            "start": [
                                20,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "ffi.namespace*"
                        }
                    ],
                    "view": "ffi.namespace*"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    20,
                    29
                ],
                "name": "C",
                "start": [
                    20,
                    10
                ],
                "type": "doc.field",
                "view": "ffi.namespace*",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                113,
                                22
                            ],
                            "name": "param",
                            "start": [
                                113,
                                17
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        113,
                        27
                    ],
                    "returns": [
                        {
                            "name": "status",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        113,
                        0
                    ],
                    "type": "function",
                    "view": "function ffilib.abi(param: string)\n  -> status: boolean"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    113,
                    16
                ],
                "name": "abi",
                "start": [
                    113,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                74,
                                23
                            ],
                            "name": "ct",
                            "start": [
                                74,
                                21
                            ],
                            "type": "local",
                            "view": "ffi.cdata*|ffi.cdecl*|ffi.ctype*"
                        }
                    ],
                    "finish": [
                        74,
                        28
                    ],
                    "returns": [
                        {
                            "name": "align",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        74,
                        0
                    ],
                    "type": "function",
                    "view": "function ffilib.alignof(ct: ffi.cdata*|ffi.cdecl*|ffi.ctype*)\n  -> align: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    74,
                    20
                ],
                "name": "alignof",
                "start": [
                    74,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        22,
                        21
                    ],
                    "start": [
                        22,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                22,
                                21
                            ],
                            "start": [
                                22,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    22,
                    21
                ],
                "name": "arch",
                "start": [
                    22,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                53,
                                20
                            ],
                            "name": "ct",
                            "start": [
                                53,
                                18
                            ],
                            "type": "local",
                            "view": "ffi.cdata*|ffi.cdecl*|ffi.ctype*"
                        },
                        {
                            "finish": [
                                53,
                                26
                            ],
                            "name": "init",
                            "start": [
                                53,
                                22
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        53,
                        31
                    ],
                    "returns": [
                        {
                            "name": "cdata",
                            "type": "function.return",
                            "view": "ffi.cdata*"
                        }
                    ],
                    "start": [
                        53,
                        0
                    ],
                    "type": "function",
                    "view": "function ffilib.cast(ct: ffi.cdata*|ffi.cdecl*|ffi.ctype*, init: any)\n  -> cdata: ffi.cdata*"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    53,
                    17
                ],
                "name": "cast",
                "start": [
                    53,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                27,
                                21
                            ],
                            "name": "def",
                            "start": [
                                27,
                                18
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                27,
                                29
                            ],
                            "name": "params",
                            "start": [
                                27,
                                23
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                27,
                                34
                            ],
                            "start": [
                                27,
                                31
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "finish": [
                        27,
                        39
                    ],
                    "start": [
                        27,
                        0
                    ],
                    "type": "function",
                    "view": "function ffilib.cdef(def: string, params?: any, ...any)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    27,
                    17
                ],
                "name": "cdef",
                "start": [
                    27,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                104,
                                21
                            ],
                            "name": "dst",
                            "start": [
                                104,
                                18
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                104,
                                26
                            ],
                            "name": "src",
                            "start": [
                                104,
                                23
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                104,
                                31
                            ],
                            "name": "len",
                            "start": [
                                104,
                                28
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "finish": [
                        104,
                        36
                    ],
                    "start": [
                        104,
                        0
                    ],
                    "type": "function",
                    "view": "function ffilib.copy(dst: any, src: any, len: integer)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    104,
                    17
                ],
                "name": "copy",
                "start": [
                    104,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                93,
                                25
                            ],
                            "name": "newerr",
                            "start": [
                                93,
                                19
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "finish": [
                        93,
                        30
                    ],
                    "returns": [
                        {
                            "name": "err",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        93,
                        0
                    ],
                    "type": "function",
                    "view": "function ffilib.errno(newerr?: integer)\n  -> err: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    93,
                    18
                ],
                "name": "errno",
                "start": [
                    93,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                109,
                                21
                            ],
                            "name": "dst",
                            "start": [
                                109,
                                18
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                109,
                                26
                            ],
                            "name": "len",
                            "start": [
                                109,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                109,
                                29
                            ],
                            "name": "c",
                            "start": [
                                109,
                                28
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        109,
                        34
                    ],
                    "start": [
                        109,
                        0
                    ],
                    "type": "function",
                    "view": "function ffilib.fill(dst: any, len: integer, c?: any)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    109,
                    17
                ],
                "name": "fill",
                "start": [
                    109,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                63,
                                21
                            ],
                            "name": "cdata",
                            "start": [
                                63,
                                16
                            ],
                            "type": "local",
                            "view": "ffi.cdata*"
                        },
                        {
                            "finish": [
                                63,
                                32
                            ],
                            "name": "finalizer",
                            "start": [
                                63,
                                23
                            ],
                            "type": "local",
                            "view": "function?"
                        }
                    ],
                    "finish": [
                        63,
                        37
                    ],
                    "returns": [
                        {
                            "name": "cdata",
                            "type": "function.return",
                            "view": "ffi.cdata*"
                        }
                    ],
                    "start": [
                        63,
                        0
                    ],
                    "type": "function",
                    "view": "function ffilib.gc(cdata: ffi.cdata*, finalizer?: function)\n  -> cdata: ffi.cdata*"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    63,
                    15
                ],
                "name": "gc",
                "start": [
                    63,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                88,
                                22
                            ],
                            "name": "ct",
                            "start": [
                                88,
                                20
                            ],
                            "type": "local",
                            "view": "ffi.cdata*|ffi.cdecl*|ffi.ctype*"
                        },
                        {
                            "finish": [
                                88,
                                27
                            ],
                            "name": "obj",
                            "start": [
                                88,
                                24
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        88,
                        32
                    ],
                    "returns": [
                        {
                            "name": "status",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        88,
                        0
                    ],
                    "type": "function",
                    "view": "function ffilib.istype(ct: ffi.cdata*|ffi.cdecl*|ffi.ctype*, obj: any)\n  -> status: boolean"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    88,
                    19
                ],
                "name": "istype",
                "start": [
                    88,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                33,
                                22
                            ],
                            "name": "name",
                            "start": [
                                33,
                                18
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                33,
                                30
                            ],
                            "name": "global",
                            "start": [
                                33,
                                24
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "finish": [
                        33,
                        35
                    ],
                    "returns": [
                        {
                            "name": "clib",
                            "type": "function.return",
                            "view": "ffi.namespace*"
                        }
                    ],
                    "start": [
                        33,
                        0
                    ],
                    "type": "function",
                    "view": "function ffilib.load(name: string, global?: boolean)\n  -> clib: ffi.namespace*"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    33,
                    17
                ],
                "name": "load",
                "start": [
                    33,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                58,
                                24
                            ],
                            "name": "ct",
                            "start": [
                                58,
                                22
                            ],
                            "type": "local",
                            "view": "ffi.cdata*|ffi.cdecl*|ffi.ctype*"
                        },
                        {
                            "finish": [
                                58,
                                35
                            ],
                            "name": "metatable",
                            "start": [
                                58,
                                26
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "finish": [
                        58,
                        40
                    ],
                    "returns": [
                        {
                            "name": "ctype",
                            "type": "function.return",
                            "view": "ffi.ctype*"
                        }
                    ],
                    "start": [
                        58,
                        0
                    ],
                    "type": "function",
                    "view": "function ffilib.metatype(ct: ffi.cdata*|ffi.cdecl*|ffi.ctype*, metatable: table)\n  -> ctype: ffi.ctype*"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    58,
                    21
                ],
                "name": "metatype",
                "start": [
                    58,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                41,
                                19
                            ],
                            "name": "ct",
                            "start": [
                                41,
                                17
                            ],
                            "type": "local",
                            "view": "ffi.cdata*|ffi.cdecl*|ffi.ctype*"
                        },
                        {
                            "finish": [
                                41,
                                26
                            ],
                            "name": "nelem",
                            "start": [
                                41,
                                21
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                41,
                                32
                            ],
                            "name": "init",
                            "start": [
                                41,
                                28
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                41,
                                37
                            ],
                            "start": [
                                41,
                                34
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "finish": [
                        41,
                        42
                    ],
                    "returns": [
                        {
                            "name": "cdata",
                            "type": "function.return",
                            "view": "ffi.cdata*"
                        }
                    ],
                    "start": [
                        41,
                        0
                    ],
                    "type": "function",
                    "view": "function ffilib.new(ct: ffi.cdata*|ffi.cdecl*|ffi.ctype*, nelem?: integer, init?: any, ...any)\n  -> cdata: ffi.cdata*"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    41,
                    16
                ],
                "name": "new",
                "start": [
                    41,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                82,
                                24
                            ],
                            "name": "ct",
                            "start": [
                                82,
                                22
                            ],
                            "type": "local",
                            "view": "ffi.cdata*|ffi.cdecl*|ffi.ctype*"
                        },
                        {
                            "finish": [
                                82,
                                31
                            ],
                            "name": "field",
                            "start": [
                                82,
                                26
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        82,
                        36
                    ],
                    "returns": [
                        {
                            "name": "ofs",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "bpos",
                            "type": "function.return",
                            "view": "integer?"
                        },
                        {
                            "name": "bsize",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": [
                        82,
                        0
                    ],
                    "type": "function",
                    "view": "function ffilib.offsetof(ct: ffi.cdata*|ffi.cdecl*|ffi.ctype*, field: string)\n  -> ofs: integer\n  2. bpos: integer?\n  3. bsize: integer?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    82,
                    21
                ],
                "name": "offsetof",
                "start": [
                    82,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        21,
                        21
                    ],
                    "start": [
                        21,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                21,
                                21
                            ],
                            "start": [
                                21,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    21,
                    21
                ],
                "name": "os",
                "start": [
                    21,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                69,
                                22
                            ],
                            "name": "ct",
                            "start": [
                                69,
                                20
                            ],
                            "type": "local",
                            "view": "ffi.cdata*|ffi.cdecl*|ffi.ctype*"
                        },
                        {
                            "finish": [
                                69,
                                29
                            ],
                            "name": "nelem",
                            "start": [
                                69,
                                24
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "finish": [
                        69,
                        34
                    ],
                    "returns": [
                        {
                            "name": "size",
                            "type": "function.return",
                            "view": "integer|nil"
                        }
                    ],
                    "start": [
                        69,
                        0
                    ],
                    "type": "function",
                    "view": "function ffilib.sizeof(ct: ffi.cdata*|ffi.cdecl*|ffi.ctype*, nelem?: integer)\n  -> size: integer|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    69,
                    19
                ],
                "name": "sizeof",
                "start": [
                    69,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                98,
                                23
                            ],
                            "name": "ptr",
                            "start": [
                                98,
                                20
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                98,
                                28
                            ],
                            "name": "len",
                            "start": [
                                98,
                                25
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "finish": [
                        98,
                        33
                    ],
                    "returns": [
                        {
                            "name": "str",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        98,
                        0
                    ],
                    "type": "function",
                    "view": "function ffilib.string(ptr: any, len?: integer)\n  -> str: string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    98,
                    19
                ],
                "name": "string",
                "start": [
                    98,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                47,
                                22
                            ],
                            "name": "ct",
                            "start": [
                                47,
                                20
                            ],
                            "type": "local",
                            "view": "ffi.cdata*|ffi.cdecl*|ffi.ctype*"
                        },
                        {
                            "finish": [
                                47,
                                30
                            ],
                            "name": "params",
                            "start": [
                                47,
                                24
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                47,
                                35
                            ],
                            "start": [
                                47,
                                32
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "finish": [
                        47,
                        40
                    ],
                    "returns": [
                        {
                            "name": "ctype",
                            "type": "function.return",
                            "view": "ffi.ctype*"
                        }
                    ],
                    "start": [
                        47,
                        0
                    ],
                    "type": "function",
                    "view": "function ffilib.typeof(ct: ffi.cdata*|ffi.cdecl*|ffi.ctype*, params?: any, ...any)\n  -> ctype: ffi.ctype*"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/ffi.lua",
                "finish": [
                    47,
                    19
                ],
                "name": "typeof",
                "start": [
                    47,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "ffilib",
        "type": "type",
        "view": "ffilib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    170,
                    15
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                "start": [
                    170,
                    10
                ],
                "type": "doc.class",
                "view": "file*",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nClose `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                189,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                189,
                                8
                            ],
                            "type": "self",
                            "view": "file*"
                        }
                    ],
                    "desc": "\nClose `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "finish": [
                        189,
                        25
                    ],
                    "rawdesc": "\nClose `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean?"
                        },
                        {
                            "name": "exitcode",
                            "type": "function.return",
                            "view": "(\"exit\"|\"signal\")?"
                        },
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": [
                        189,
                        0
                    ],
                    "type": "function",
                    "view": "(method) file*:close()\n  -> suc: boolean?\n  2. exitcode: (\"exit\"|\"signal\")?\n  3. code: integer?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    189,
                    19
                ],
                "name": "close",
                "rawdesc": "\nClose `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "start": [
                    189,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSaves any written data to `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:flush\"])",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                196,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                196,
                                8
                            ],
                            "type": "self",
                            "view": "file*"
                        }
                    ],
                    "desc": "\nSaves any written data to `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:flush\"])",
                    "finish": [
                        196,
                        25
                    ],
                    "rawdesc": "\nSaves any written data to `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:flush\"])",
                    "start": [
                        196,
                        0
                    ],
                    "type": "function",
                    "view": "(method) file*:flush()"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    196,
                    19
                ],
                "name": "flush",
                "rawdesc": "\nSaves any written data to `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:flush\"])",
                "start": [
                    196,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n------\n```lua\nfor c in file:lines(...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:lines\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                211,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                211,
                                8
                            ],
                            "type": "self",
                            "view": "file*"
                        },
                        {
                            "finish": [
                                211,
                                23
                            ],
                            "start": [
                                211,
                                20
                            ],
                            "type": "...",
                            "view": "string|integer|\"*L\"|\"*a\"|\"*l\"...(+1)"
                        }
                    ],
                    "desc": "\n------\n```lua\nfor c in file:lines(...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:lines\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                    "finish": [
                        211,
                        28
                    ],
                    "rawdesc": "\n------\n```lua\nfor c in file:lines(...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:lines\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():any, ...unknown"
                        }
                    ],
                    "start": [
                        211,
                        0
                    ],
                    "type": "function",
                    "view": "(method) file*:lines(...string|integer|\"*L\"|\"*a\"|\"*l\"...(+1))\n  -> fun():any, ...unknown"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    211,
                    19
                ],
                "name": "lines",
                "rawdesc": "\n------\n```lua\nfor c in file:lines(...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:lines\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                "start": [
                    211,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:read\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                222,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                222,
                                8
                            ],
                            "type": "self",
                            "view": "file*"
                        },
                        {
                            "finish": [
                                222,
                                22
                            ],
                            "start": [
                                222,
                                19
                            ],
                            "type": "...",
                            "view": "string|integer|\"*L\"|\"*a\"|\"*l\"...(+1)"
                        }
                    ],
                    "desc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:read\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                    "finish": [
                        222,
                        27
                    ],
                    "rawdesc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:read\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        222,
                        0
                    ],
                    "type": "function",
                    "view": "(method) file*:read(...string|integer|\"*L\"|\"*a\"|\"*l\"...(+1))\n  -> any\n  2. ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    222,
                    18
                ],
                "name": "read",
                "rawdesc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:read\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                "start": [
                    222,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets and gets the file position, measured from the beginning of the file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:seek\"])\n\n\n```lua\nwhence:\n    | \"set\" -- Base is beginning of the file.\n   -> \"cur\" -- Base is current position.\n    | \"end\" -- Base is end of file.\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                238,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                238,
                                8
                            ],
                            "type": "self",
                            "view": "file*"
                        },
                        {
                            "finish": [
                                238,
                                25
                            ],
                            "name": "whence",
                            "start": [
                                238,
                                19
                            ],
                            "type": "local",
                            "view": "(\"cur\"|\"end\"|\"set\")?"
                        },
                        {
                            "finish": [
                                238,
                                33
                            ],
                            "name": "offset",
                            "start": [
                                238,
                                27
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nSets and gets the file position, measured from the beginning of the file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:seek\"])\n\n\n```lua\nwhence:\n    | \"set\" -- Base is beginning of the file.\n   -> \"cur\" -- Base is current position.\n    | \"end\" -- Base is end of file.\n```",
                    "finish": [
                        238,
                        38
                    ],
                    "rawdesc": "\nSets and gets the file position, measured from the beginning of the file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:seek\"])\n\n\n```lua\nwhence:\n    | \"set\" -- Base is beginning of the file.\n   -> \"cur\" -- Base is current position.\n    | \"end\" -- Base is end of file.\n```",
                    "returns": [
                        {
                            "name": "offset",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        238,
                        0
                    ],
                    "type": "function",
                    "view": "(method) file*:seek(whence?: \"cur\"|\"end\"|\"set\", offset?: integer)\n  -> offset: integer\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    238,
                    18
                ],
                "name": "seek",
                "rawdesc": "\nSets and gets the file position, measured from the beginning of the file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:seek\"])\n\n\n```lua\nwhence:\n    | \"set\" -- Base is beginning of the file.\n   -> \"cur\" -- Base is current position.\n    | \"end\" -- Base is end of file.\n```",
                "start": [
                    238,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the buffering mode for an output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:setvbuf\"])\n\n\n```lua\nmode:\n    | \"no\" -- Output operation appears immediately.\n    | \"full\" -- Performed only when the buffer is full.\n    | \"line\" -- Buffered until a newline is output.\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                252,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                252,
                                8
                            ],
                            "type": "self",
                            "view": "file*"
                        },
                        {
                            "finish": [
                                252,
                                26
                            ],
                            "name": "mode",
                            "start": [
                                252,
                                22
                            ],
                            "type": "local",
                            "view": "\"full\"|\"line\"|\"no\""
                        },
                        {
                            "finish": [
                                252,
                                32
                            ],
                            "name": "size",
                            "start": [
                                252,
                                28
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nSets the buffering mode for an output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:setvbuf\"])\n\n\n```lua\nmode:\n    | \"no\" -- Output operation appears immediately.\n    | \"full\" -- Performed only when the buffer is full.\n    | \"line\" -- Buffered until a newline is output.\n```",
                    "finish": [
                        252,
                        37
                    ],
                    "rawdesc": "\nSets the buffering mode for an output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:setvbuf\"])\n\n\n```lua\nmode:\n    | \"no\" -- Output operation appears immediately.\n    | \"full\" -- Performed only when the buffer is full.\n    | \"line\" -- Buffered until a newline is output.\n```",
                    "start": [
                        252,
                        0
                    ],
                    "type": "function",
                    "view": "(method) file*:setvbuf(mode: \"full\"|\"line\"|\"no\", size?: integer)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    252,
                    21
                ],
                "name": "setvbuf",
                "rawdesc": "\nSets the buffering mode for an output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:setvbuf\"])\n\n\n```lua\nmode:\n    | \"no\" -- Output operation appears immediately.\n    | \"full\" -- Performed only when the buffer is full.\n    | \"line\" -- Buffered until a newline is output.\n```",
                "start": [
                    252,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nWrites the value of each of its arguments to `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:write\"])",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                262,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                262,
                                8
                            ],
                            "type": "self",
                            "view": "file*"
                        },
                        {
                            "finish": [
                                262,
                                23
                            ],
                            "start": [
                                262,
                                20
                            ],
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nWrites the value of each of its arguments to `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:write\"])",
                    "finish": [
                        262,
                        28
                    ],
                    "rawdesc": "\nWrites the value of each of its arguments to `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:write\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        262,
                        0
                    ],
                    "type": "function",
                    "view": "(method) file*:write(...string|number)\n  -> file*?\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    262,
                    19
                ],
                "name": "write",
                "rawdesc": "\nWrites the value of each of its arguments to `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:write\"])",
                "start": [
                    262,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "file*",
        "type": "type",
        "view": "file*"
    },
    {
        "defines": [
            {
                "desc": "```lua\nfiletype:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                "finish": [
                    144,
                    10
                ],
                "rawdesc": "```lua\nfiletype:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                "start": [
                    141,
                    10
                ],
                "type": "doc.alias",
                "view": "\"closed file\"|\"file\"|`nil`"
            }
        ],
        "fields": [],
        "name": "filetype",
        "type": "type",
        "view": "filetype"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/builtin.lua",
                "finish": [
                    15,
                    18
                ],
                "start": [
                    15,
                    10
                ],
                "type": "doc.class",
                "view": "function",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "function",
        "type": "type",
        "view": "function"
    },
    {
        "defines": [
            {
                "desc": "```lua\ngcoptions:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"setpause\" -- Set `pause`.\n    | \"setstepmul\" -- Set `step multiplier`.\n```",
                "finish": [
                    31,
                    17
                ],
                "rawdesc": "```lua\ngcoptions:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"setpause\" -- Set `pause`.\n    | \"setstepmul\" -- Set `step multiplier`.\n```",
                "start": [
                    23,
                    10
                ],
                "type": "doc.alias",
                "view": "\"collect\"|\"count\"|\"isrunning\"|\"restart\"|\"setpause\"...(+3)"
            }
        ],
        "fields": [],
        "name": "gcoptions",
        "type": "type",
        "view": "gcoptions"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getfenv\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                81,
                                18
                            ],
                            "name": "f",
                            "start": [
                                81,
                                17
                            ],
                            "type": "local",
                            "view": "(integer|fun(...any):...unknown)?"
                        }
                    ],
                    "desc": "\nReturns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getfenv\"])",
                    "finish": [
                        81,
                        23
                    ],
                    "rawdesc": "\nReturns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getfenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        81,
                        0
                    ],
                    "type": "function",
                    "view": "function getfenv(f?: integer|fun(...any):...unknown)\n  -> table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    81,
                    16
                ],
                "rawdesc": "\nReturns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getfenv\"])",
                "start": [
                    81,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "getfenv",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nIf object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getmetatable\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                91,
                                28
                            ],
                            "name": "object",
                            "start": [
                                91,
                                22
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nIf object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getmetatable\"])",
                    "finish": [
                        91,
                        33
                    ],
                    "rawdesc": "\nIf object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getmetatable\"])",
                    "returns": [
                        {
                            "name": "metatable",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        91,
                        0
                    ],
                    "type": "function",
                    "view": "function getmetatable(object: any)\n  -> metatable: table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    91,
                    21
                ],
                "rawdesc": "\nIf object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getmetatable\"])",
                "start": [
                    91,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "getmetatable",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "```lua\nhookmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                "finish": [
                    163,
                    8
                ],
                "rawdesc": "```lua\nhookmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                "start": [
                    160,
                    10
                ],
                "type": "doc.alias",
                "view": "string|\"c\"|\"l\"|\"r\""
            }
        ],
        "fields": [],
        "name": "hookmask",
        "type": "type",
        "view": "hookmask"
    },
    {
        "defines": [
            {
                "desc": "```lua\ninfowhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"L\" -- `activelines`\n```",
                "finish": [
                    63,
                    8
                ],
                "rawdesc": "```lua\ninfowhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"L\" -- `activelines`\n```",
                "start": [
                    56,
                    10
                ],
                "type": "doc.alias",
                "view": "string|\"L\"|\"S\"|\"f\"|\"l\"...(+3)"
            }
        ],
        "fields": [],
        "name": "infowhat",
        "type": "type",
        "view": "infowhat"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            9,
                            25
                        ],
                        "start": [
                            9,
                            19
                        ],
                        "type": "doc.extends.name",
                        "view": "number"
                    }
                ],
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/builtin.lua",
                "finish": [
                    9,
                    25
                ],
                "start": [
                    9,
                    10
                ],
                "type": "doc.class",
                "view": "integer",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "integer",
        "type": "type",
        "view": "integer"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
                    "finish": [
                        26,
                        7
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
                    "start": [
                        26,
                        5
                    ],
                    "type": "table",
                    "view": "iolib"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    26,
                    2
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
                "start": [
                    26,
                    0
                ],
                "type": "setglobal",
                "view": "iolib",
                "visible": "public"
            }
        ],
        "name": "io",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                51,
                                22
                            ],
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                51,
                                18
                            ],
                            "type": "local",
                            "view": "file*?"
                        }
                    ],
                    "desc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "finish": [
                        51,
                        27
                    ],
                    "rawdesc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean?"
                        },
                        {
                            "name": "exitcode",
                            "type": "function.return",
                            "view": "(\"exit\"|\"signal\")?"
                        },
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": [
                        51,
                        0
                    ],
                    "type": "function",
                    "view": "function io.close(file?: file*)\n  -> suc: boolean?\n  2. exitcode: (\"exit\"|\"signal\")?\n  3. code: integer?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    51,
                    17
                ],
                "name": "close",
                "rawdesc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "start": [
                    51,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.close",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                "extends": {
                    "args": [],
                    "desc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                    "finish": [
                        58,
                        23
                    ],
                    "rawdesc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                    "start": [
                        58,
                        0
                    ],
                    "type": "function",
                    "view": "function io.flush()"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    58,
                    17
                ],
                "name": "flush",
                "rawdesc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                "start": [
                    58,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.flush",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                67,
                                22
                            ],
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                67,
                                18
                            ],
                            "type": "local",
                            "view": "string|file*"
                        }
                    ],
                    "desc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                    "finish": [
                        67,
                        27
                    ],
                    "rawdesc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                    "start": [
                        67,
                        0
                    ],
                    "type": "function",
                    "view": "function io.input(file: string|file*)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    67,
                    17
                ],
                "name": "input",
                "rawdesc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                "start": [
                    67,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.input",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                83,
                                26
                            ],
                            "name": "filename",
                            "start": [
                                83,
                                18
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                83,
                                31
                            ],
                            "start": [
                                83,
                                28
                            ],
                            "type": "...",
                            "view": "string|integer|\"*L\"|\"*a\"|\"*l\"...(+1)"
                        }
                    ],
                    "desc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                    "finish": [
                        83,
                        36
                    ],
                    "rawdesc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():any, ...unknown"
                        }
                    ],
                    "start": [
                        83,
                        0
                    ],
                    "type": "function",
                    "view": "function io.lines(filename?: string, ...string|integer|\"*L\"|\"*a\"|\"*l\"...(+1))\n  -> fun():any, ...unknown"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    83,
                    17
                ],
                "name": "lines",
                "rawdesc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                "start": [
                    83,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.lines",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                95,
                                25
                            ],
                            "name": "filename",
                            "start": [
                                95,
                                17
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                95,
                                31
                            ],
                            "name": "mode",
                            "start": [
                                95,
                                27
                            ],
                            "type": "local",
                            "view": "(\"a\"|\"a+\"|\"a+b\"|\"ab\"|\"r\"...(+7))?"
                        }
                    ],
                    "desc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                    "finish": [
                        95,
                        36
                    ],
                    "rawdesc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        95,
                        0
                    ],
                    "type": "function",
                    "view": "function io.open(filename: string, mode?: \"a\"|\"a+\"|\"a+b\"|\"ab\"|\"r\"...(+7))\n  -> file*?\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    95,
                    16
                ],
                "name": "open",
                "rawdesc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                "start": [
                    95,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.open",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                104,
                                23
                            ],
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                104,
                                19
                            ],
                            "type": "local",
                            "view": "string|file*"
                        }
                    ],
                    "desc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                    "finish": [
                        104,
                        28
                    ],
                    "rawdesc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                    "start": [
                        104,
                        0
                    ],
                    "type": "function",
                    "view": "function io.output(file: string|file*)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    104,
                    18
                ],
                "name": "output",
                "rawdesc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                "start": [
                    104,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                119,
                                22
                            ],
                            "name": "prog",
                            "start": [
                                119,
                                18
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                119,
                                28
                            ],
                            "name": "mode",
                            "start": [
                                119,
                                24
                            ],
                            "type": "local",
                            "view": "(\"r\"|\"w\")?"
                        }
                    ],
                    "desc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                    "finish": [
                        119,
                        33
                    ],
                    "rawdesc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        119,
                        0
                    ],
                    "type": "function",
                    "view": "function io.popen(prog: string, mode?: \"r\"|\"w\")\n  -> file*?\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    119,
                    17
                ],
                "name": "popen",
                "rawdesc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                "start": [
                    119,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.popen",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                130,
                                20
                            ],
                            "start": [
                                130,
                                17
                            ],
                            "type": "...",
                            "view": "string|integer|\"*L\"|\"*a\"|\"*l\"...(+1)"
                        }
                    ],
                    "desc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                    "finish": [
                        130,
                        25
                    ],
                    "rawdesc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        130,
                        0
                    ],
                    "type": "function",
                    "view": "function io.read(...string|integer|\"*L\"|\"*a\"|\"*l\"...(+1))\n  -> any\n  2. ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    130,
                    16
                ],
                "name": "read",
                "rawdesc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                "start": [
                    130,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.read",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                "extends": {
                    "args": [],
                    "desc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                    "finish": [
                        139,
                        25
                    ],
                    "rawdesc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*"
                        }
                    ],
                    "start": [
                        139,
                        0
                    ],
                    "type": "function",
                    "view": "function io.tmpfile()\n  -> file*"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    139,
                    19
                ],
                "name": "tmpfile",
                "rawdesc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                "start": [
                    139,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.tmpfile",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                154,
                                21
                            ],
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                154,
                                17
                            ],
                            "type": "local",
                            "view": "file*"
                        }
                    ],
                    "desc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                    "finish": [
                        154,
                        26
                    ],
                    "rawdesc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"closed file\"|\"file\"|`nil`"
                        }
                    ],
                    "start": [
                        154,
                        0
                    ],
                    "type": "function",
                    "view": "function io.type(file: file*)\n  -> \"closed file\"|\"file\"|`nil`"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    154,
                    16
                ],
                "name": "type",
                "rawdesc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                "start": [
                    154,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.type",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                163,
                                21
                            ],
                            "start": [
                                163,
                                18
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                    "finish": [
                        163,
                        26
                    ],
                    "rawdesc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        163,
                        0
                    ],
                    "type": "function",
                    "view": "function io.write(...any)\n  -> file*\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    163,
                    17
                ],
                "name": "write",
                "rawdesc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                "start": [
                    163,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.write",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    7,
                    15
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "iolib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                51,
                                22
                            ],
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                51,
                                18
                            ],
                            "type": "local",
                            "view": "file*?"
                        }
                    ],
                    "desc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "finish": [
                        51,
                        27
                    ],
                    "rawdesc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean?"
                        },
                        {
                            "name": "exitcode",
                            "type": "function.return",
                            "view": "(\"exit\"|\"signal\")?"
                        },
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": [
                        51,
                        0
                    ],
                    "type": "function",
                    "view": "function io.close(file?: file*)\n  -> suc: boolean?\n  2. exitcode: (\"exit\"|\"signal\")?\n  3. code: integer?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    51,
                    17
                ],
                "name": "close",
                "rawdesc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "start": [
                    51,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                "extends": {
                    "args": [],
                    "desc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                    "finish": [
                        58,
                        23
                    ],
                    "rawdesc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                    "start": [
                        58,
                        0
                    ],
                    "type": "function",
                    "view": "function io.flush()"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    58,
                    17
                ],
                "name": "flush",
                "rawdesc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                "start": [
                    58,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                67,
                                22
                            ],
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                67,
                                18
                            ],
                            "type": "local",
                            "view": "string|file*"
                        }
                    ],
                    "desc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                    "finish": [
                        67,
                        27
                    ],
                    "rawdesc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                    "start": [
                        67,
                        0
                    ],
                    "type": "function",
                    "view": "function io.input(file: string|file*)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    67,
                    17
                ],
                "name": "input",
                "rawdesc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                "start": [
                    67,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                83,
                                26
                            ],
                            "name": "filename",
                            "start": [
                                83,
                                18
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                83,
                                31
                            ],
                            "start": [
                                83,
                                28
                            ],
                            "type": "...",
                            "view": "string|integer|\"*L\"|\"*a\"|\"*l\"...(+1)"
                        }
                    ],
                    "desc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                    "finish": [
                        83,
                        36
                    ],
                    "rawdesc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():any, ...unknown"
                        }
                    ],
                    "start": [
                        83,
                        0
                    ],
                    "type": "function",
                    "view": "function io.lines(filename?: string, ...string|integer|\"*L\"|\"*a\"|\"*l\"...(+1))\n  -> fun():any, ...unknown"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    83,
                    17
                ],
                "name": "lines",
                "rawdesc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                "start": [
                    83,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                95,
                                25
                            ],
                            "name": "filename",
                            "start": [
                                95,
                                17
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                95,
                                31
                            ],
                            "name": "mode",
                            "start": [
                                95,
                                27
                            ],
                            "type": "local",
                            "view": "(\"a\"|\"a+\"|\"a+b\"|\"ab\"|\"r\"...(+7))?"
                        }
                    ],
                    "desc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                    "finish": [
                        95,
                        36
                    ],
                    "rawdesc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        95,
                        0
                    ],
                    "type": "function",
                    "view": "function io.open(filename: string, mode?: \"a\"|\"a+\"|\"a+b\"|\"ab\"|\"r\"...(+7))\n  -> file*?\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    95,
                    16
                ],
                "name": "open",
                "rawdesc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                "start": [
                    95,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                104,
                                23
                            ],
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                104,
                                19
                            ],
                            "type": "local",
                            "view": "string|file*"
                        }
                    ],
                    "desc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                    "finish": [
                        104,
                        28
                    ],
                    "rawdesc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                    "start": [
                        104,
                        0
                    ],
                    "type": "function",
                    "view": "function io.output(file: string|file*)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    104,
                    18
                ],
                "name": "output",
                "rawdesc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                "start": [
                    104,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                119,
                                22
                            ],
                            "name": "prog",
                            "start": [
                                119,
                                18
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                119,
                                28
                            ],
                            "name": "mode",
                            "start": [
                                119,
                                24
                            ],
                            "type": "local",
                            "view": "(\"r\"|\"w\")?"
                        }
                    ],
                    "desc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                    "finish": [
                        119,
                        33
                    ],
                    "rawdesc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        119,
                        0
                    ],
                    "type": "function",
                    "view": "function io.popen(prog: string, mode?: \"r\"|\"w\")\n  -> file*?\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    119,
                    17
                ],
                "name": "popen",
                "rawdesc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                "start": [
                    119,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                130,
                                20
                            ],
                            "start": [
                                130,
                                17
                            ],
                            "type": "...",
                            "view": "string|integer|\"*L\"|\"*a\"|\"*l\"...(+1)"
                        }
                    ],
                    "desc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                    "finish": [
                        130,
                        25
                    ],
                    "rawdesc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        130,
                        0
                    ],
                    "type": "function",
                    "view": "function io.read(...string|integer|\"*L\"|\"*a\"|\"*l\"...(+1))\n  -> any\n  2. ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    130,
                    16
                ],
                "name": "read",
                "rawdesc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                "start": [
                    130,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nstandard error.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.stderr\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                    "finish": [
                        25,
                        22
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                    "start": [
                        25,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                25,
                                22
                            ],
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                25,
                                17
                            ],
                            "type": "doc.type.name",
                            "view": "file*"
                        }
                    ],
                    "view": "file*"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    25,
                    22
                ],
                "name": "stderr",
                "rawdesc": "\nstandard error.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.stderr\"])\n",
                "start": [
                    25,
                    10
                ],
                "type": "doc.field",
                "view": "file*",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nstandard input.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.stdin\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                    "finish": [
                        13,
                        22
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                    "start": [
                        13,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                13,
                                22
                            ],
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                13,
                                17
                            ],
                            "type": "doc.type.name",
                            "view": "file*"
                        }
                    ],
                    "view": "file*"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    13,
                    22
                ],
                "name": "stdin",
                "rawdesc": "\nstandard input.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.stdin\"])\n",
                "start": [
                    13,
                    10
                ],
                "type": "doc.field",
                "view": "file*",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nstandard output.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.stdout\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                    "finish": [
                        19,
                        22
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                    "start": [
                        19,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                19,
                                22
                            ],
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                19,
                                17
                            ],
                            "type": "doc.type.name",
                            "view": "file*"
                        }
                    ],
                    "view": "file*"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    19,
                    22
                ],
                "name": "stdout",
                "rawdesc": "\nstandard output.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.stdout\"])\n",
                "start": [
                    19,
                    10
                ],
                "type": "doc.field",
                "view": "file*",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                "extends": {
                    "args": [],
                    "desc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                    "finish": [
                        139,
                        25
                    ],
                    "rawdesc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*"
                        }
                    ],
                    "start": [
                        139,
                        0
                    ],
                    "type": "function",
                    "view": "function io.tmpfile()\n  -> file*"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    139,
                    19
                ],
                "name": "tmpfile",
                "rawdesc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                "start": [
                    139,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                154,
                                21
                            ],
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                154,
                                17
                            ],
                            "type": "local",
                            "view": "file*"
                        }
                    ],
                    "desc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                    "finish": [
                        154,
                        26
                    ],
                    "rawdesc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"closed file\"|\"file\"|`nil`"
                        }
                    ],
                    "start": [
                        154,
                        0
                    ],
                    "type": "function",
                    "view": "function io.type(file: file*)\n  -> \"closed file\"|\"file\"|`nil`"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    154,
                    16
                ],
                "name": "type",
                "rawdesc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                "start": [
                    154,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                163,
                                21
                            ],
                            "start": [
                                163,
                                18
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                    "finish": [
                        163,
                        26
                    ],
                    "rawdesc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        163,
                        0
                    ],
                    "type": "function",
                    "view": "function io.write(...any)\n  -> file*\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/io.lua",
                "finish": [
                    163,
                    17
                ],
                "name": "write",
                "rawdesc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                "start": [
                    163,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "iolib",
        "type": "type",
        "view": "iolib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns three values (an iterator function, the table `t`, and `0`) so that the construction\n```lua\n    for i,v in ipairs(t) do body end\n```\nwill iterate over the key–value pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-ipairs\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                108,
                                17
                            ],
                            "name": "t",
                            "start": [
                                108,
                                16
                            ],
                            "type": "local",
                            "view": "<T:table>"
                        }
                    ],
                    "desc": "\nReturns three values (an iterator function, the table `t`, and `0`) so that the construction\n```lua\n    for i,v in ipairs(t) do body end\n```\nwill iterate over the key–value pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-ipairs\"])",
                    "finish": [
                        108,
                        22
                    ],
                    "rawdesc": "\nReturns three values (an iterator function, the table `t`, and `0`) so that the construction\n```lua\n    for i,v in ipairs(t) do body end\n```\nwill iterate over the key–value pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-ipairs\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(table: <V>[], i?: integer):integer, <V>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T:table>"
                        },
                        {
                            "name": "i",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        108,
                        0
                    ],
                    "type": "function",
                    "view": "function ipairs(t: <T:table>)\n  -> fun(table: <V>[], i?: integer):integer, <V>\n  2. <T:table>\n  3. i: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    108,
                    15
                ],
                "rawdesc": "\nReturns three values (an iterator function, the table `t`, and `0`) so that the construction\n```lua\n    for i,v in ipairs(t) do body end\n```\nwill iterate over the key–value pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-ipairs\"])",
                "start": [
                    108,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "ipairs",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        8,
                        8
                    ],
                    "start": [
                        8,
                        6
                    ],
                    "type": "table",
                    "view": "jitlib"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit.lua",
                "finish": [
                    8,
                    3
                ],
                "start": [
                    8,
                    0
                ],
                "type": "setglobal",
                "view": "jitlib",
                "visible": "public"
            }
        ],
        "name": "jit",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                26,
                                23
                            ],
                            "name": "func",
                            "start": [
                                26,
                                19
                            ],
                            "type": "local",
                            "view": "boolean|function"
                        },
                        {
                            "finish": [
                                26,
                                34
                            ],
                            "name": "recursive",
                            "start": [
                                26,
                                25
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "finish": [
                        27,
                        3
                    ],
                    "start": [
                        26,
                        0
                    ],
                    "type": "function",
                    "view": "function jit.flush(func: boolean|function, recursive?: boolean)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit.lua",
                "finish": [
                    26,
                    18
                ],
                "name": "flush",
                "start": [
                    26,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "jit.flush",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit/util.lua",
                "finish": [
                    26,
                    24
                ],
                "start": [
                    26,
                    10
                ],
                "type": "doc.class",
                "view": "jit.funcinfo.c",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        27,
                        26
                    ],
                    "start": [
                        27,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                27,
                                22
                            ],
                            "start": [
                                27,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                27,
                                26
                            ],
                            "start": [
                                27,
                                23
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "integer|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit/util.lua",
                "finish": [
                    27,
                    26
                ],
                "name": "ffid",
                "start": [
                    27,
                    10
                ],
                "type": "doc.field",
                "view": "integer|nil",
                "visible": "public"
            }
        ],
        "name": "jit.funcinfo.c",
        "type": "type",
        "view": "jit.funcinfo.c"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit/util.lua",
                "finish": [
                    7,
                    26
                ],
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "jit.funcinfo.lua",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "jit.funcinfo.lua",
        "type": "type",
        "view": "jit.funcinfo.lua"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                19,
                                21
                            ],
                            "name": "func",
                            "start": [
                                19,
                                17
                            ],
                            "type": "local",
                            "view": "boolean|function"
                        },
                        {
                            "finish": [
                                19,
                                32
                            ],
                            "name": "recursive",
                            "start": [
                                19,
                                23
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "finish": [
                        20,
                        3
                    ],
                    "start": [
                        19,
                        0
                    ],
                    "type": "function",
                    "view": "function jit.off(func: boolean|function, recursive?: boolean)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit.lua",
                "finish": [
                    19,
                    16
                ],
                "name": "off",
                "start": [
                    19,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "jit.off",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                13,
                                20
                            ],
                            "name": "func",
                            "start": [
                                13,
                                16
                            ],
                            "type": "local",
                            "view": "boolean|function"
                        },
                        {
                            "finish": [
                                13,
                                31
                            ],
                            "name": "recursive",
                            "start": [
                                13,
                                22
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "finish": [
                        14,
                        3
                    ],
                    "start": [
                        13,
                        0
                    ],
                    "type": "function",
                    "view": "function jit.on(func: boolean|function, recursive?: boolean)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit.lua",
                "finish": [
                    13,
                    15
                ],
                "name": "on",
                "start": [
                    13,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "jit.on",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        35,
                        12
                    ],
                    "start": [
                        35,
                        10
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit.lua",
                "finish": [
                    35,
                    7
                ],
                "name": "opt",
                "start": [
                    35,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "jit.opt",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "@*param* `...` — flags",
                "extends": {
                    "args": [
                        {
                            "desc": "flags",
                            "finish": [
                                38,
                                26
                            ],
                            "rawdesc": "flags",
                            "start": [
                                38,
                                23
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "@*param* `...` — flags",
                    "finish": [
                        39,
                        3
                    ],
                    "start": [
                        38,
                        0
                    ],
                    "type": "function",
                    "view": "function jit.opt.start(...any)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit.lua",
                "finish": [
                    38,
                    22
                ],
                "name": "start",
                "start": [
                    38,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "jit.opt.start",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            91,
                            28
                        ],
                        "start": [
                            91,
                            21
                        ],
                        "type": "doc.extends.name",
                        "view": "integer"
                    }
                ],
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit/util.lua",
                "finish": [
                    91,
                    28
                ],
                "start": [
                    91,
                    10
                ],
                "type": "doc.class",
                "view": "jit.snap",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "jit.snap",
        "type": "type",
        "view": "jit.snap"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [],
                    "finish": [
                        33,
                        3
                    ],
                    "returns": [
                        {
                            "name": "status",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        32,
                        0
                    ],
                    "type": "function",
                    "view": "function jit.status()\n  -> status: boolean\n  2. ...string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit.lua",
                "finish": [
                    32,
                    19
                ],
                "name": "status",
                "start": [
                    32,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "jit.status",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit/util.lua",
                "finish": [
                    59,
                    23
                ],
                "start": [
                    59,
                    10
                ],
                "type": "doc.class",
                "view": "jit.traceinfo",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "jit.traceinfo",
        "type": "type",
        "view": "jit.traceinfo"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit.lua",
                "finish": [
                    3,
                    16
                ],
                "start": [
                    3,
                    10
                ],
                "type": "doc.class",
                "view": "jitlib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        7,
                        124
                    ],
                    "start": [
                        7,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                7,
                                27
                            ],
                            "start": [
                                7,
                                22
                            ],
                            "type": "doc.type.string",
                            "view": "'x86'"
                        },
                        {
                            "finish": [
                                7,
                                33
                            ],
                            "start": [
                                7,
                                28
                            ],
                            "type": "doc.type.string",
                            "view": "'x64'"
                        },
                        {
                            "finish": [
                                7,
                                39
                            ],
                            "start": [
                                7,
                                34
                            ],
                            "type": "doc.type.string",
                            "view": "'arm'"
                        },
                        {
                            "finish": [
                                7,
                                47
                            ],
                            "start": [
                                7,
                                40
                            ],
                            "type": "doc.type.string",
                            "view": "'arm64'"
                        },
                        {
                            "finish": [
                                7,
                                57
                            ],
                            "start": [
                                7,
                                48
                            ],
                            "type": "doc.type.string",
                            "view": "'arm64be'"
                        },
                        {
                            "finish": [
                                7,
                                63
                            ],
                            "start": [
                                7,
                                58
                            ],
                            "type": "doc.type.string",
                            "view": "'ppc'"
                        },
                        {
                            "finish": [
                                7,
                                71
                            ],
                            "start": [
                                7,
                                64
                            ],
                            "type": "doc.type.string",
                            "view": "'ppc64'"
                        },
                        {
                            "finish": [
                                7,
                                81
                            ],
                            "start": [
                                7,
                                72
                            ],
                            "type": "doc.type.string",
                            "view": "'ppc64le'"
                        },
                        {
                            "finish": [
                                7,
                                88
                            ],
                            "start": [
                                7,
                                82
                            ],
                            "type": "doc.type.string",
                            "view": "'mips'"
                        },
                        {
                            "finish": [
                                7,
                                97
                            ],
                            "start": [
                                7,
                                89
                            ],
                            "type": "doc.type.string",
                            "view": "'mipsel'"
                        },
                        {
                            "finish": [
                                7,
                                106
                            ],
                            "start": [
                                7,
                                98
                            ],
                            "type": "doc.type.string",
                            "view": "'mips64'"
                        },
                        {
                            "finish": [
                                7,
                                117
                            ],
                            "start": [
                                7,
                                107
                            ],
                            "type": "doc.type.string",
                            "view": "'mips64el'"
                        },
                        {
                            "finish": [
                                7,
                                124
                            ],
                            "start": [
                                7,
                                118
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|'arm'|'arm64'|'arm64be'|'mips'...(+8)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit.lua",
                "finish": [
                    7,
                    124
                ],
                "name": "arch",
                "start": [
                    7,
                    10
                ],
                "type": "doc.field",
                "view": "string|'arm'|'arm64'|'arm64be'|'mips'...(+8)",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                26,
                                23
                            ],
                            "name": "func",
                            "start": [
                                26,
                                19
                            ],
                            "type": "local",
                            "view": "boolean|function"
                        },
                        {
                            "finish": [
                                26,
                                34
                            ],
                            "name": "recursive",
                            "start": [
                                26,
                                25
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "finish": [
                        27,
                        3
                    ],
                    "start": [
                        26,
                        0
                    ],
                    "type": "function",
                    "view": "function jit.flush(func: boolean|function, recursive?: boolean)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit.lua",
                "finish": [
                    26,
                    18
                ],
                "name": "flush",
                "start": [
                    26,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                19,
                                21
                            ],
                            "name": "func",
                            "start": [
                                19,
                                17
                            ],
                            "type": "local",
                            "view": "boolean|function"
                        },
                        {
                            "finish": [
                                19,
                                32
                            ],
                            "name": "recursive",
                            "start": [
                                19,
                                23
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "finish": [
                        20,
                        3
                    ],
                    "start": [
                        19,
                        0
                    ],
                    "type": "function",
                    "view": "function jit.off(func: boolean|function, recursive?: boolean)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit.lua",
                "finish": [
                    19,
                    16
                ],
                "name": "off",
                "start": [
                    19,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                13,
                                20
                            ],
                            "name": "func",
                            "start": [
                                13,
                                16
                            ],
                            "type": "local",
                            "view": "boolean|function"
                        },
                        {
                            "finish": [
                                13,
                                31
                            ],
                            "name": "recursive",
                            "start": [
                                13,
                                22
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "finish": [
                        14,
                        3
                    ],
                    "start": [
                        13,
                        0
                    ],
                    "type": "function",
                    "view": "function jit.on(func: boolean|function, recursive?: boolean)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit.lua",
                "finish": [
                    13,
                    15
                ],
                "name": "on",
                "start": [
                    13,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        35,
                        12
                    ],
                    "start": [
                        35,
                        10
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit.lua",
                "finish": [
                    35,
                    7
                ],
                "name": "opt",
                "start": [
                    35,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        6,
                        67
                    ],
                    "start": [
                        6,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                6,
                                31
                            ],
                            "start": [
                                6,
                                22
                            ],
                            "type": "doc.type.string",
                            "view": "'Windows'"
                        },
                        {
                            "finish": [
                                6,
                                39
                            ],
                            "start": [
                                6,
                                32
                            ],
                            "type": "doc.type.string",
                            "view": "'Linux'"
                        },
                        {
                            "finish": [
                                6,
                                45
                            ],
                            "start": [
                                6,
                                40
                            ],
                            "type": "doc.type.string",
                            "view": "'OSX'"
                        },
                        {
                            "finish": [
                                6,
                                51
                            ],
                            "start": [
                                6,
                                46
                            ],
                            "type": "doc.type.string",
                            "view": "'BSD'"
                        },
                        {
                            "finish": [
                                6,
                                59
                            ],
                            "start": [
                                6,
                                52
                            ],
                            "type": "doc.type.string",
                            "view": "'POSIX'"
                        },
                        {
                            "finish": [
                                6,
                                67
                            ],
                            "start": [
                                6,
                                60
                            ],
                            "type": "doc.type.string",
                            "view": "'Other'"
                        }
                    ],
                    "view": "'BSD'|'Linux'|'OSX'|'Other'|'POSIX'...(+1)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit.lua",
                "finish": [
                    6,
                    67
                ],
                "name": "os",
                "start": [
                    6,
                    10
                ],
                "type": "doc.field",
                "view": "'BSD'|'Linux'|'OSX'|'Other'|'POSIX'...(+1)",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [],
                    "finish": [
                        33,
                        3
                    ],
                    "returns": [
                        {
                            "name": "status",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        32,
                        0
                    ],
                    "type": "function",
                    "view": "function jit.status()\n  -> status: boolean\n  2. ...string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit.lua",
                "finish": [
                    32,
                    19
                ],
                "name": "status",
                "start": [
                    32,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        4,
                        28
                    ],
                    "start": [
                        4,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                4,
                                28
                            ],
                            "start": [
                                4,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit.lua",
                "finish": [
                    4,
                    28
                ],
                "name": "version",
                "start": [
                    4,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        5,
                        28
                    ],
                    "start": [
                        5,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                5,
                                28
                            ],
                            "start": [
                                5,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "number"
                        }
                    ],
                    "view": "number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/jit.lua",
                "finish": [
                    5,
                    28
                ],
                "name": "version_num",
                "start": [
                    5,
                    10
                ],
                "type": "doc.field",
                "view": "number",
                "visible": "public"
            }
        ],
        "name": "jitlib",
        "type": "type",
        "view": "jitlib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/builtin.lua",
                "finish": [
                    14,
                    23
                ],
                "start": [
                    14,
                    10
                ],
                "type": "doc.class",
                "view": "lightuserdata",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "lightuserdata",
        "type": "type",
        "view": "lightuserdata"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nLoads a chunk.\n\nIf `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-load\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                130,
                                19
                            ],
                            "name": "chunk",
                            "start": [
                                130,
                                14
                            ],
                            "type": "local",
                            "view": "string|function"
                        },
                        {
                            "finish": [
                                130,
                                30
                            ],
                            "name": "chunkname",
                            "start": [
                                130,
                                21
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                130,
                                36
                            ],
                            "name": "mode",
                            "start": [
                                130,
                                32
                            ],
                            "type": "local",
                            "view": "(\"b\"|\"bt\"|\"t\")?"
                        },
                        {
                            "finish": [
                                130,
                                41
                            ],
                            "name": "env",
                            "start": [
                                130,
                                38
                            ],
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nLoads a chunk.\n\nIf `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-load\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                    "finish": [
                        130,
                        46
                    ],
                    "rawdesc": "\nLoads a chunk.\n\nIf `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-load\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function?"
                        },
                        {
                            "name": "error_message",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        130,
                        0
                    ],
                    "type": "function",
                    "view": "function load(chunk: string|function, chunkname?: string, mode?: \"b\"|\"bt\"|\"t\", env?: table)\n  -> function?\n  2. error_message: string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    130,
                    13
                ],
                "rawdesc": "\nLoads a chunk.\n\nIf `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-load\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                "start": [
                    130,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "load",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nLoads a chunk from file `filename` or from the standard input, if no file name is given.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadfile\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                143,
                                26
                            ],
                            "name": "filename",
                            "start": [
                                143,
                                18
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                143,
                                32
                            ],
                            "name": "mode",
                            "start": [
                                143,
                                28
                            ],
                            "type": "local",
                            "view": "(\"b\"|\"bt\"|\"t\")?"
                        },
                        {
                            "finish": [
                                143,
                                37
                            ],
                            "name": "env",
                            "start": [
                                143,
                                34
                            ],
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nLoads a chunk from file `filename` or from the standard input, if no file name is given.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadfile\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                    "finish": [
                        143,
                        42
                    ],
                    "rawdesc": "\nLoads a chunk from file `filename` or from the standard input, if no file name is given.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadfile\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function?"
                        },
                        {
                            "name": "error_message",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        143,
                        0
                    ],
                    "type": "function",
                    "view": "function loadfile(filename?: string, mode?: \"b\"|\"bt\"|\"t\", env?: table)\n  -> function?\n  2. error_message: string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    143,
                    17
                ],
                "rawdesc": "\nLoads a chunk from file `filename` or from the standard input, if no file name is given.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadfile\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                "start": [
                    143,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "loadfile",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "```lua\nloadmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                "finish": [
                    113,
                    9
                ],
                "rawdesc": "```lua\nloadmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                "start": [
                    110,
                    10
                ],
                "type": "doc.alias",
                "view": "\"b\"|\"bt\"|\"t\""
            }
        ],
        "fields": [],
        "name": "loadmode",
        "type": "type",
        "view": "loadmode"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nLoads a chunk from the given string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadstring\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                156,
                                24
                            ],
                            "name": "text",
                            "start": [
                                156,
                                20
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                156,
                                35
                            ],
                            "name": "chunkname",
                            "start": [
                                156,
                                26
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nLoads a chunk from the given string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadstring\"])",
                    "finish": [
                        156,
                        40
                    ],
                    "rawdesc": "\nLoads a chunk from the given string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadstring\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function?"
                        },
                        {
                            "name": "error_message",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        156,
                        0
                    ],
                    "type": "function",
                    "view": "function loadstring(text: string, chunkname?: string)\n  -> function?\n  2. error_message: string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    156,
                    19
                ],
                "rawdesc": "\nLoads a chunk from the given string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadstring\"])",
                "start": [
                    156,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "loadstring",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "```lua\nlocalecategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                "finish": [
                    154,
                    11
                ],
                "rawdesc": "```lua\nlocalecategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                "start": [
                    148,
                    10
                ],
                "type": "doc.alias",
                "view": "\"all\"|\"collate\"|\"ctype\"|\"monetary\"|\"numeric\"...(+1)"
            }
        ],
        "fields": [],
        "name": "localecategory",
        "type": "type",
        "view": "localecategory"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
                    "finish": [
                        20,
                        9
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
                    "start": [
                        20,
                        7
                    ],
                    "type": "table",
                    "view": "mathlib"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    20,
                    4
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
                "start": [
                    20,
                    0
                ],
                "type": "setglobal",
                "view": "mathlib",
                "visible": "public"
            }
        ],
        "name": "math",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                31,
                                19
                            ],
                            "name": "x",
                            "start": [
                                31,
                                18
                            ],
                            "type": "local",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                    "finish": [
                        31,
                        24
                    ],
                    "rawdesc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": [
                        31,
                        0
                    ],
                    "type": "function",
                    "view": "function math.abs(x: <Number:number>)\n  -> <Number:number>"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    31,
                    17
                ],
                "name": "abs",
                "rawdesc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                "start": [
                    31,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.abs",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                41,
                                20
                            ],
                            "name": "x",
                            "start": [
                                41,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                    "finish": [
                        41,
                        25
                    ],
                    "rawdesc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        41,
                        0
                    ],
                    "type": "function",
                    "view": "function math.acos(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    41,
                    18
                ],
                "name": "acos",
                "rawdesc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                "start": [
                    41,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.acos",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                51,
                                20
                            ],
                            "name": "x",
                            "start": [
                                51,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                    "finish": [
                        51,
                        25
                    ],
                    "rawdesc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        51,
                        0
                    ],
                    "type": "function",
                    "view": "function math.asin(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    51,
                    18
                ],
                "name": "asin",
                "rawdesc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                "start": [
                    51,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.asin",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the arc tangent of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                61,
                                20
                            ],
                            "name": "y",
                            "start": [
                                61,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc tangent of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                    "finish": [
                        61,
                        25
                    ],
                    "rawdesc": "\nReturns the arc tangent of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        61,
                        0
                    ],
                    "type": "function",
                    "view": "function math.atan(y: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    61,
                    18
                ],
                "name": "atan",
                "rawdesc": "\nReturns the arc tangent of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                "start": [
                    61,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.atan",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                73,
                                21
                            ],
                            "name": "y",
                            "start": [
                                73,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                73,
                                24
                            ],
                            "name": "x",
                            "start": [
                                73,
                                23
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                    "finish": [
                        73,
                        29
                    ],
                    "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        73,
                        0
                    ],
                    "type": "function",
                    "view": "function math.atan2(y: number, x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    73,
                    19
                ],
                "name": "atan2",
                "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                "start": [
                    73,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.atan2",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                83,
                                20
                            ],
                            "name": "x",
                            "start": [
                                83,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                    "finish": [
                        83,
                        25
                    ],
                    "rawdesc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        83,
                        0
                    ],
                    "type": "function",
                    "view": "function math.ceil(x: number)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    83,
                    18
                ],
                "name": "ceil",
                "rawdesc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                "start": [
                    83,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.ceil",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                93,
                                19
                            ],
                            "name": "x",
                            "start": [
                                93,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                    "finish": [
                        93,
                        24
                    ],
                    "rawdesc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        93,
                        0
                    ],
                    "type": "function",
                    "view": "function math.cos(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    93,
                    17
                ],
                "name": "cos",
                "rawdesc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                "start": [
                    93,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.cos",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                104,
                                20
                            ],
                            "name": "x",
                            "start": [
                                104,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                    "finish": [
                        104,
                        25
                    ],
                    "rawdesc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        104,
                        0
                    ],
                    "type": "function",
                    "view": "function math.cosh(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    104,
                    18
                ],
                "name": "cosh",
                "rawdesc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                "start": [
                    104,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.cosh",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                114,
                                19
                            ],
                            "name": "x",
                            "start": [
                                114,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                    "finish": [
                        114,
                        24
                    ],
                    "rawdesc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        114,
                        0
                    ],
                    "type": "function",
                    "view": "function math.deg(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    114,
                    17
                ],
                "name": "deg",
                "rawdesc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                "start": [
                    114,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.deg",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                124,
                                19
                            ],
                            "name": "x",
                            "start": [
                                124,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                    "finish": [
                        124,
                        24
                    ],
                    "rawdesc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        124,
                        0
                    ],
                    "type": "function",
                    "view": "function math.exp(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    124,
                    17
                ],
                "name": "exp",
                "rawdesc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                "start": [
                    124,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.exp",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                134,
                                21
                            ],
                            "name": "x",
                            "start": [
                                134,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                    "finish": [
                        134,
                        26
                    ],
                    "rawdesc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        134,
                        0
                    ],
                    "type": "function",
                    "view": "function math.floor(x: number)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    134,
                    19
                ],
                "name": "floor",
                "rawdesc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                "start": [
                    134,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.floor",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                145,
                                20
                            ],
                            "name": "x",
                            "start": [
                                145,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                145,
                                23
                            ],
                            "name": "y",
                            "start": [
                                145,
                                22
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                    "finish": [
                        145,
                        28
                    ],
                    "rawdesc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        145,
                        0
                    ],
                    "type": "function",
                    "view": "function math.fmod(x: number, y: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    145,
                    18
                ],
                "name": "fmod",
                "rawdesc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                "start": [
                    145,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.fmod",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                157,
                                21
                            ],
                            "name": "x",
                            "start": [
                                157,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                    "finish": [
                        157,
                        26
                    ],
                    "rawdesc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                    "returns": [
                        {
                            "name": "m",
                            "type": "function.return",
                            "view": "number"
                        },
                        {
                            "name": "e",
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        157,
                        0
                    ],
                    "type": "function",
                    "view": "function math.frexp(x: number)\n  -> m: number\n  2. e: number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    157,
                    19
                ],
                "name": "frexp",
                "rawdesc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                "start": [
                    157,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.frexp",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                169,
                                21
                            ],
                            "name": "m",
                            "start": [
                                169,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                169,
                                24
                            ],
                            "name": "e",
                            "start": [
                                169,
                                23
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                    "finish": [
                        169,
                        29
                    ],
                    "rawdesc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        169,
                        0
                    ],
                    "type": "function",
                    "view": "function math.ldexp(m: number, e: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    169,
                    19
                ],
                "name": "ldexp",
                "rawdesc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                "start": [
                    169,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.ldexp",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                180,
                                19
                            ],
                            "name": "x",
                            "start": [
                                180,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                180,
                                25
                            ],
                            "name": "base",
                            "start": [
                                180,
                                21
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                    "finish": [
                        180,
                        30
                    ],
                    "rawdesc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        180,
                        0
                    ],
                    "type": "function",
                    "view": "function math.log(x: number, base?: integer)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    180,
                    17
                ],
                "name": "log",
                "rawdesc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                "start": [
                    180,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.log",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                191,
                                21
                            ],
                            "name": "x",
                            "start": [
                                191,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                    "finish": [
                        191,
                        26
                    ],
                    "rawdesc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        191,
                        0
                    ],
                    "type": "function",
                    "view": "function math.log10(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    191,
                    19
                ],
                "name": "log10",
                "rawdesc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                "start": [
                    191,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.log10",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                203,
                                19
                            ],
                            "name": "x",
                            "start": [
                                203,
                                18
                            ],
                            "type": "local",
                            "view": "<Number:number>"
                        },
                        {
                            "finish": [
                                203,
                                24
                            ],
                            "start": [
                                203,
                                21
                            ],
                            "type": "...",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                    "finish": [
                        203,
                        29
                    ],
                    "rawdesc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": [
                        203,
                        0
                    ],
                    "type": "function",
                    "view": "function math.max(x: <Number:number>, ...<Number:number>)\n  -> <Number:number>"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    203,
                    17
                ],
                "name": "max",
                "rawdesc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                "start": [
                    203,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.max",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                215,
                                19
                            ],
                            "name": "x",
                            "start": [
                                215,
                                18
                            ],
                            "type": "local",
                            "view": "<Number:number>"
                        },
                        {
                            "finish": [
                                215,
                                24
                            ],
                            "start": [
                                215,
                                21
                            ],
                            "type": "...",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                    "finish": [
                        215,
                        29
                    ],
                    "rawdesc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": [
                        215,
                        0
                    ],
                    "type": "function",
                    "view": "function math.min(x: <Number:number>, ...<Number:number>)\n  -> <Number:number>"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    215,
                    17
                ],
                "name": "min",
                "rawdesc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                "start": [
                    215,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.min",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                226,
                                20
                            ],
                            "name": "x",
                            "start": [
                                226,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                    "finish": [
                        226,
                        25
                    ],
                    "rawdesc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        226,
                        0
                    ],
                    "type": "function",
                    "view": "function math.modf(x: number)\n  -> integer\n  2. number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    226,
                    18
                ],
                "name": "modf",
                "rawdesc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                "start": [
                    226,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.modf",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                238,
                                19
                            ],
                            "name": "x",
                            "start": [
                                238,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                238,
                                22
                            ],
                            "name": "y",
                            "start": [
                                238,
                                21
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                    "finish": [
                        238,
                        27
                    ],
                    "rawdesc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        238,
                        0
                    ],
                    "type": "function",
                    "view": "function math.pow(x: number, y: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    238,
                    17
                ],
                "name": "pow",
                "rawdesc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                "start": [
                    238,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.pow",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                248,
                                19
                            ],
                            "name": "x",
                            "start": [
                                248,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                    "finish": [
                        248,
                        24
                    ],
                    "rawdesc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        248,
                        0
                    ],
                    "type": "function",
                    "view": "function math.rad(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    248,
                    17
                ],
                "name": "rad",
                "rawdesc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                "start": [
                    248,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.rad",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                264,
                                22
                            ],
                            "name": "m",
                            "start": [
                                264,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                264,
                                25
                            ],
                            "name": "n",
                            "start": [
                                264,
                                24
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                    "finish": [
                        264,
                        30
                    ],
                    "rawdesc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        264,
                        0
                    ],
                    "type": "function",
                    "view": "function math.random(m: integer, n: integer)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    264,
                    20
                ],
                "name": "random",
                "rawdesc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                "start": [
                    264,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.random",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets `x` as the \"seed\" for the pseudo-random generator.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                272,
                                26
                            ],
                            "name": "x",
                            "start": [
                                272,
                                25
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nSets `x` as the \"seed\" for the pseudo-random generator.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                    "finish": [
                        272,
                        31
                    ],
                    "rawdesc": "\nSets `x` as the \"seed\" for the pseudo-random generator.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                    "start": [
                        272,
                        0
                    ],
                    "type": "function",
                    "view": "function math.randomseed(x: integer)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    272,
                    24
                ],
                "name": "randomseed",
                "rawdesc": "\nSets `x` as the \"seed\" for the pseudo-random generator.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                "start": [
                    272,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.randomseed",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                282,
                                19
                            ],
                            "name": "x",
                            "start": [
                                282,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                    "finish": [
                        282,
                        24
                    ],
                    "rawdesc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        282,
                        0
                    ],
                    "type": "function",
                    "view": "function math.sin(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    282,
                    17
                ],
                "name": "sin",
                "rawdesc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                "start": [
                    282,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.sin",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                293,
                                20
                            ],
                            "name": "x",
                            "start": [
                                293,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                    "finish": [
                        293,
                        25
                    ],
                    "rawdesc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        293,
                        0
                    ],
                    "type": "function",
                    "view": "function math.sinh(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    293,
                    18
                ],
                "name": "sinh",
                "rawdesc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                "start": [
                    293,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.sinh",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                303,
                                20
                            ],
                            "name": "x",
                            "start": [
                                303,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                    "finish": [
                        303,
                        25
                    ],
                    "rawdesc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        303,
                        0
                    ],
                    "type": "function",
                    "view": "function math.sqrt(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    303,
                    18
                ],
                "name": "sqrt",
                "rawdesc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                "start": [
                    303,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.sqrt",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                313,
                                19
                            ],
                            "name": "x",
                            "start": [
                                313,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                    "finish": [
                        313,
                        24
                    ],
                    "rawdesc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        313,
                        0
                    ],
                    "type": "function",
                    "view": "function math.tan(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    313,
                    17
                ],
                "name": "tan",
                "rawdesc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                "start": [
                    313,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.tan",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                324,
                                20
                            ],
                            "name": "x",
                            "start": [
                                324,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                    "finish": [
                        324,
                        25
                    ],
                    "rawdesc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        324,
                        0
                    ],
                    "type": "function",
                    "view": "function math.tanh(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    324,
                    18
                ],
                "name": "tanh",
                "rawdesc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                "start": [
                    324,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.tanh",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                335,
                                25
                            ],
                            "name": "x",
                            "start": [
                                335,
                                24
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                    "finish": [
                        335,
                        30
                    ],
                    "rawdesc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": [
                        335,
                        0
                    ],
                    "type": "function",
                    "view": "function math.tointeger(x: any)\n  -> integer?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    335,
                    23
                ],
                "name": "tointeger",
                "rawdesc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                "start": [
                    335,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.tointeger",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                349,
                                20
                            ],
                            "name": "x",
                            "start": [
                                349,
                                19
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                    "finish": [
                        349,
                        25
                    ],
                    "rawdesc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"float\"|\"integer\"|'nil'"
                        }
                    ],
                    "start": [
                        349,
                        0
                    ],
                    "type": "function",
                    "view": "function math.type(x: any)\n  -> \"float\"|\"integer\"|'nil'"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    349,
                    18
                ],
                "name": "type",
                "rawdesc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                "start": [
                    349,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.type",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                361,
                                19
                            ],
                            "name": "m",
                            "start": [
                                361,
                                18
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                361,
                                22
                            ],
                            "name": "n",
                            "start": [
                                361,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                    "finish": [
                        361,
                        27
                    ],
                    "rawdesc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        361,
                        0
                    ],
                    "type": "function",
                    "view": "function math.ult(m: integer, n: integer)\n  -> boolean"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    361,
                    17
                ],
                "name": "ult",
                "rawdesc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                "start": [
                    361,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.ult",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    7,
                    17
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "mathlib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                31,
                                19
                            ],
                            "name": "x",
                            "start": [
                                31,
                                18
                            ],
                            "type": "local",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                    "finish": [
                        31,
                        24
                    ],
                    "rawdesc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": [
                        31,
                        0
                    ],
                    "type": "function",
                    "view": "function math.abs(x: <Number:number>)\n  -> <Number:number>"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    31,
                    17
                ],
                "name": "abs",
                "rawdesc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                "start": [
                    31,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                41,
                                20
                            ],
                            "name": "x",
                            "start": [
                                41,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                    "finish": [
                        41,
                        25
                    ],
                    "rawdesc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        41,
                        0
                    ],
                    "type": "function",
                    "view": "function math.acos(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    41,
                    18
                ],
                "name": "acos",
                "rawdesc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                "start": [
                    41,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                51,
                                20
                            ],
                            "name": "x",
                            "start": [
                                51,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                    "finish": [
                        51,
                        25
                    ],
                    "rawdesc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        51,
                        0
                    ],
                    "type": "function",
                    "view": "function math.asin(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    51,
                    18
                ],
                "name": "asin",
                "rawdesc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                "start": [
                    51,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the arc tangent of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                61,
                                20
                            ],
                            "name": "y",
                            "start": [
                                61,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc tangent of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                    "finish": [
                        61,
                        25
                    ],
                    "rawdesc": "\nReturns the arc tangent of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        61,
                        0
                    ],
                    "type": "function",
                    "view": "function math.atan(y: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    61,
                    18
                ],
                "name": "atan",
                "rawdesc": "\nReturns the arc tangent of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                "start": [
                    61,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                73,
                                21
                            ],
                            "name": "y",
                            "start": [
                                73,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                73,
                                24
                            ],
                            "name": "x",
                            "start": [
                                73,
                                23
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                    "finish": [
                        73,
                        29
                    ],
                    "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        73,
                        0
                    ],
                    "type": "function",
                    "view": "function math.atan2(y: number, x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    73,
                    19
                ],
                "name": "atan2",
                "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                "start": [
                    73,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                83,
                                20
                            ],
                            "name": "x",
                            "start": [
                                83,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                    "finish": [
                        83,
                        25
                    ],
                    "rawdesc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        83,
                        0
                    ],
                    "type": "function",
                    "view": "function math.ceil(x: number)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    83,
                    18
                ],
                "name": "ceil",
                "rawdesc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                "start": [
                    83,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                93,
                                19
                            ],
                            "name": "x",
                            "start": [
                                93,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                    "finish": [
                        93,
                        24
                    ],
                    "rawdesc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        93,
                        0
                    ],
                    "type": "function",
                    "view": "function math.cos(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    93,
                    17
                ],
                "name": "cos",
                "rawdesc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                "start": [
                    93,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                104,
                                20
                            ],
                            "name": "x",
                            "start": [
                                104,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                    "finish": [
                        104,
                        25
                    ],
                    "rawdesc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        104,
                        0
                    ],
                    "type": "function",
                    "view": "function math.cosh(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    104,
                    18
                ],
                "name": "cosh",
                "rawdesc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                "start": [
                    104,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                114,
                                19
                            ],
                            "name": "x",
                            "start": [
                                114,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                    "finish": [
                        114,
                        24
                    ],
                    "rawdesc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        114,
                        0
                    ],
                    "type": "function",
                    "view": "function math.deg(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    114,
                    17
                ],
                "name": "deg",
                "rawdesc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                "start": [
                    114,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                124,
                                19
                            ],
                            "name": "x",
                            "start": [
                                124,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                    "finish": [
                        124,
                        24
                    ],
                    "rawdesc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        124,
                        0
                    ],
                    "type": "function",
                    "view": "function math.exp(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    124,
                    17
                ],
                "name": "exp",
                "rawdesc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                "start": [
                    124,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                134,
                                21
                            ],
                            "name": "x",
                            "start": [
                                134,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                    "finish": [
                        134,
                        26
                    ],
                    "rawdesc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        134,
                        0
                    ],
                    "type": "function",
                    "view": "function math.floor(x: number)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    134,
                    19
                ],
                "name": "floor",
                "rawdesc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                "start": [
                    134,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                145,
                                20
                            ],
                            "name": "x",
                            "start": [
                                145,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                145,
                                23
                            ],
                            "name": "y",
                            "start": [
                                145,
                                22
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                    "finish": [
                        145,
                        28
                    ],
                    "rawdesc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        145,
                        0
                    ],
                    "type": "function",
                    "view": "function math.fmod(x: number, y: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    145,
                    18
                ],
                "name": "fmod",
                "rawdesc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                "start": [
                    145,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                157,
                                21
                            ],
                            "name": "x",
                            "start": [
                                157,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                    "finish": [
                        157,
                        26
                    ],
                    "rawdesc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                    "returns": [
                        {
                            "name": "m",
                            "type": "function.return",
                            "view": "number"
                        },
                        {
                            "name": "e",
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        157,
                        0
                    ],
                    "type": "function",
                    "view": "function math.frexp(x: number)\n  -> m: number\n  2. e: number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    157,
                    19
                ],
                "name": "frexp",
                "rawdesc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                "start": [
                    157,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA value larger than any other numeric value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.huge\"])\n",
                "extends": {
                    "finish": [
                        13,
                        27
                    ],
                    "start": [
                        13,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                13,
                                27
                            ],
                            "start": [
                                13,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "number"
                        }
                    ],
                    "view": "number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    13,
                    27
                ],
                "name": "huge",
                "rawdesc": "\nA value larger than any other numeric value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.huge\"])\n",
                "start": [
                    13,
                    10
                ],
                "type": "doc.field",
                "view": "number",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                169,
                                21
                            ],
                            "name": "m",
                            "start": [
                                169,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                169,
                                24
                            ],
                            "name": "e",
                            "start": [
                                169,
                                23
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                    "finish": [
                        169,
                        29
                    ],
                    "rawdesc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        169,
                        0
                    ],
                    "type": "function",
                    "view": "function math.ldexp(m: number, e: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    169,
                    19
                ],
                "name": "ldexp",
                "rawdesc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                "start": [
                    169,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                180,
                                19
                            ],
                            "name": "x",
                            "start": [
                                180,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                180,
                                25
                            ],
                            "name": "base",
                            "start": [
                                180,
                                21
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                    "finish": [
                        180,
                        30
                    ],
                    "rawdesc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        180,
                        0
                    ],
                    "type": "function",
                    "view": "function math.log(x: number, base?: integer)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    180,
                    17
                ],
                "name": "log",
                "rawdesc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                "start": [
                    180,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                191,
                                21
                            ],
                            "name": "x",
                            "start": [
                                191,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                    "finish": [
                        191,
                        26
                    ],
                    "rawdesc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        191,
                        0
                    ],
                    "type": "function",
                    "view": "function math.log10(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    191,
                    19
                ],
                "name": "log10",
                "rawdesc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                "start": [
                    191,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                203,
                                19
                            ],
                            "name": "x",
                            "start": [
                                203,
                                18
                            ],
                            "type": "local",
                            "view": "<Number:number>"
                        },
                        {
                            "finish": [
                                203,
                                24
                            ],
                            "start": [
                                203,
                                21
                            ],
                            "type": "...",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                    "finish": [
                        203,
                        29
                    ],
                    "rawdesc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": [
                        203,
                        0
                    ],
                    "type": "function",
                    "view": "function math.max(x: <Number:number>, ...<Number:number>)\n  -> <Number:number>"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    203,
                    17
                ],
                "name": "max",
                "rawdesc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                "start": [
                    203,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                215,
                                19
                            ],
                            "name": "x",
                            "start": [
                                215,
                                18
                            ],
                            "type": "local",
                            "view": "<Number:number>"
                        },
                        {
                            "finish": [
                                215,
                                24
                            ],
                            "start": [
                                215,
                                21
                            ],
                            "type": "...",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                    "finish": [
                        215,
                        29
                    ],
                    "rawdesc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": [
                        215,
                        0
                    ],
                    "type": "function",
                    "view": "function math.min(x: <Number:number>, ...<Number:number>)\n  -> <Number:number>"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    215,
                    17
                ],
                "name": "min",
                "rawdesc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                "start": [
                    215,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                226,
                                20
                            ],
                            "name": "x",
                            "start": [
                                226,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                    "finish": [
                        226,
                        25
                    ],
                    "rawdesc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        226,
                        0
                    ],
                    "type": "function",
                    "view": "function math.modf(x: number)\n  -> integer\n  2. number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    226,
                    18
                ],
                "name": "modf",
                "rawdesc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                "start": [
                    226,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nThe value of *π*.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pi\"])\n",
                "extends": {
                    "finish": [
                        19,
                        27
                    ],
                    "start": [
                        19,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                19,
                                27
                            ],
                            "start": [
                                19,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "number"
                        }
                    ],
                    "view": "number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    19,
                    27
                ],
                "name": "pi",
                "rawdesc": "\nThe value of *π*.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pi\"])\n",
                "start": [
                    19,
                    10
                ],
                "type": "doc.field",
                "view": "number",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                238,
                                19
                            ],
                            "name": "x",
                            "start": [
                                238,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                238,
                                22
                            ],
                            "name": "y",
                            "start": [
                                238,
                                21
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                    "finish": [
                        238,
                        27
                    ],
                    "rawdesc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        238,
                        0
                    ],
                    "type": "function",
                    "view": "function math.pow(x: number, y: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    238,
                    17
                ],
                "name": "pow",
                "rawdesc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                "start": [
                    238,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                248,
                                19
                            ],
                            "name": "x",
                            "start": [
                                248,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                    "finish": [
                        248,
                        24
                    ],
                    "rawdesc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        248,
                        0
                    ],
                    "type": "function",
                    "view": "function math.rad(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    248,
                    17
                ],
                "name": "rad",
                "rawdesc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                "start": [
                    248,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                264,
                                22
                            ],
                            "name": "m",
                            "start": [
                                264,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                264,
                                25
                            ],
                            "name": "n",
                            "start": [
                                264,
                                24
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                    "finish": [
                        264,
                        30
                    ],
                    "rawdesc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        264,
                        0
                    ],
                    "type": "function",
                    "view": "function math.random(m: integer, n: integer)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    264,
                    20
                ],
                "name": "random",
                "rawdesc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                "start": [
                    264,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets `x` as the \"seed\" for the pseudo-random generator.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                272,
                                26
                            ],
                            "name": "x",
                            "start": [
                                272,
                                25
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nSets `x` as the \"seed\" for the pseudo-random generator.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                    "finish": [
                        272,
                        31
                    ],
                    "rawdesc": "\nSets `x` as the \"seed\" for the pseudo-random generator.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                    "start": [
                        272,
                        0
                    ],
                    "type": "function",
                    "view": "function math.randomseed(x: integer)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    272,
                    24
                ],
                "name": "randomseed",
                "rawdesc": "\nSets `x` as the \"seed\" for the pseudo-random generator.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                "start": [
                    272,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                282,
                                19
                            ],
                            "name": "x",
                            "start": [
                                282,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                    "finish": [
                        282,
                        24
                    ],
                    "rawdesc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        282,
                        0
                    ],
                    "type": "function",
                    "view": "function math.sin(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    282,
                    17
                ],
                "name": "sin",
                "rawdesc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                "start": [
                    282,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                293,
                                20
                            ],
                            "name": "x",
                            "start": [
                                293,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                    "finish": [
                        293,
                        25
                    ],
                    "rawdesc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        293,
                        0
                    ],
                    "type": "function",
                    "view": "function math.sinh(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    293,
                    18
                ],
                "name": "sinh",
                "rawdesc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                "start": [
                    293,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                303,
                                20
                            ],
                            "name": "x",
                            "start": [
                                303,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                    "finish": [
                        303,
                        25
                    ],
                    "rawdesc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        303,
                        0
                    ],
                    "type": "function",
                    "view": "function math.sqrt(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    303,
                    18
                ],
                "name": "sqrt",
                "rawdesc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                "start": [
                    303,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                313,
                                19
                            ],
                            "name": "x",
                            "start": [
                                313,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                    "finish": [
                        313,
                        24
                    ],
                    "rawdesc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        313,
                        0
                    ],
                    "type": "function",
                    "view": "function math.tan(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    313,
                    17
                ],
                "name": "tan",
                "rawdesc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                "start": [
                    313,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                324,
                                20
                            ],
                            "name": "x",
                            "start": [
                                324,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                    "finish": [
                        324,
                        25
                    ],
                    "rawdesc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        324,
                        0
                    ],
                    "type": "function",
                    "view": "function math.tanh(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    324,
                    18
                ],
                "name": "tanh",
                "rawdesc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                "start": [
                    324,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                335,
                                25
                            ],
                            "name": "x",
                            "start": [
                                335,
                                24
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                    "finish": [
                        335,
                        30
                    ],
                    "rawdesc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": [
                        335,
                        0
                    ],
                    "type": "function",
                    "view": "function math.tointeger(x: any)\n  -> integer?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    335,
                    23
                ],
                "name": "tointeger",
                "rawdesc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                "start": [
                    335,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                349,
                                20
                            ],
                            "name": "x",
                            "start": [
                                349,
                                19
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                    "finish": [
                        349,
                        25
                    ],
                    "rawdesc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"float\"|\"integer\"|'nil'"
                        }
                    ],
                    "start": [
                        349,
                        0
                    ],
                    "type": "function",
                    "view": "function math.type(x: any)\n  -> \"float\"|\"integer\"|'nil'"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    349,
                    18
                ],
                "name": "type",
                "rawdesc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                "start": [
                    349,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                361,
                                19
                            ],
                            "name": "m",
                            "start": [
                                361,
                                18
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                361,
                                22
                            ],
                            "name": "n",
                            "start": [
                                361,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                    "finish": [
                        361,
                        27
                    ],
                    "rawdesc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        361,
                        0
                    ],
                    "type": "function",
                    "view": "function math.ult(m: integer, n: integer)\n  -> boolean"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/math.lua",
                "finish": [
                    361,
                    17
                ],
                "name": "ult",
                "rawdesc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                "start": [
                    361,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "mathlib",
        "type": "type",
        "view": "mathlib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    304,
                    19
                ],
                "start": [
                    304,
                    10
                ],
                "type": "doc.class",
                "view": "metatable",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        309,
                        36
                    ],
                    "start": [
                        309,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                309,
                                31
                            ],
                            "start": [
                                309,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                309,
                                                23
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    309,
                                                    23
                                                ],
                                                "start": [
                                                    309,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                309,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                309,
                                                26
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    309,
                                                    26
                                                ],
                                                "start": [
                                                    309,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                309,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        309,
                                        31
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                309,
                                                31
                                            ],
                                            "start": [
                                                309,
                                                28
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        309,
                                                        31
                                                    ],
                                                    "start": [
                                                        309,
                                                        28
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        309,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                309,
                                36
                            ],
                            "start": [
                                309,
                                33
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    309,
                    36
                ],
                "name": "__add",
                "start": [
                    309,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        323,
                        37
                    ],
                    "start": [
                        323,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                323,
                                32
                            ],
                            "start": [
                                323,
                                18
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                323,
                                                23
                                            ],
                                            "name": {
                                                "[1]": "t",
                                                "finish": [
                                                    323,
                                                    23
                                                ],
                                                "start": [
                                                    323,
                                                    22
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t"
                                            },
                                            "start": [
                                                323,
                                                22
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                323,
                                                27
                                            ],
                                            "name": {
                                                "[1]": "...",
                                                "finish": [
                                                    323,
                                                    27
                                                ],
                                                "start": [
                                                    323,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "..."
                                            },
                                            "start": [
                                                323,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        323,
                                        32
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                323,
                                                32
                                            ],
                                            "name": {
                                                "finish": [
                                                    323,
                                                    32
                                                ],
                                                "start": [
                                                    323,
                                                    29
                                                ],
                                                "type": "doc.return.name",
                                                "view": "unknown"
                                            },
                                            "start": [
                                                323,
                                                29
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        323,
                                                        32
                                                    ],
                                                    "start": [
                                                        323,
                                                        29
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "unknown"
                                                }
                                            ],
                                            "view": "unknown"
                                        }
                                    ],
                                    "start": [
                                        323,
                                        18
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t: any, ...any):...unknown"
                                }
                            ],
                            "view": "fun(t: any, ...any):...unknown"
                        },
                        {
                            "finish": [
                                323,
                                37
                            ],
                            "start": [
                                323,
                                34
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t: any, ...any):...unknown|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    323,
                    37
                ],
                "name": "__call",
                "start": [
                    323,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t: any, ...any):...unknown|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        316,
                        39
                    ],
                    "start": [
                        316,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                316,
                                34
                            ],
                            "start": [
                                316,
                                20
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                316,
                                                26
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    316,
                                                    26
                                                ],
                                                "start": [
                                                    316,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                316,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                316,
                                                29
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    316,
                                                    29
                                                ],
                                                "start": [
                                                    316,
                                                    27
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                316,
                                                27
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        316,
                                        34
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                316,
                                                34
                                            ],
                                            "start": [
                                                316,
                                                31
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        316,
                                                        34
                                                    ],
                                                    "start": [
                                                        316,
                                                        31
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        316,
                                        20
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                316,
                                39
                            ],
                            "start": [
                                316,
                                36
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    316,
                    39
                ],
                "name": "__concat",
                "start": [
                    316,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        312,
                        36
                    ],
                    "start": [
                        312,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                312,
                                31
                            ],
                            "start": [
                                312,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                312,
                                                23
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    312,
                                                    23
                                                ],
                                                "start": [
                                                    312,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                312,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                312,
                                                26
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    312,
                                                    26
                                                ],
                                                "start": [
                                                    312,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                312,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        312,
                                        31
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                312,
                                                31
                                            ],
                                            "start": [
                                                312,
                                                28
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        312,
                                                        31
                                                    ],
                                                    "start": [
                                                        312,
                                                        28
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        312,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                312,
                                36
                            ],
                            "start": [
                                312,
                                33
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    312,
                    36
                ],
                "name": "__div",
                "start": [
                    312,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        318,
                        39
                    ],
                    "start": [
                        318,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                318,
                                34
                            ],
                            "start": [
                                318,
                                16
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                318,
                                                22
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    318,
                                                    22
                                                ],
                                                "start": [
                                                    318,
                                                    20
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                318,
                                                20
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                318,
                                                25
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    318,
                                                    25
                                                ],
                                                "start": [
                                                    318,
                                                    23
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                318,
                                                23
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        318,
                                        34
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                318,
                                                34
                                            ],
                                            "start": [
                                                318,
                                                27
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        318,
                                                        34
                                                    ],
                                                    "start": [
                                                        318,
                                                        27
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "boolean"
                                                }
                                            ],
                                            "view": "boolean"
                                        }
                                    ],
                                    "start": [
                                        318,
                                        16
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):boolean"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):boolean"
                        },
                        {
                            "finish": [
                                318,
                                39
                            ],
                            "start": [
                                318,
                                36
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):boolean|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    318,
                    39
                ],
                "name": "__eq",
                "start": [
                    318,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):boolean|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        308,
                        25
                    ],
                    "start": [
                        308,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        308,
                                        20
                                    ],
                                    "name": {
                                        "[1]": "t",
                                        "finish": [
                                            308,
                                            20
                                        ],
                                        "start": [
                                            308,
                                            19
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "t"
                                    },
                                    "start": [
                                        308,
                                        19
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "any"
                                }
                            ],
                            "finish": [
                                308,
                                21
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                308,
                                15
                            ],
                            "type": "doc.type.function",
                            "view": "fun(t: any)"
                        },
                        {
                            "finish": [
                                308,
                                25
                            ],
                            "start": [
                                308,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t: any)|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    308,
                    25
                ],
                "name": "__gc",
                "start": [
                    308,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t: any)|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        321,
                        42
                    ],
                    "start": [
                        321,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                321,
                                23
                            ],
                            "start": [
                                321,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "table"
                        },
                        {
                            "finish": [
                                321,
                                37
                            ],
                            "start": [
                                321,
                                25
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                321,
                                                30
                                            ],
                                            "name": {
                                                "[1]": "t",
                                                "finish": [
                                                    321,
                                                    30
                                                ],
                                                "start": [
                                                    321,
                                                    29
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t"
                                            },
                                            "start": [
                                                321,
                                                29
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                321,
                                                32
                                            ],
                                            "name": {
                                                "[1]": "k",
                                                "finish": [
                                                    321,
                                                    32
                                                ],
                                                "start": [
                                                    321,
                                                    31
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "k"
                                            },
                                            "start": [
                                                321,
                                                31
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        321,
                                        37
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                321,
                                                37
                                            ],
                                            "start": [
                                                321,
                                                34
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        321,
                                                        37
                                                    ],
                                                    "start": [
                                                        321,
                                                        34
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        321,
                                        25
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t: any, k: any):any"
                                }
                            ],
                            "view": "fun(t: any, k: any):any"
                        },
                        {
                            "finish": [
                                321,
                                42
                            ],
                            "start": [
                                321,
                                39
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "table|fun(t: any, k: any):any|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    321,
                    42
                ],
                "name": "__index",
                "start": [
                    321,
                    10
                ],
                "type": "doc.field",
                "view": "table|fun(t: any, k: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        320,
                        39
                    ],
                    "start": [
                        320,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                320,
                                34
                            ],
                            "start": [
                                320,
                                16
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                320,
                                                22
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    320,
                                                    22
                                                ],
                                                "start": [
                                                    320,
                                                    20
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                320,
                                                20
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                320,
                                                25
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    320,
                                                    25
                                                ],
                                                "start": [
                                                    320,
                                                    23
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                320,
                                                23
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        320,
                                        34
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                320,
                                                34
                                            ],
                                            "start": [
                                                320,
                                                27
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        320,
                                                        34
                                                    ],
                                                    "start": [
                                                        320,
                                                        27
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "boolean"
                                                }
                                            ],
                                            "view": "boolean"
                                        }
                                    ],
                                    "start": [
                                        320,
                                        16
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):boolean"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):boolean"
                        },
                        {
                            "finish": [
                                320,
                                39
                            ],
                            "start": [
                                320,
                                36
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):boolean|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    320,
                    39
                ],
                "name": "__le",
                "start": [
                    320,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):boolean|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        317,
                        36
                    ],
                    "start": [
                        317,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                317,
                                31
                            ],
                            "start": [
                                317,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                317,
                                                22
                                            ],
                                            "name": {
                                                "[1]": "t",
                                                "finish": [
                                                    317,
                                                    22
                                                ],
                                                "start": [
                                                    317,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t"
                                            },
                                            "start": [
                                                317,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        317,
                                        31
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                317,
                                                31
                                            ],
                                            "start": [
                                                317,
                                                24
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        317,
                                                        31
                                                    ],
                                                    "start": [
                                                        317,
                                                        24
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "integer"
                                                }
                                            ],
                                            "view": "integer"
                                        }
                                    ],
                                    "start": [
                                        317,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t: any):integer"
                                }
                            ],
                            "view": "fun(t: any):integer"
                        },
                        {
                            "finish": [
                                317,
                                36
                            ],
                            "start": [
                                317,
                                33
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t: any):integer|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    317,
                    36
                ],
                "name": "__len",
                "start": [
                    317,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t: any):integer|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        319,
                        39
                    ],
                    "start": [
                        319,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                319,
                                34
                            ],
                            "start": [
                                319,
                                16
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                319,
                                                22
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    319,
                                                    22
                                                ],
                                                "start": [
                                                    319,
                                                    20
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                319,
                                                20
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                319,
                                                25
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    319,
                                                    25
                                                ],
                                                "start": [
                                                    319,
                                                    23
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                319,
                                                23
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        319,
                                        34
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                319,
                                                34
                                            ],
                                            "start": [
                                                319,
                                                27
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        319,
                                                        34
                                                    ],
                                                    "start": [
                                                        319,
                                                        27
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "boolean"
                                                }
                                            ],
                                            "view": "boolean"
                                        }
                                    ],
                                    "start": [
                                        319,
                                        16
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):boolean"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):boolean"
                        },
                        {
                            "finish": [
                                319,
                                39
                            ],
                            "start": [
                                319,
                                36
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):boolean|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    319,
                    39
                ],
                "name": "__lt",
                "start": [
                    319,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):boolean|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        306,
                        29
                    ],
                    "start": [
                        306,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                306,
                                25
                            ],
                            "start": [
                                306,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "any"
                        },
                        {
                            "finish": [
                                306,
                                29
                            ],
                            "start": [
                                306,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    306,
                    29
                ],
                "name": "__metatable",
                "start": [
                    306,
                    10
                ],
                "type": "doc.field",
                "view": "any",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        313,
                        36
                    ],
                    "start": [
                        313,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                313,
                                31
                            ],
                            "start": [
                                313,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                313,
                                                23
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    313,
                                                    23
                                                ],
                                                "start": [
                                                    313,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                313,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                313,
                                                26
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    313,
                                                    26
                                                ],
                                                "start": [
                                                    313,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                313,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        313,
                                        31
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                313,
                                                31
                                            ],
                                            "start": [
                                                313,
                                                28
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        313,
                                                        31
                                                    ],
                                                    "start": [
                                                        313,
                                                        28
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        313,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                313,
                                36
                            ],
                            "start": [
                                313,
                                33
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    313,
                    36
                ],
                "name": "__mod",
                "start": [
                    313,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        305,
                        33
                    ],
                    "start": [
                        305,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                305,
                                20
                            ],
                            "start": [
                                305,
                                17
                            ],
                            "type": "doc.type.string",
                            "view": "'v'"
                        },
                        {
                            "finish": [
                                305,
                                24
                            ],
                            "start": [
                                305,
                                21
                            ],
                            "type": "doc.type.string",
                            "view": "'k'"
                        },
                        {
                            "finish": [
                                305,
                                29
                            ],
                            "start": [
                                305,
                                25
                            ],
                            "type": "doc.type.string",
                            "view": "'kv'"
                        },
                        {
                            "finish": [
                                305,
                                33
                            ],
                            "start": [
                                305,
                                30
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "'k'|'kv'|'v'|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    305,
                    33
                ],
                "name": "__mode",
                "start": [
                    305,
                    10
                ],
                "type": "doc.field",
                "view": "'k'|'kv'|'v'|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        311,
                        36
                    ],
                    "start": [
                        311,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                311,
                                31
                            ],
                            "start": [
                                311,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                311,
                                                23
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    311,
                                                    23
                                                ],
                                                "start": [
                                                    311,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                311,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                311,
                                                26
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    311,
                                                    26
                                                ],
                                                "start": [
                                                    311,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                311,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        311,
                                        31
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                311,
                                                31
                                            ],
                                            "start": [
                                                311,
                                                28
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        311,
                                                        31
                                                    ],
                                                    "start": [
                                                        311,
                                                        28
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        311,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                311,
                                36
                            ],
                            "start": [
                                311,
                                33
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    311,
                    36
                ],
                "name": "__mul",
                "start": [
                    311,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        322,
                        41
                    ],
                    "start": [
                        322,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                322,
                                26
                            ],
                            "start": [
                                322,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "table"
                        },
                        {
                            "args": [
                                {
                                    "finish": [
                                        322,
                                        32
                                    ],
                                    "name": {
                                        "[1]": "t",
                                        "finish": [
                                            322,
                                            32
                                        ],
                                        "start": [
                                            322,
                                            31
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "t"
                                    },
                                    "start": [
                                        322,
                                        31
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "any"
                                },
                                {
                                    "finish": [
                                        322,
                                        34
                                    ],
                                    "name": {
                                        "[1]": "k",
                                        "finish": [
                                            322,
                                            34
                                        ],
                                        "start": [
                                            322,
                                            33
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "k"
                                    },
                                    "start": [
                                        322,
                                        33
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "any"
                                },
                                {
                                    "finish": [
                                        322,
                                        36
                                    ],
                                    "name": {
                                        "[1]": "v",
                                        "finish": [
                                            322,
                                            36
                                        ],
                                        "start": [
                                            322,
                                            35
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "v"
                                    },
                                    "start": [
                                        322,
                                        35
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "any"
                                }
                            ],
                            "finish": [
                                322,
                                37
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                322,
                                27
                            ],
                            "type": "doc.type.function",
                            "view": "fun(t: any, k: any, v: any)"
                        },
                        {
                            "finish": [
                                322,
                                41
                            ],
                            "start": [
                                322,
                                38
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "table|fun(t: any, k: any, v: any)|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    322,
                    41
                ],
                "name": "__newindex",
                "start": [
                    322,
                    10
                ],
                "type": "doc.field",
                "view": "table|fun(t: any, k: any, v: any)|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        314,
                        36
                    ],
                    "start": [
                        314,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                314,
                                31
                            ],
                            "start": [
                                314,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                314,
                                                23
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    314,
                                                    23
                                                ],
                                                "start": [
                                                    314,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                314,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                314,
                                                26
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    314,
                                                    26
                                                ],
                                                "start": [
                                                    314,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                314,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        314,
                                        31
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                314,
                                                31
                                            ],
                                            "start": [
                                                314,
                                                28
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        314,
                                                        31
                                                    ],
                                                    "start": [
                                                        314,
                                                        28
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        314,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                314,
                                36
                            ],
                            "start": [
                                314,
                                33
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    314,
                    36
                ],
                "name": "__pow",
                "start": [
                    314,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        310,
                        36
                    ],
                    "start": [
                        310,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                310,
                                31
                            ],
                            "start": [
                                310,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                310,
                                                23
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    310,
                                                    23
                                                ],
                                                "start": [
                                                    310,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                310,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                310,
                                                26
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    310,
                                                    26
                                                ],
                                                "start": [
                                                    310,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                310,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        310,
                                        31
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                310,
                                                31
                                            ],
                                            "start": [
                                                310,
                                                28
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        310,
                                                        31
                                                    ],
                                                    "start": [
                                                        310,
                                                        28
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        310,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                310,
                                36
                            ],
                            "start": [
                                310,
                                33
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    310,
                    36
                ],
                "name": "__sub",
                "start": [
                    310,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        307,
                        40
                    ],
                    "start": [
                        307,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                307,
                                35
                            ],
                            "start": [
                                307,
                                22
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                307,
                                                27
                                            ],
                                            "name": {
                                                "[1]": "t",
                                                "finish": [
                                                    307,
                                                    27
                                                ],
                                                "start": [
                                                    307,
                                                    26
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t"
                                            },
                                            "start": [
                                                307,
                                                26
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        307,
                                        35
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                307,
                                                35
                                            ],
                                            "start": [
                                                307,
                                                29
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        307,
                                                        35
                                                    ],
                                                    "start": [
                                                        307,
                                                        29
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "string"
                                                }
                                            ],
                                            "view": "string"
                                        }
                                    ],
                                    "start": [
                                        307,
                                        22
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t: any):string"
                                }
                            ],
                            "view": "fun(t: any):string"
                        },
                        {
                            "finish": [
                                307,
                                40
                            ],
                            "start": [
                                307,
                                37
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t: any):string|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    307,
                    40
                ],
                "name": "__tostring",
                "start": [
                    307,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t: any):string|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        315,
                        32
                    ],
                    "start": [
                        315,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                315,
                                27
                            ],
                            "start": [
                                315,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                315,
                                                22
                                            ],
                                            "name": {
                                                "[1]": "t",
                                                "finish": [
                                                    315,
                                                    22
                                                ],
                                                "start": [
                                                    315,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t"
                                            },
                                            "start": [
                                                315,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        315,
                                        27
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                315,
                                                27
                                            ],
                                            "start": [
                                                315,
                                                24
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        315,
                                                        27
                                                    ],
                                                    "start": [
                                                        315,
                                                        24
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        315,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t: any):any"
                                }
                            ],
                            "view": "fun(t: any):any"
                        },
                        {
                            "finish": [
                                315,
                                32
                            ],
                            "start": [
                                315,
                                29
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t: any):any|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    315,
                    32
                ],
                "name": "__unm",
                "start": [
                    315,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t: any):any|nil",
                "visible": "public"
            }
        ],
        "name": "metatable",
        "type": "type",
        "view": "metatable"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " Legacy alias",
                "extends": {
                    "finish": [
                        46,
                        15
                    ],
                    "start": [
                        46,
                        11
                    ],
                    "type": "getglobal",
                    "view": "core"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    46,
                    8
                ],
                "rawdesc": " Legacy alias",
                "start": [
                    46,
                    0
                ],
                "type": "setglobal",
                "view": "core",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " Legacy alias",
                "extends": {
                    "finish": [
                        46,
                        15
                    ],
                    "start": [
                        46,
                        11
                    ],
                    "type": "getglobal",
                    "view": "core"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    46,
                    8
                ],
                "rawdesc": " Legacy alias",
                "start": [
                    46,
                    0
                ],
                "type": "setglobal",
                "view": "core",
                "visible": "public"
            }
        ],
        "name": "minetest",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCreates a module.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-module\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                172,
                                20
                            ],
                            "name": "name",
                            "start": [
                                172,
                                16
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                172,
                                25
                            ],
                            "start": [
                                172,
                                22
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nCreates a module.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-module\"])",
                    "finish": [
                        172,
                        30
                    ],
                    "rawdesc": "\nCreates a module.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-module\"])",
                    "start": [
                        172,
                        0
                    ],
                    "type": "function",
                    "view": "function module(name: string, ...any)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    172,
                    15
                ],
                "rawdesc": "\nCreates a module.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-module\"])",
                "start": [
                    172,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "module",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                162,
                                23
                            ],
                            "name": "proxy",
                            "start": [
                                162,
                                18
                            ],
                            "type": "local",
                            "view": "boolean|table|userdata"
                        }
                    ],
                    "finish": [
                        162,
                        28
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "userdata"
                        }
                    ],
                    "start": [
                        162,
                        0
                    ],
                    "type": "function",
                    "view": "function newproxy(proxy: boolean|table|userdata)\n  -> userdata"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    162,
                    17
                ],
                "start": [
                    162,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "newproxy",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nAllows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                190,
                                19
                            ],
                            "name": "table",
                            "start": [
                                190,
                                14
                            ],
                            "type": "local",
                            "view": "table<<K>, <V>>"
                        },
                        {
                            "finish": [
                                190,
                                26
                            ],
                            "name": "index",
                            "start": [
                                190,
                                21
                            ],
                            "type": "local",
                            "view": "<K>?"
                        }
                    ],
                    "desc": "\nAllows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"])",
                    "finish": [
                        190,
                        31
                    ],
                    "rawdesc": "\nAllows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<K>?"
                        },
                        {
                            "type": "function.return",
                            "view": "<V>?"
                        }
                    ],
                    "start": [
                        190,
                        0
                    ],
                    "type": "function",
                    "view": "function next(table: table<<K>, <V>>, index?: <K>)\n  -> <K>?\n  2. <V>?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    190,
                    13
                ],
                "rawdesc": "\nAllows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"])",
                "start": [
                    190,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "next",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/builtin.lua",
                "finish": [
                    4,
                    13
                ],
                "start": [
                    4,
                    10
                ],
                "type": "doc.class",
                "view": "nil",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "nil",
        "type": "type",
        "view": "nil"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/builtin.lua",
                "finish": [
                    8,
                    16
                ],
                "start": [
                    8,
                    10
                ],
                "type": "doc.class",
                "view": "number",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "number",
        "type": "type",
        "view": "number"
    },
    {
        "defines": [
            {
                "desc": "```lua\nopenmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                "finish": [
                    40,
                    10
                ],
                "rawdesc": "```lua\nopenmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                "start": [
                    28,
                    10
                ],
                "type": "doc.alias",
                "view": "\"a\"|\"a+\"|\"a+b\"|\"ab\"|\"r\"...(+7)"
            }
        ],
        "fields": [],
        "name": "openmode",
        "type": "type",
        "view": "openmode"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
                    "finish": [
                        8,
                        7
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
                    "start": [
                        8,
                        5
                    ],
                    "type": "table",
                    "view": "oslib"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    8,
                    2
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
                "start": [
                    8,
                    0
                ],
                "type": "setglobal",
                "view": "oslib",
                "visible": "public"
            }
        ],
        "name": "os",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                "extends": {
                    "args": [],
                    "desc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                    "finish": [
                        17,
                        23
                    ],
                    "rawdesc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        17,
                        0
                    ],
                    "type": "function",
                    "view": "function os.clock()\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    17,
                    17
                ],
                "name": "clock",
                "rawdesc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                "start": [
                    17,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.clock",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                84,
                                23
                            ],
                            "name": "format",
                            "start": [
                                84,
                                17
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                84,
                                29
                            ],
                            "name": "time",
                            "start": [
                                84,
                                25
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                    "finish": [
                        84,
                        34
                    ],
                    "rawdesc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string|osdate"
                        }
                    ],
                    "start": [
                        84,
                        0
                    ],
                    "type": "function",
                    "view": "function os.date(format?: string, time?: integer)\n  -> string|osdate"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    84,
                    16
                ],
                "name": "date",
                "rawdesc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                "start": [
                    84,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.date",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                95,
                                23
                            ],
                            "name": "t2",
                            "start": [
                                95,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                95,
                                27
                            ],
                            "name": "t1",
                            "start": [
                                95,
                                25
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                    "finish": [
                        95,
                        32
                    ],
                    "rawdesc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        95,
                        0
                    ],
                    "type": "function",
                    "view": "function os.difftime(t2: integer, t1: integer)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    95,
                    20
                ],
                "name": "difftime",
                "rawdesc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                "start": [
                    95,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.difftime",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                106,
                                27
                            ],
                            "name": "command",
                            "start": [
                                106,
                                20
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "finish": [
                        106,
                        32
                    ],
                    "rawdesc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean?"
                        },
                        {
                            "name": "exitcode",
                            "type": "function.return",
                            "view": "(\"exit\"|\"signal\")?"
                        },
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": [
                        106,
                        0
                    ],
                    "type": "function",
                    "view": "function os.execute(command?: string)\n  -> suc: boolean?\n  2. exitcode: (\"exit\"|\"signal\")?\n  3. code: integer?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    106,
                    19
                ],
                "name": "execute",
                "rawdesc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "start": [
                    106,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.execute",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                115,
                                21
                            ],
                            "name": "code",
                            "start": [
                                115,
                                17
                            ],
                            "type": "local",
                            "view": "(boolean|integer)?"
                        },
                        {
                            "finish": [
                                115,
                                28
                            ],
                            "name": "close",
                            "start": [
                                115,
                                23
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                    "finish": [
                        115,
                        33
                    ],
                    "rawdesc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                    "start": [
                        115,
                        0
                    ],
                    "type": "function",
                    "view": "function os.exit(code?: boolean|integer, close?: boolean)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    115,
                    16
                ],
                "name": "exit",
                "rawdesc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                "start": [
                    115,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.exit",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                125,
                                26
                            ],
                            "name": "varname",
                            "start": [
                                125,
                                19
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                    "finish": [
                        125,
                        31
                    ],
                    "rawdesc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        125,
                        0
                    ],
                    "type": "function",
                    "view": "function os.getenv(varname: string)\n  -> string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    125,
                    18
                ],
                "name": "getenv",
                "rawdesc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                "start": [
                    125,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.getenv",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                135,
                                27
                            ],
                            "name": "filename",
                            "start": [
                                135,
                                19
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                    "finish": [
                        135,
                        32
                    ],
                    "rawdesc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        135,
                        0
                    ],
                    "type": "function",
                    "view": "function os.remove(filename: string)\n  -> suc: boolean\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    135,
                    18
                ],
                "name": "remove",
                "rawdesc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                "start": [
                    135,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.remove",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                146,
                                26
                            ],
                            "name": "oldname",
                            "start": [
                                146,
                                19
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                146,
                                35
                            ],
                            "name": "newname",
                            "start": [
                                146,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                    "finish": [
                        146,
                        40
                    ],
                    "rawdesc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        146,
                        0
                    ],
                    "type": "function",
                    "view": "function os.rename(oldname: string, newname: string)\n  -> suc: boolean\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    146,
                    18
                ],
                "name": "rename",
                "rawdesc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                "start": [
                    146,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.rename",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                164,
                                28
                            ],
                            "name": "locale",
                            "start": [
                                164,
                                22
                            ],
                            "type": "local",
                            "view": "string|nil"
                        },
                        {
                            "finish": [
                                164,
                                38
                            ],
                            "name": "category",
                            "start": [
                                164,
                                30
                            ],
                            "type": "local",
                            "view": "(\"all\"|\"collate\"|\"ctype\"|\"monetary\"|\"numeric\"...(+1))?"
                        }
                    ],
                    "desc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                    "finish": [
                        164,
                        43
                    ],
                    "rawdesc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                    "returns": [
                        {
                            "name": "localecategory",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        164,
                        0
                    ],
                    "type": "function",
                    "view": "function os.setlocale(locale: string|nil, category?: \"all\"|\"collate\"|\"ctype\"|\"monetary\"|\"numeric\"...(+1))\n  -> localecategory: string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    164,
                    21
                ],
                "name": "setlocale",
                "rawdesc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                "start": [
                    164,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.setlocale",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                230,
                                21
                            ],
                            "name": "date",
                            "start": [
                                230,
                                17
                            ],
                            "type": "local",
                            "view": "osdateparam?"
                        }
                    ],
                    "desc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                    "finish": [
                        230,
                        26
                    ],
                    "rawdesc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        230,
                        0
                    ],
                    "type": "function",
                    "view": "function os.time(date?: osdateparam)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    230,
                    16
                ],
                "name": "time",
                "rawdesc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                "start": [
                    230,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.time",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                "extends": {
                    "args": [],
                    "desc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                    "finish": [
                        239,
                        25
                    ],
                    "rawdesc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        239,
                        0
                    ],
                    "type": "function",
                    "view": "function os.tmpname()\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    239,
                    19
                ],
                "name": "tmpname",
                "rawdesc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                "start": [
                    239,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.tmpname",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            19,
                            28
                        ],
                        "start": [
                            19,
                            17
                        ],
                        "type": "doc.extends.name",
                        "view": "osdateparam"
                    }
                ],
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    19,
                    28
                ],
                "start": [
                    19,
                    10
                ],
                "type": "doc.class",
                "view": "osdate",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n1-31\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.day\"])\n",
                "extends": {
                    "finish": [
                        37,
                        30
                    ],
                    "start": [
                        37,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                37,
                                23
                            ],
                            "start": [
                                37,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                37,
                                30
                            ],
                            "start": [
                                37,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    37,
                    30
                ],
                "name": "day",
                "rawdesc": "\n1-31\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.day\"])\n",
                "start": [
                    37,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n0-23\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.hour\"])\n",
                "extends": {
                    "finish": [
                        43,
                        30
                    ],
                    "start": [
                        43,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                43,
                                23
                            ],
                            "start": [
                                43,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                43,
                                30
                            ],
                            "start": [
                                43,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    43,
                    30
                ],
                "name": "hour",
                "rawdesc": "\n0-23\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.hour\"])\n",
                "start": [
                    43,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\ndaylight saving flag, a boolean\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.isdst\"])\n",
                "extends": {
                    "finish": [
                        73,
                        23
                    ],
                    "start": [
                        73,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                73,
                                23
                            ],
                            "start": [
                                73,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    73,
                    23
                ],
                "name": "isdst",
                "rawdesc": "\ndaylight saving flag, a boolean\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.isdst\"])\n",
                "start": [
                    73,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n0-59\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.min\"])\n",
                "extends": {
                    "finish": [
                        49,
                        30
                    ],
                    "start": [
                        49,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                49,
                                23
                            ],
                            "start": [
                                49,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                49,
                                30
                            ],
                            "start": [
                                49,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    49,
                    30
                ],
                "name": "min",
                "rawdesc": "\n0-59\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.min\"])\n",
                "start": [
                    49,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n1-12\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.month\"])\n",
                "extends": {
                    "finish": [
                        31,
                        30
                    ],
                    "start": [
                        31,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                31,
                                23
                            ],
                            "start": [
                                31,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                31,
                                30
                            ],
                            "start": [
                                31,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    31,
                    30
                ],
                "name": "month",
                "rawdesc": "\n1-12\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.month\"])\n",
                "start": [
                    31,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n0-61\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.sec\"])\n",
                "extends": {
                    "finish": [
                        55,
                        30
                    ],
                    "start": [
                        55,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                55,
                                23
                            ],
                            "start": [
                                55,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                55,
                                30
                            ],
                            "start": [
                                55,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    55,
                    30
                ],
                "name": "sec",
                "rawdesc": "\n0-61\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.sec\"])\n",
                "start": [
                    55,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nweekday, 1–7, Sunday is 1\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.wday\"])\n",
                "extends": {
                    "finish": [
                        61,
                        30
                    ],
                    "start": [
                        61,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                61,
                                23
                            ],
                            "start": [
                                61,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                61,
                                30
                            ],
                            "start": [
                                61,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    61,
                    30
                ],
                "name": "wday",
                "rawdesc": "\nweekday, 1–7, Sunday is 1\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.wday\"])\n",
                "start": [
                    61,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nday of the year, 1–366\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.yday\"])\n",
                "extends": {
                    "finish": [
                        67,
                        30
                    ],
                    "start": [
                        67,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                67,
                                23
                            ],
                            "start": [
                                67,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                67,
                                30
                            ],
                            "start": [
                                67,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    67,
                    30
                ],
                "name": "yday",
                "rawdesc": "\nday of the year, 1–366\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.yday\"])\n",
                "start": [
                    67,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nfour digits\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.year\"])\n",
                "extends": {
                    "finish": [
                        25,
                        30
                    ],
                    "start": [
                        25,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                25,
                                23
                            ],
                            "start": [
                                25,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                25,
                                30
                            ],
                            "start": [
                                25,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    25,
                    30
                ],
                "name": "year",
                "rawdesc": "\nfour digits\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.year\"])\n",
                "start": [
                    25,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            }
        ],
        "name": "osdate",
        "type": "type",
        "view": "osdate"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    166,
                    21
                ],
                "start": [
                    166,
                    10
                ],
                "type": "doc.class",
                "view": "osdateparam",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n1-31\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.day\"])\n",
                "extends": {
                    "finish": [
                        184,
                        30
                    ],
                    "start": [
                        184,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                184,
                                23
                            ],
                            "start": [
                                184,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                184,
                                30
                            ],
                            "start": [
                                184,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    184,
                    30
                ],
                "name": "day",
                "rawdesc": "\n1-31\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.day\"])\n",
                "start": [
                    184,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n0-23\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.hour\"])\n",
                "extends": {
                    "finish": [
                        190,
                        33
                    ],
                    "start": [
                        190,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                190,
                                31
                            ],
                            "start": [
                                190,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "finish": [
                                        190,
                                        24
                                    ],
                                    "start": [
                                        190,
                                        17
                                    ],
                                    "type": "doc.type.name",
                                    "view": "integer"
                                },
                                {
                                    "finish": [
                                        190,
                                        31
                                    ],
                                    "start": [
                                        190,
                                        25
                                    ],
                                    "type": "doc.type.name",
                                    "view": "string"
                                }
                            ],
                            "view": "string|integer"
                        }
                    ],
                    "view": "(string|integer)?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    190,
                    33
                ],
                "name": "hour",
                "rawdesc": "\n0-23\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.hour\"])\n",
                "start": [
                    190,
                    10
                ],
                "type": "doc.field",
                "view": "(string|integer)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\ndaylight saving flag, a boolean\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.isdst\"])\n",
                "extends": {
                    "finish": [
                        220,
                        24
                    ],
                    "start": [
                        220,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                220,
                                23
                            ],
                            "start": [
                                220,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    220,
                    24
                ],
                "name": "isdst",
                "rawdesc": "\ndaylight saving flag, a boolean\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.isdst\"])\n",
                "start": [
                    220,
                    10
                ],
                "type": "doc.field",
                "view": "boolean?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n0-59\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.min\"])\n",
                "extends": {
                    "finish": [
                        196,
                        33
                    ],
                    "start": [
                        196,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                196,
                                31
                            ],
                            "start": [
                                196,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "finish": [
                                        196,
                                        24
                                    ],
                                    "start": [
                                        196,
                                        17
                                    ],
                                    "type": "doc.type.name",
                                    "view": "integer"
                                },
                                {
                                    "finish": [
                                        196,
                                        31
                                    ],
                                    "start": [
                                        196,
                                        25
                                    ],
                                    "type": "doc.type.name",
                                    "view": "string"
                                }
                            ],
                            "view": "string|integer"
                        }
                    ],
                    "view": "(string|integer)?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    196,
                    33
                ],
                "name": "min",
                "rawdesc": "\n0-59\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.min\"])\n",
                "start": [
                    196,
                    10
                ],
                "type": "doc.field",
                "view": "(string|integer)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n1-12\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.month\"])\n",
                "extends": {
                    "finish": [
                        178,
                        30
                    ],
                    "start": [
                        178,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                178,
                                23
                            ],
                            "start": [
                                178,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                178,
                                30
                            ],
                            "start": [
                                178,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    178,
                    30
                ],
                "name": "month",
                "rawdesc": "\n1-12\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.month\"])\n",
                "start": [
                    178,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n0-61\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.sec\"])\n",
                "extends": {
                    "finish": [
                        202,
                        33
                    ],
                    "start": [
                        202,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                202,
                                31
                            ],
                            "start": [
                                202,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "finish": [
                                        202,
                                        24
                                    ],
                                    "start": [
                                        202,
                                        17
                                    ],
                                    "type": "doc.type.name",
                                    "view": "integer"
                                },
                                {
                                    "finish": [
                                        202,
                                        31
                                    ],
                                    "start": [
                                        202,
                                        25
                                    ],
                                    "type": "doc.type.name",
                                    "view": "string"
                                }
                            ],
                            "view": "string|integer"
                        }
                    ],
                    "view": "(string|integer)?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    202,
                    33
                ],
                "name": "sec",
                "rawdesc": "\n0-61\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.sec\"])\n",
                "start": [
                    202,
                    10
                ],
                "type": "doc.field",
                "view": "(string|integer)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nweekday, 1–7, Sunday is 1\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.wday\"])\n",
                "extends": {
                    "finish": [
                        208,
                        33
                    ],
                    "start": [
                        208,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                208,
                                31
                            ],
                            "start": [
                                208,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "finish": [
                                        208,
                                        24
                                    ],
                                    "start": [
                                        208,
                                        17
                                    ],
                                    "type": "doc.type.name",
                                    "view": "integer"
                                },
                                {
                                    "finish": [
                                        208,
                                        31
                                    ],
                                    "start": [
                                        208,
                                        25
                                    ],
                                    "type": "doc.type.name",
                                    "view": "string"
                                }
                            ],
                            "view": "string|integer"
                        }
                    ],
                    "view": "(string|integer)?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    208,
                    33
                ],
                "name": "wday",
                "rawdesc": "\nweekday, 1–7, Sunday is 1\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.wday\"])\n",
                "start": [
                    208,
                    10
                ],
                "type": "doc.field",
                "view": "(string|integer)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nday of the year, 1–366\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.yday\"])\n",
                "extends": {
                    "finish": [
                        214,
                        33
                    ],
                    "start": [
                        214,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                214,
                                31
                            ],
                            "start": [
                                214,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "finish": [
                                        214,
                                        24
                                    ],
                                    "start": [
                                        214,
                                        17
                                    ],
                                    "type": "doc.type.name",
                                    "view": "integer"
                                },
                                {
                                    "finish": [
                                        214,
                                        31
                                    ],
                                    "start": [
                                        214,
                                        25
                                    ],
                                    "type": "doc.type.name",
                                    "view": "string"
                                }
                            ],
                            "view": "string|integer"
                        }
                    ],
                    "view": "(string|integer)?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    214,
                    33
                ],
                "name": "yday",
                "rawdesc": "\nday of the year, 1–366\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.yday\"])\n",
                "start": [
                    214,
                    10
                ],
                "type": "doc.field",
                "view": "(string|integer)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nfour digits\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.year\"])\n",
                "extends": {
                    "finish": [
                        172,
                        30
                    ],
                    "start": [
                        172,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                172,
                                23
                            ],
                            "start": [
                                172,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                172,
                                30
                            ],
                            "start": [
                                172,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    172,
                    30
                ],
                "name": "year",
                "rawdesc": "\nfour digits\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.year\"])\n",
                "start": [
                    172,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            }
        ],
        "name": "osdateparam",
        "type": "type",
        "view": "osdateparam"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    7,
                    15
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "oslib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                "extends": {
                    "args": [],
                    "desc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                    "finish": [
                        17,
                        23
                    ],
                    "rawdesc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        17,
                        0
                    ],
                    "type": "function",
                    "view": "function os.clock()\n  -> number"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    17,
                    17
                ],
                "name": "clock",
                "rawdesc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                "start": [
                    17,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                84,
                                23
                            ],
                            "name": "format",
                            "start": [
                                84,
                                17
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                84,
                                29
                            ],
                            "name": "time",
                            "start": [
                                84,
                                25
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                    "finish": [
                        84,
                        34
                    ],
                    "rawdesc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string|osdate"
                        }
                    ],
                    "start": [
                        84,
                        0
                    ],
                    "type": "function",
                    "view": "function os.date(format?: string, time?: integer)\n  -> string|osdate"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    84,
                    16
                ],
                "name": "date",
                "rawdesc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                "start": [
                    84,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                95,
                                23
                            ],
                            "name": "t2",
                            "start": [
                                95,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                95,
                                27
                            ],
                            "name": "t1",
                            "start": [
                                95,
                                25
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                    "finish": [
                        95,
                        32
                    ],
                    "rawdesc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        95,
                        0
                    ],
                    "type": "function",
                    "view": "function os.difftime(t2: integer, t1: integer)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    95,
                    20
                ],
                "name": "difftime",
                "rawdesc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                "start": [
                    95,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                106,
                                27
                            ],
                            "name": "command",
                            "start": [
                                106,
                                20
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "finish": [
                        106,
                        32
                    ],
                    "rawdesc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean?"
                        },
                        {
                            "name": "exitcode",
                            "type": "function.return",
                            "view": "(\"exit\"|\"signal\")?"
                        },
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": [
                        106,
                        0
                    ],
                    "type": "function",
                    "view": "function os.execute(command?: string)\n  -> suc: boolean?\n  2. exitcode: (\"exit\"|\"signal\")?\n  3. code: integer?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    106,
                    19
                ],
                "name": "execute",
                "rawdesc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "start": [
                    106,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                115,
                                21
                            ],
                            "name": "code",
                            "start": [
                                115,
                                17
                            ],
                            "type": "local",
                            "view": "(boolean|integer)?"
                        },
                        {
                            "finish": [
                                115,
                                28
                            ],
                            "name": "close",
                            "start": [
                                115,
                                23
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                    "finish": [
                        115,
                        33
                    ],
                    "rawdesc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                    "start": [
                        115,
                        0
                    ],
                    "type": "function",
                    "view": "function os.exit(code?: boolean|integer, close?: boolean)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    115,
                    16
                ],
                "name": "exit",
                "rawdesc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                "start": [
                    115,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                125,
                                26
                            ],
                            "name": "varname",
                            "start": [
                                125,
                                19
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                    "finish": [
                        125,
                        31
                    ],
                    "rawdesc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        125,
                        0
                    ],
                    "type": "function",
                    "view": "function os.getenv(varname: string)\n  -> string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    125,
                    18
                ],
                "name": "getenv",
                "rawdesc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                "start": [
                    125,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                135,
                                27
                            ],
                            "name": "filename",
                            "start": [
                                135,
                                19
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                    "finish": [
                        135,
                        32
                    ],
                    "rawdesc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        135,
                        0
                    ],
                    "type": "function",
                    "view": "function os.remove(filename: string)\n  -> suc: boolean\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    135,
                    18
                ],
                "name": "remove",
                "rawdesc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                "start": [
                    135,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                146,
                                26
                            ],
                            "name": "oldname",
                            "start": [
                                146,
                                19
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                146,
                                35
                            ],
                            "name": "newname",
                            "start": [
                                146,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                    "finish": [
                        146,
                        40
                    ],
                    "rawdesc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        146,
                        0
                    ],
                    "type": "function",
                    "view": "function os.rename(oldname: string, newname: string)\n  -> suc: boolean\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    146,
                    18
                ],
                "name": "rename",
                "rawdesc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                "start": [
                    146,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                164,
                                28
                            ],
                            "name": "locale",
                            "start": [
                                164,
                                22
                            ],
                            "type": "local",
                            "view": "string|nil"
                        },
                        {
                            "finish": [
                                164,
                                38
                            ],
                            "name": "category",
                            "start": [
                                164,
                                30
                            ],
                            "type": "local",
                            "view": "(\"all\"|\"collate\"|\"ctype\"|\"monetary\"|\"numeric\"...(+1))?"
                        }
                    ],
                    "desc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                    "finish": [
                        164,
                        43
                    ],
                    "rawdesc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                    "returns": [
                        {
                            "name": "localecategory",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        164,
                        0
                    ],
                    "type": "function",
                    "view": "function os.setlocale(locale: string|nil, category?: \"all\"|\"collate\"|\"ctype\"|\"monetary\"|\"numeric\"...(+1))\n  -> localecategory: string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    164,
                    21
                ],
                "name": "setlocale",
                "rawdesc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                "start": [
                    164,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                230,
                                21
                            ],
                            "name": "date",
                            "start": [
                                230,
                                17
                            ],
                            "type": "local",
                            "view": "osdateparam?"
                        }
                    ],
                    "desc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                    "finish": [
                        230,
                        26
                    ],
                    "rawdesc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        230,
                        0
                    ],
                    "type": "function",
                    "view": "function os.time(date?: osdateparam)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    230,
                    16
                ],
                "name": "time",
                "rawdesc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                "start": [
                    230,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                "extends": {
                    "args": [],
                    "desc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                    "finish": [
                        239,
                        25
                    ],
                    "rawdesc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        239,
                        0
                    ],
                    "type": "function",
                    "view": "function os.tmpname()\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/os.lua",
                "finish": [
                    239,
                    19
                ],
                "name": "tmpname",
                "rawdesc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                "start": [
                    239,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "oslib",
        "type": "type",
        "view": "oslib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
                    "finish": [
                        41,
                        12
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
                    "start": [
                        41,
                        10
                    ],
                    "type": "table",
                    "view": "packagelib"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    41,
                    7
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
                "start": [
                    41,
                    0
                ],
                "type": "setglobal",
                "view": "packagelib",
                "visible": "public"
            }
        ],
        "name": "package",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA string describing some compile-time configurations for packages.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.config\"])\n",
                "extends": {
                    "finish": [
                        53,
                        3
                    ],
                    "start": [
                        48,
                        17
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    48,
                    14
                ],
                "name": "config",
                "rawdesc": "\nA string describing some compile-time configurations for packages.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.config\"])\n",
                "start": [
                    48,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "package.config",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaders\"])\n",
                "extends": {
                    "finish": [
                        61,
                        20
                    ],
                    "start": [
                        61,
                        18
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    61,
                    15
                ],
                "name": "loaders",
                "rawdesc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaders\"])\n",
                "start": [
                    61,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "package.loaders",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                71,
                                32
                            ],
                            "name": "libname",
                            "start": [
                                71,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                71,
                                42
                            ],
                            "name": "funcname",
                            "start": [
                                71,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                    "finish": [
                        71,
                        47
                    ],
                    "rawdesc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        71,
                        0
                    ],
                    "type": "function",
                    "view": "function package.loadlib(libname: string, funcname: string)\n  -> any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    71,
                    24
                ],
                "name": "loadlib",
                "rawdesc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                "start": [
                    71,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "package.loadlib",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchers\"])\n",
                "extends": {
                    "finish": [
                        79,
                        22
                    ],
                    "start": [
                        79,
                        20
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    79,
                    17
                ],
                "name": "searchers",
                "rawdesc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchers\"])\n",
                "start": [
                    79,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "package.searchers",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                94,
                                32
                            ],
                            "name": "name",
                            "start": [
                                94,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                94,
                                38
                            ],
                            "name": "path",
                            "start": [
                                94,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                94,
                                43
                            ],
                            "name": "sep",
                            "start": [
                                94,
                                40
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                94,
                                48
                            ],
                            "name": "rep",
                            "start": [
                                94,
                                45
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                    "finish": [
                        94,
                        53
                    ],
                    "rawdesc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                    "returns": [
                        {
                            "name": "filename",
                            "type": "function.return",
                            "view": "string?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        94,
                        0
                    ],
                    "type": "function",
                    "view": "function package.searchpath(name: string, path: string, sep?: string, rep?: string)\n  -> filename: string?\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    94,
                    27
                ],
                "name": "searchpath",
                "rawdesc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                "start": [
                    94,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "package.searchpath",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                103,
                                30
                            ],
                            "name": "module",
                            "start": [
                                103,
                                24
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                    "finish": [
                        103,
                        35
                    ],
                    "rawdesc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                    "start": [
                        103,
                        0
                    ],
                    "type": "function",
                    "view": "function package.seeall(module: table)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    103,
                    23
                ],
                "name": "seeall",
                "rawdesc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                "start": [
                    103,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "package.seeall",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    16,
                    20
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
                "start": [
                    16,
                    10
                ],
                "type": "doc.class",
                "view": "packagelib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA string describing some compile-time configurations for packages.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.config\"])\n",
                "extends": {
                    "finish": [
                        53,
                        3
                    ],
                    "start": [
                        48,
                        17
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    48,
                    14
                ],
                "name": "config",
                "rawdesc": "\nA string describing some compile-time configurations for packages.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.config\"])\n",
                "start": [
                    48,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nThe path used by `require` to search for a C loader.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.cpath\"])\n",
                "extends": {
                    "finish": [
                        22,
                        26
                    ],
                    "start": [
                        22,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                22,
                                26
                            ],
                            "start": [
                                22,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    22,
                    26
                ],
                "name": "cpath",
                "rawdesc": "\nThe path used by `require` to search for a C loader.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.cpath\"])\n",
                "start": [
                    22,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA table used by `require` to control which modules are already loaded.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaded\"])\n",
                "extends": {
                    "finish": [
                        28,
                        25
                    ],
                    "start": [
                        28,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                28,
                                25
                            ],
                            "start": [
                                28,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "table"
                        }
                    ],
                    "view": "table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    28,
                    25
                ],
                "name": "loaded",
                "rawdesc": "\nA table used by `require` to control which modules are already loaded.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaded\"])\n",
                "start": [
                    28,
                    10
                ],
                "type": "doc.field",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaders\"])\n",
                "extends": {
                    "finish": [
                        61,
                        20
                    ],
                    "start": [
                        61,
                        18
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    61,
                    15
                ],
                "name": "loaders",
                "rawdesc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaders\"])\n",
                "start": [
                    61,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                71,
                                32
                            ],
                            "name": "libname",
                            "start": [
                                71,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                71,
                                42
                            ],
                            "name": "funcname",
                            "start": [
                                71,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                    "finish": [
                        71,
                        47
                    ],
                    "rawdesc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        71,
                        0
                    ],
                    "type": "function",
                    "view": "function package.loadlib(libname: string, funcname: string)\n  -> any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    71,
                    24
                ],
                "name": "loadlib",
                "rawdesc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                "start": [
                    71,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nThe path used by `require` to search for a Lua loader.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.path\"])\n",
                "extends": {
                    "finish": [
                        34,
                        26
                    ],
                    "start": [
                        34,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                34,
                                26
                            ],
                            "start": [
                                34,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    34,
                    26
                ],
                "name": "path",
                "rawdesc": "\nThe path used by `require` to search for a Lua loader.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.path\"])\n",
                "start": [
                    34,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA table to store loaders for specific modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.preload\"])\n",
                "extends": {
                    "finish": [
                        40,
                        25
                    ],
                    "start": [
                        40,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                40,
                                25
                            ],
                            "start": [
                                40,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "table"
                        }
                    ],
                    "view": "table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    40,
                    25
                ],
                "name": "preload",
                "rawdesc": "\nA table to store loaders for specific modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.preload\"])\n",
                "start": [
                    40,
                    10
                ],
                "type": "doc.field",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchers\"])\n",
                "extends": {
                    "finish": [
                        79,
                        22
                    ],
                    "start": [
                        79,
                        20
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    79,
                    17
                ],
                "name": "searchers",
                "rawdesc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchers\"])\n",
                "start": [
                    79,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                94,
                                32
                            ],
                            "name": "name",
                            "start": [
                                94,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                94,
                                38
                            ],
                            "name": "path",
                            "start": [
                                94,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                94,
                                43
                            ],
                            "name": "sep",
                            "start": [
                                94,
                                40
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                94,
                                48
                            ],
                            "name": "rep",
                            "start": [
                                94,
                                45
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                    "finish": [
                        94,
                        53
                    ],
                    "rawdesc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                    "returns": [
                        {
                            "name": "filename",
                            "type": "function.return",
                            "view": "string?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        94,
                        0
                    ],
                    "type": "function",
                    "view": "function package.searchpath(name: string, path: string, sep?: string, rep?: string)\n  -> filename: string?\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    94,
                    27
                ],
                "name": "searchpath",
                "rawdesc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                "start": [
                    94,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                103,
                                30
                            ],
                            "name": "module",
                            "start": [
                                103,
                                24
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                    "finish": [
                        103,
                        35
                    ],
                    "rawdesc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                    "start": [
                        103,
                        0
                    ],
                    "type": "function",
                    "view": "function package.seeall(module: table)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    103,
                    23
                ],
                "name": "seeall",
                "rawdesc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                "start": [
                    103,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "packagelib",
        "type": "type",
        "view": "packagelib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nIf `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.\n\nOtherwise, returns three values: the [next](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-next\"]) function, the table `t`, and `nil`, so that the construction\n```lua\n    for k,v in pairs(t) do body end\n```\nwill iterate over all key–value pairs of table `t`.\n\nSee function [next](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-next\"]) for the caveats of modifying the table during its traversal.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pairs\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                210,
                                16
                            ],
                            "name": "t",
                            "start": [
                                210,
                                15
                            ],
                            "type": "local",
                            "view": "<T:table>"
                        }
                    ],
                    "desc": "\nIf `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.\n\nOtherwise, returns three values: the [next](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-next\"]) function, the table `t`, and `nil`, so that the construction\n```lua\n    for k,v in pairs(t) do body end\n```\nwill iterate over all key–value pairs of table `t`.\n\nSee function [next](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-next\"]) for the caveats of modifying the table during its traversal.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pairs\"])",
                    "finish": [
                        210,
                        21
                    ],
                    "rawdesc": "\nIf `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.\n\nOtherwise, returns three values: the [next](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-next\"]) function, the table `t`, and `nil`, so that the construction\n```lua\n    for k,v in pairs(t) do body end\n```\nwill iterate over all key–value pairs of table `t`.\n\nSee function [next](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-next\"]) for the caveats of modifying the table during its traversal.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pairs\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(table: table<<K>, <V>>, index?: <K>):<K>, <V>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T:table>"
                        }
                    ],
                    "start": [
                        210,
                        0
                    ],
                    "type": "function",
                    "view": "function pairs(t: <T:table>)\n  -> fun(table: table<<K>, <V>>, index?: <K>):<K>, <V>\n  2. <T:table>"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    210,
                    14
                ],
                "rawdesc": "\nIf `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.\n\nOtherwise, returns three values: the [next](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-next\"]) function, the table `t`, and `nil`, so that the construction\n```lua\n    for k,v in pairs(t) do body end\n```\nwill iterate over all key–value pairs of table `t`.\n\nSee function [next](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-next\"]) for the caveats of modifying the table during its traversal.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pairs\"])",
                "start": [
                    210,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pairs",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCalls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pcall\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                224,
                                16
                            ],
                            "name": "f",
                            "start": [
                                224,
                                15
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                224,
                                22
                            ],
                            "name": "arg1",
                            "start": [
                                224,
                                18
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                224,
                                27
                            ],
                            "start": [
                                224,
                                24
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nCalls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pcall\"])",
                    "finish": [
                        224,
                        32
                    ],
                    "rawdesc": "\nCalls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pcall\"])",
                    "returns": [
                        {
                            "name": "success",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "result",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        224,
                        0
                    ],
                    "type": "function",
                    "view": "function pcall(f: fun(...any):...unknown, arg1?: any, ...any)\n  -> success: boolean\n  2. result: any\n  3. ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    224,
                    14
                ],
                "rawdesc": "\nCalls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pcall\"])",
                "start": [
                    224,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pcall",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "```lua\npopenmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                "finish": [
                    108,
                    8
                ],
                "rawdesc": "```lua\npopenmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                "start": [
                    106,
                    10
                ],
                "type": "doc.alias",
                "view": "\"r\"|\"w\""
            }
        ],
        "fields": [],
        "name": "popenmode",
        "type": "type",
        "view": "popenmode"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReceives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-tostring\"]).\nThe function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-string.format\"]) and [io.write](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-io.write\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-print\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                234,
                                18
                            ],
                            "start": [
                                234,
                                15
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReceives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-tostring\"]).\nThe function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-string.format\"]) and [io.write](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-io.write\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-print\"])",
                    "finish": [
                        234,
                        23
                    ],
                    "rawdesc": "\nReceives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-tostring\"]).\nThe function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-string.format\"]) and [io.write](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-io.write\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-print\"])",
                    "start": [
                        234,
                        0
                    ],
                    "type": "function",
                    "view": "function print(...any)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    234,
                    14
                ],
                "rawdesc": "\nReceives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-tostring\"]).\nThe function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-string.format\"]) and [io.write](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-io.write\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-print\"])",
                "start": [
                    234,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "print",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nChecks whether v1 is equal to v2, without invoking the `__eq` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawequal\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                245,
                                20
                            ],
                            "name": "v1",
                            "start": [
                                245,
                                18
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                245,
                                24
                            ],
                            "name": "v2",
                            "start": [
                                245,
                                22
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nChecks whether v1 is equal to v2, without invoking the `__eq` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawequal\"])",
                    "finish": [
                        245,
                        29
                    ],
                    "rawdesc": "\nChecks whether v1 is equal to v2, without invoking the `__eq` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawequal\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        245,
                        0
                    ],
                    "type": "function",
                    "view": "function rawequal(v1: any, v2: any)\n  -> boolean"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    245,
                    17
                ],
                "rawdesc": "\nChecks whether v1 is equal to v2, without invoking the `__eq` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawequal\"])",
                "start": [
                    245,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "rawequal",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nGets the real value of `table[index]`, without invoking the `__index` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawget\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                256,
                                21
                            ],
                            "name": "table",
                            "start": [
                                256,
                                16
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                256,
                                28
                            ],
                            "name": "index",
                            "start": [
                                256,
                                23
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nGets the real value of `table[index]`, without invoking the `__index` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawget\"])",
                    "finish": [
                        256,
                        33
                    ],
                    "rawdesc": "\nGets the real value of `table[index]`, without invoking the `__index` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawget\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        256,
                        0
                    ],
                    "type": "function",
                    "view": "function rawget(table: table, index: any)\n  -> any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    256,
                    15
                ],
                "rawdesc": "\nGets the real value of `table[index]`, without invoking the `__index` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawget\"])",
                "start": [
                    256,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "rawget",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the length of the object `v`, without invoking the `__len` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawlen\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                266,
                                17
                            ],
                            "name": "v",
                            "start": [
                                266,
                                16
                            ],
                            "type": "local",
                            "view": "string|table"
                        }
                    ],
                    "desc": "\nReturns the length of the object `v`, without invoking the `__len` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawlen\"])",
                    "finish": [
                        266,
                        22
                    ],
                    "rawdesc": "\nReturns the length of the object `v`, without invoking the `__len` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawlen\"])",
                    "returns": [
                        {
                            "name": "len",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        266,
                        0
                    ],
                    "type": "function",
                    "view": "function rawlen(v: string|table)\n  -> len: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    266,
                    15
                ],
                "rawdesc": "\nReturns the length of the object `v`, without invoking the `__len` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawlen\"])",
                "start": [
                    266,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "rawlen",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.\nThis function returns `table`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawset\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                279,
                                21
                            ],
                            "name": "table",
                            "start": [
                                279,
                                16
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                279,
                                28
                            ],
                            "name": "index",
                            "start": [
                                279,
                                23
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                279,
                                35
                            ],
                            "name": "value",
                            "start": [
                                279,
                                30
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nSets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.\nThis function returns `table`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawset\"])",
                    "finish": [
                        279,
                        40
                    ],
                    "rawdesc": "\nSets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.\nThis function returns `table`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawset\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        279,
                        0
                    ],
                    "type": "function",
                    "view": "function rawset(table: table, index: any, value: any)\n  -> table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    279,
                    15
                ],
                "rawdesc": "\nSets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.\nThis function returns `table`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawset\"])",
                "start": [
                    279,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "rawset",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "```lua\nreadmode:\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                "finish": [
                    177,
                    9
                ],
                "rawdesc": "```lua\nreadmode:\n    | \"*n\" -- Reads a numeral and returns it as number.\n    | \"*a\" -- Reads the whole file.\n   -> \"*l\" -- Reads the next line skipping the end of line.\n    | \"*L\" -- Reads the next line keeping the end of line.\n```",
                "start": [
                    173,
                    10
                ],
                "type": "doc.alias",
                "view": "string|integer|\"*L\"|\"*a\"|\"*l\"...(+1)"
            }
        ],
        "fields": [],
        "name": "readmode",
        "type": "type",
        "view": "readmode"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nLoads the given module, returns any value returned by the given module(`true` when `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-require\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                9,
                                24
                            ],
                            "name": "modname",
                            "start": [
                                9,
                                17
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nLoads the given module, returns any value returned by the given module(`true` when `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-require\"])",
                    "finish": [
                        9,
                        29
                    ],
                    "rawdesc": "\nLoads the given module, returns any value returned by the given module(`true` when `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-require\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": [
                        9,
                        0
                    ],
                    "type": "function",
                    "view": "function require(modname: string)\n  -> unknown"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/package.lua",
                "finish": [
                    9,
                    16
                ],
                "rawdesc": "\nLoads the given module, returns any value returned by the given module(`true` when `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-require\"])",
                "start": [
                    9,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "require",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " Short for \"spacea\"\n You will need this a LOT trust me",
                "extends": {
                    "desc": " Short for \"spacea\"\n You will need this a LOT trust me",
                    "finish": [
                        6,
                        6
                    ],
                    "rawdesc": " Short for \"spacea\"\n You will need this a LOT trust me",
                    "start": [
                        6,
                        4
                    ],
                    "type": "table",
                    "view": "Spacea"
                },
                "file": "mods/spacea_api/init.lua",
                "finish": [
                    6,
                    1
                ],
                "rawdesc": " Short for \"spacea\"\n You will need this a LOT trust me",
                "start": [
                    6,
                    0
                ],
                "type": "setglobal",
                "view": "Spacea",
                "visible": "public"
            }
        ],
        "name": "s",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        1,
                        10
                    ],
                    "start": [
                        1,
                        8
                    ],
                    "type": "table",
                    "view": "Set"
                },
                "file": "mods/spacea_api/data_structures/sets.lua",
                "finish": [
                    1,
                    5
                ],
                "name": "Set",
                "start": [
                    1,
                    0
                ],
                "type": "setfield",
                "view": "Set",
                "visible": "public"
            }
        ],
        "name": "s.Set",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                26,
                                8
                            ],
                            "name": "self",
                            "start": [
                                26,
                                8
                            ],
                            "type": "self",
                            "view": "Set"
                        },
                        {
                            "finish": [
                                26,
                                26
                            ],
                            "name": "element",
                            "start": [
                                26,
                                19
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        26,
                        52
                    ],
                    "start": [
                        26,
                        0
                    ],
                    "type": "function",
                    "view": "(method) Set:add(element: any)"
                },
                "file": "mods/spacea_api/data_structures/sets.lua",
                "finish": [
                    26,
                    18
                ],
                "name": "add",
                "start": [
                    26,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.Set.add",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                29,
                                8
                            ],
                            "name": "self",
                            "start": [
                                29,
                                8
                            ],
                            "type": "self",
                            "view": "Set"
                        },
                        {
                            "finish": [
                                29,
                                31
                            ],
                            "name": "elements",
                            "start": [
                                29,
                                23
                            ],
                            "type": "local",
                            "view": "any[]"
                        }
                    ],
                    "finish": [
                        31,
                        3
                    ],
                    "start": [
                        29,
                        0
                    ],
                    "type": "function",
                    "view": "(method) Set:add_all(elements: any[])"
                },
                "file": "mods/spacea_api/data_structures/sets.lua",
                "finish": [
                    29,
                    22
                ],
                "name": "add_all",
                "start": [
                    29,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.Set.add_all",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                36,
                                8
                            ],
                            "name": "self",
                            "start": [
                                36,
                                8
                            ],
                            "type": "self",
                            "view": "Set"
                        },
                        {
                            "finish": [
                                36,
                                31
                            ],
                            "name": "element",
                            "start": [
                                36,
                                24
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        36,
                        57
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean|nil"
                        }
                    ],
                    "start": [
                        36,
                        0
                    ],
                    "type": "function",
                    "view": "(method) Set:contains(element: any)\n  -> boolean|nil"
                },
                "file": "mods/spacea_api/data_structures/sets.lua",
                "finish": [
                    36,
                    23
                ],
                "name": "contains",
                "start": [
                    36,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.Set.contains",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                6,
                                20
                            ],
                            "name": "t",
                            "start": [
                                6,
                                19
                            ],
                            "type": "local",
                            "view": "any[]"
                        },
                        {
                            "finish": [
                                6,
                                28
                            ],
                            "name": "set_mt",
                            "start": [
                                6,
                                22
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "finish": [
                        11,
                        3
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "Set|table<any, boolean>"
                        }
                    ],
                    "start": [
                        6,
                        0
                    ],
                    "type": "function",
                    "view": "function Set.new(t: any[], set_mt?: boolean)\n  -> Set|table<any, boolean>"
                },
                "file": "mods/spacea_api/data_structures/sets.lua",
                "finish": [
                    6,
                    18
                ],
                "name": "new",
                "start": [
                    6,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.Set.new",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                18,
                                8
                            ],
                            "name": "self",
                            "start": [
                                18,
                                8
                            ],
                            "type": "self",
                            "view": "Set"
                        },
                        {
                            "finish": [
                                18,
                                29
                            ],
                            "name": "element",
                            "start": [
                                18,
                                22
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        18,
                        54
                    ],
                    "start": [
                        18,
                        0
                    ],
                    "type": "function",
                    "view": "(method) Set:remove(element: any)"
                },
                "file": "mods/spacea_api/data_structures/sets.lua",
                "finish": [
                    18,
                    21
                ],
                "name": "remove",
                "start": [
                    18,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.Set.remove",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                21,
                                8
                            ],
                            "name": "self",
                            "start": [
                                21,
                                8
                            ],
                            "type": "self",
                            "view": "Set"
                        },
                        {
                            "finish": [
                                21,
                                34
                            ],
                            "name": "elements",
                            "start": [
                                21,
                                26
                            ],
                            "type": "local",
                            "view": "any[]"
                        }
                    ],
                    "finish": [
                        23,
                        3
                    ],
                    "start": [
                        21,
                        0
                    ],
                    "type": "function",
                    "view": "(method) Set:remove_all(elements: any[])"
                },
                "file": "mods/spacea_api/data_structures/sets.lua",
                "finish": [
                    21,
                    25
                ],
                "name": "remove_all",
                "start": [
                    21,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.Set.remove_all",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        2,
                        8
                    ],
                    "start": [
                        2,
                        6
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "mods/spacea_api/functional.lua",
                "finish": [
                    2,
                    3
                ],
                "name": "f",
                "start": [
                    2,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "s.f",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                4,
                                22
                            ],
                            "name": "f",
                            "start": [
                                4,
                                21
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                4,
                                27
                            ],
                            "start": [
                                4,
                                24
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "finish": [
                        7,
                        3
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function"
                        }
                    ],
                    "start": [
                        4,
                        12
                    ],
                    "type": "function",
                    "view": "function s.f.curry(f: any, ...any)\n  -> function"
                },
                "file": "mods/spacea_api/functional.lua",
                "finish": [
                    4,
                    9
                ],
                "name": "curry",
                "start": [
                    4,
                    0
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.f.curry",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        9,
                        13
                    ],
                    "start": [
                        9,
                        11
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "mods/spacea_api/functional.lua",
                "finish": [
                    9,
                    8
                ],
                "name": "math",
                "start": [
                    9,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "s.f.math",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                11,
                                25
                            ],
                            "name": "a",
                            "start": [
                                11,
                                24
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                11,
                                28
                            ],
                            "name": "b",
                            "start": [
                                11,
                                27
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        11,
                        46
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": [
                        11,
                        15
                    ],
                    "type": "function",
                    "view": "function s.f.math.add(a: any, b: any)\n  -> unknown"
                },
                "file": "mods/spacea_api/functional.lua",
                "finish": [
                    11,
                    12
                ],
                "name": "add",
                "start": [
                    11,
                    0
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.f.math.add",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                14,
                                25
                            ],
                            "name": "a",
                            "start": [
                                14,
                                24
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                14,
                                28
                            ],
                            "name": "b",
                            "start": [
                                14,
                                27
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        14,
                        46
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": [
                        14,
                        15
                    ],
                    "type": "function",
                    "view": "function s.f.math.div(a: any, b: any)\n  -> unknown"
                },
                "file": "mods/spacea_api/functional.lua",
                "finish": [
                    14,
                    12
                ],
                "name": "div",
                "start": [
                    14,
                    0
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.f.math.div",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                13,
                                25
                            ],
                            "name": "a",
                            "start": [
                                13,
                                24
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                13,
                                28
                            ],
                            "name": "b",
                            "start": [
                                13,
                                27
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        13,
                        46
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": [
                        13,
                        15
                    ],
                    "type": "function",
                    "view": "function s.f.math.mul(a: any, b: any)\n  -> unknown"
                },
                "file": "mods/spacea_api/functional.lua",
                "finish": [
                    13,
                    12
                ],
                "name": "mul",
                "start": [
                    13,
                    0
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.f.math.mul",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                12,
                                25
                            ],
                            "name": "a",
                            "start": [
                                12,
                                24
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                12,
                                28
                            ],
                            "name": "b",
                            "start": [
                                12,
                                27
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        12,
                        46
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": [
                        12,
                        15
                    ],
                    "type": "function",
                    "view": "function s.f.math.sub(a: any, b: any)\n  -> unknown"
                },
                "file": "mods/spacea_api/functional.lua",
                "finish": [
                    12,
                    12
                ],
                "name": "sub",
                "start": [
                    12,
                    0
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.f.math.sub",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " equivalent to an *ipairs* loop\n\n@*param* `t` — array",
                "extends": {
                    "args": [
                        {
                            "desc": "array",
                            "finish": [
                                3,
                                20
                            ],
                            "name": "t",
                            "rawdesc": "array",
                            "start": [
                                3,
                                19
                            ],
                            "type": "local",
                            "view": "table<integer, any>"
                        },
                        {
                            "finish": [
                                3,
                                23
                            ],
                            "name": "f",
                            "start": [
                                3,
                                22
                            ],
                            "type": "local",
                            "view": "fun(v: any, i: integer)"
                        }
                    ],
                    "desc": " equivalent to an *ipairs* loop\n\n@*param* `t` — array",
                    "finish": [
                        7,
                        3
                    ],
                    "rawdesc": " equivalent to an *ipairs* loop",
                    "start": [
                        3,
                        0
                    ],
                    "type": "function",
                    "view": "function s.foreach(t: table<integer, any>, f: fun(v: any, i: integer))"
                },
                "file": "mods/spacea_api/utils.lua",
                "finish": [
                    3,
                    18
                ],
                "name": "foreach",
                "rawdesc": " equivalent to an *ipairs* loop",
                "start": [
                    3,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.foreach",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " equivalent to a *pairs* loop\n Ordering is randomized\n\n@*param* `t` — any table",
                "extends": {
                    "args": [
                        {
                            "desc": "any table",
                            "finish": [
                                13,
                                21
                            ],
                            "name": "t",
                            "rawdesc": "any table",
                            "start": [
                                13,
                                20
                            ],
                            "type": "local",
                            "view": "table<any, any>"
                        },
                        {
                            "finish": [
                                13,
                                24
                            ],
                            "name": "f",
                            "start": [
                                13,
                                23
                            ],
                            "type": "local",
                            "view": "fun(v: any, k: any)"
                        }
                    ],
                    "desc": " equivalent to a *pairs* loop\n Ordering is randomized\n\n@*param* `t` — any table",
                    "finish": [
                        17,
                        3
                    ],
                    "rawdesc": " equivalent to a *pairs* loop\n Ordering is randomized",
                    "start": [
                        13,
                        0
                    ],
                    "type": "function",
                    "view": "function s.foreachp(t: table<any, any>, f: fun(v: any, k: any))"
                },
                "file": "mods/spacea_api/utils.lua",
                "finish": [
                    13,
                    19
                ],
                "name": "foreachp",
                "rawdesc": " equivalent to a *pairs* loop\n Ordering is randomized",
                "start": [
                    13,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.foreachp",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " Loads the path of <mod dir>/<path>.lua\n\n@*param* `path` — Without .lua file extension",
                "extends": {
                    "args": [
                        {
                            "desc": "Without .lua file extension",
                            "finish": [
                                10,
                                25
                            ],
                            "name": "path",
                            "rawdesc": "Without .lua file extension",
                            "start": [
                                10,
                                21
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Loads the path of <mod dir>/<path>.lua\n\n@*param* `path` — Without .lua file extension",
                    "finish": [
                        12,
                        3
                    ],
                    "rawdesc": " Loads the path of <mod dir>/<path>.lua",
                    "start": [
                        10,
                        0
                    ],
                    "type": "function",
                    "view": "function s.load_file(path: string)"
                },
                "file": "mods/spacea_api/init.lua",
                "finish": [
                    10,
                    20
                ],
                "name": "load_file",
                "rawdesc": " Loads the path of <mod dir>/<path>.lua",
                "start": [
                    10,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.load_file",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                20,
                                27
                            ],
                            "name": "paths",
                            "start": [
                                20,
                                22
                            ],
                            "type": "local",
                            "view": "string[]"
                        }
                    ],
                    "finish": [
                        22,
                        3
                    ],
                    "start": [
                        20,
                        0
                    ],
                    "type": "function",
                    "view": "function s.load_files(paths: string[])"
                },
                "file": "mods/spacea_api/utils.lua",
                "finish": [
                    20,
                    21
                ],
                "name": "load_files",
                "start": [
                    20,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.load_files",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        0,
                        13
                    ],
                    "start": [
                        0,
                        11
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "mods/spacea_player/init.lua",
                "finish": [
                    0,
                    8
                ],
                "name": "player",
                "start": [
                    0,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "s.player",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        0,
                        18
                    ],
                    "start": [
                        0,
                        16
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "mods/spacea_player/data.lua",
                "finish": [
                    0,
                    13
                ],
                "name": "data",
                "start": [
                    0,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "s.player.data",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                6,
                                31
                            ],
                            "name": "name",
                            "start": [
                                6,
                                27
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                6,
                                36
                            ],
                            "name": "key",
                            "start": [
                                6,
                                33
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        10,
                        3
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table?"
                        }
                    ],
                    "start": [
                        6,
                        0
                    ],
                    "type": "function",
                    "view": "function s.player.get_data(name: string, key: string)\n  -> table?"
                },
                "file": "mods/spacea_player/data.lua",
                "finish": [
                    6,
                    26
                ],
                "name": "get_data",
                "start": [
                    6,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.player.get_data",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        4,
                        21
                    ],
                    "start": [
                        4,
                        19
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "mods/spacea_player/physics.lua",
                "finish": [
                    4,
                    16
                ],
                "name": "physics",
                "start": [
                    4,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "s.player.physics",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " Example usage: s.player.physics.add_change(\"speed\", player, \"mymod:cofffeeee\", 8, s.f.math.add, 0) - would add 8 to the player's speed value\n DO NOT HAVE \"\"priority creep\"\" (as in like, leaving the user wondering what effect activates \"first\")\n To prevent it, the priority of multiplications should be 1\n The priority of subtractions should be 1, the priority of additions should be 0\n And the priority of division should be 2\n Obviously have some exceptions, like if something should nullify the speed no matter the buff, set the priority to math.huge",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                41,
                                45
                            ],
                            "name": "player",
                            "start": [
                                41,
                                39
                            ],
                            "type": "local",
                            "view": "core.Player"
                        },
                        {
                            "finish": [
                                41,
                                51
                            ],
                            "name": "type",
                            "start": [
                                41,
                                47
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                41,
                                55
                            ],
                            "name": "id",
                            "start": [
                                41,
                                53
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                41,
                                62
                            ],
                            "name": "value",
                            "start": [
                                41,
                                57
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                41,
                                73
                            ],
                            "name": "operation",
                            "start": [
                                41,
                                64
                            ],
                            "type": "local",
                            "view": "(fun(a: any, b: any):any)?"
                        },
                        {
                            "finish": [
                                41,
                                83
                            ],
                            "name": "priority",
                            "start": [
                                41,
                                75
                            ],
                            "type": "local",
                            "view": "number?"
                        }
                    ],
                    "desc": " Example usage: s.player.physics.add_change(\"speed\", player, \"mymod:cofffeeee\", 8, s.f.math.add, 0) - would add 8 to the player's speed value\n DO NOT HAVE \"\"priority creep\"\" (as in like, leaving the user wondering what effect activates \"first\")\n To prevent it, the priority of multiplications should be 1\n The priority of subtractions should be 1, the priority of additions should be 0\n And the priority of division should be 2\n Obviously have some exceptions, like if something should nullify the speed no matter the buff, set the priority to math.huge",
                    "finish": [
                        60,
                        3
                    ],
                    "rawdesc": " Example usage: s.player.physics.add_change(\"speed\", player, \"mymod:cofffeeee\", 8, s.f.math.add, 0) - would add 8 to the player's speed value\n DO NOT HAVE \"\"priority creep\"\" (as in like, leaving the user wondering what effect activates \"first\")\n To prevent it, the priority of multiplications should be 1\n The priority of subtractions should be 1, the priority of additions should be 0\n And the priority of division should be 2\n Obviously have some exceptions, like if something should nullify the speed no matter the buff, set the priority to math.huge",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean|nil"
                        }
                    ],
                    "start": [
                        41,
                        30
                    ],
                    "type": "function",
                    "view": "function s.player.physics.add_change(player: core.Player, type: string, id: string, value: any, operation?: fun(a: any, b: any):any, priority?: number)\n  -> boolean|nil"
                },
                "file": "mods/spacea_player/physics.lua",
                "finish": [
                    41,
                    27
                ],
                "name": "add_change",
                "rawdesc": " Example usage: s.player.physics.add_change(\"speed\", player, \"mymod:cofffeeee\", 8, s.f.math.add, 0) - would add 8 to the player's speed value\n DO NOT HAVE \"\"priority creep\"\" (as in like, leaving the user wondering what effect activates \"first\")\n To prevent it, the priority of multiplications should be 1\n The priority of subtractions should be 1, the priority of additions should be 0\n And the priority of division should be 2\n Obviously have some exceptions, like if something should nullify the speed no matter the buff, set the priority to math.huge",
                "start": [
                    41,
                    0
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.player.physics.add_change",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                62,
                                47
                            ],
                            "name": "player",
                            "start": [
                                62,
                                41
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                62,
                                53
                            ],
                            "name": "type",
                            "start": [
                                62,
                                49
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        65,
                        3
                    ],
                    "start": [
                        62,
                        32
                    ],
                    "type": "function",
                    "view": "function s.player.physics.apply_change(player: any, type: any)"
                },
                "file": "mods/spacea_player/physics.lua",
                "finish": [
                    62,
                    29
                ],
                "name": "apply_change",
                "start": [
                    62,
                    0
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.player.physics.apply_change",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        0,
                        38
                    ],
                    "start": [
                        0,
                        35
                    ],
                    "type": "number",
                    "view": "number"
                },
                "file": "mods/spacea_player/physics_presets.lua",
                "finish": [
                    0,
                    32
                ],
                "name": "default_gravity",
                "start": [
                    0,
                    0
                ],
                "type": "setfield",
                "view": "number",
                "visible": "public"
            }
        ],
        "name": "s.player.physics.default_gravity",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        1,
                        35
                    ],
                    "start": [
                        1,
                        32
                    ],
                    "type": "number",
                    "view": "number"
                },
                "file": "mods/spacea_player/physics_presets.lua",
                "finish": [
                    1,
                    29
                ],
                "name": "default_jump",
                "start": [
                    1,
                    0
                ],
                "type": "setfield",
                "view": "number",
                "visible": "public"
            }
        ],
        "name": "s.player.physics.default_jump",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                67,
                                45
                            ],
                            "name": "player",
                            "start": [
                                67,
                                39
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                67,
                                51
                            ],
                            "name": "type",
                            "start": [
                                67,
                                47
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                67,
                                55
                            ],
                            "name": "id",
                            "start": [
                                67,
                                53
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        75,
                        3
                    ],
                    "start": [
                        67,
                        30
                    ],
                    "type": "function",
                    "view": "function s.player.physics.del_change(player: any, type: any, id: any)"
                },
                "file": "mods/spacea_player/physics.lua",
                "finish": [
                    67,
                    27
                ],
                "name": "del_change",
                "start": [
                    67,
                    0
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.player.physics.del_change",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                15,
                                44
                            ],
                            "name": "player",
                            "start": [
                                15,
                                38
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                15,
                                50
                            ],
                            "name": "type",
                            "start": [
                                15,
                                46
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        26,
                        3
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        15,
                        29
                    ],
                    "type": "function",
                    "view": "function s.player.physics.get_value(player: any, type: any)\n  -> boolean"
                },
                "file": "mods/spacea_player/physics.lua",
                "finish": [
                    15,
                    26
                ],
                "name": "get_value",
                "start": [
                    15,
                    0
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.player.physics.get_value",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                11,
                                46
                            ],
                            "name": "name",
                            "start": [
                                11,
                                42
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                11,
                                54
                            ],
                            "name": "action",
                            "start": [
                                11,
                                48
                            ],
                            "type": "local",
                            "view": "fun(player: core.Player, value: any)"
                        },
                        {
                            "finish": [
                                11,
                                69
                            ],
                            "name": "default_value",
                            "start": [
                                11,
                                56
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": [
                        13,
                        3
                    ],
                    "start": [
                        11,
                        33
                    ],
                    "type": "function",
                    "view": "function s.player.physics.register_type(name: string, action: fun(player: core.Player, value: any), default_value: any)"
                },
                "file": "mods/spacea_player/physics.lua",
                "finish": [
                    11,
                    30
                ],
                "name": "register_type",
                "start": [
                    11,
                    0
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.player.physics.register_type",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        5,
                        27
                    ],
                    "start": [
                        5,
                        25
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "mods/spacea_player/physics.lua",
                "finish": [
                    5,
                    22
                ],
                "name": "types",
                "start": [
                    5,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "s.player.physics.types",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        3,
                        13
                    ],
                    "start": [
                        3,
                        11
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "mods/spacea_api/strict.lua",
                "finish": [
                    3,
                    8
                ],
                "name": "strict",
                "start": [
                    3,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "s.strict",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        18,
                        1
                    ],
                    "start": [
                        5,
                        40
                    ],
                    "type": "select",
                    "view": "unknown"
                },
                "file": "mods/spacea_api/strict.lua",
                "finish": [
                    5,
                    37
                ],
                "name": "special_item_metadata_fields",
                "start": [
                    5,
                    0
                ],
                "type": "setfield",
                "view": "unknown",
                "visible": "public"
            }
        ],
        "name": "s.strict.special_item_metadata_fields",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        4,
                        72
                    ],
                    "start": [
                        4,
                        40
                    ],
                    "type": "select",
                    "view": "unknown"
                },
                "file": "mods/spacea_api/strict.lua",
                "finish": [
                    4,
                    37
                ],
                "name": "special_node_metadata_fields",
                "start": [
                    4,
                    0
                ],
                "type": "setfield",
                "view": "unknown",
                "visible": "public"
            }
        ],
        "name": "s.strict.special_node_metadata_fields",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " An attempt to follow https://semver.org/\n I mean like, dont be super sweaty about it, but the numbers should mean something",
                "extends": {
                    "finish": [
                        7,
                        1
                    ],
                    "start": [
                        2,
                        12
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "mods/spacea_api/version.lua",
                "finish": [
                    2,
                    9
                ],
                "name": "version",
                "rawdesc": " An attempt to follow https://semver.org/\n I mean like, dont be super sweaty about it, but the numbers should mean something",
                "start": [
                    2,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "s.version",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [],
                    "finish": [
                        18,
                        3
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        11,
                        0
                    ],
                    "type": "function",
                    "view": "function s.version.get_version()\n  -> string"
                },
                "file": "mods/spacea_api/version.lua",
                "finish": [
                    11,
                    30
                ],
                "name": "get_version",
                "start": [
                    11,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "s.version.get_version",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "```lua\nseekwhence:\n    | \"set\" -- Base is beginning of the file.\n   -> \"cur\" -- Base is current position.\n    | \"end\" -- Base is end of file.\n```",
                "finish": [
                    227,
                    10
                ],
                "rawdesc": "```lua\nseekwhence:\n    | \"set\" -- Base is beginning of the file.\n   -> \"cur\" -- Base is current position.\n    | \"end\" -- Base is end of file.\n```",
                "start": [
                    224,
                    10
                ],
                "type": "doc.alias",
                "view": "\"cur\"|\"end\"|\"set\""
            }
        ],
        "fields": [],
        "name": "seekwhence",
        "type": "type",
        "view": "seekwhence"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nIf `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `\"#\"`, and `select` returns the total number of extra arguments it received.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-select\"])\n\n\n```lua\nindex:\n    | \"#\"\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                290,
                                21
                            ],
                            "name": "index",
                            "start": [
                                290,
                                16
                            ],
                            "type": "local",
                            "view": "integer|\"#\""
                        },
                        {
                            "finish": [
                                290,
                                26
                            ],
                            "start": [
                                290,
                                23
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nIf `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `\"#\"`, and `select` returns the total number of extra arguments it received.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-select\"])\n\n\n```lua\nindex:\n    | \"#\"\n```",
                    "finish": [
                        290,
                        31
                    ],
                    "rawdesc": "\nIf `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `\"#\"`, and `select` returns the total number of extra arguments it received.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-select\"])\n\n\n```lua\nindex:\n    | \"#\"\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        290,
                        0
                    ],
                    "type": "function",
                    "view": "function select(index: integer|\"#\", ...any)\n  -> any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    290,
                    15
                ],
                "rawdesc": "\nIf `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `\"#\"`, and `select` returns the total number of extra arguments it received.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-select\"])\n\n\n```lua\nindex:\n    | \"#\"\n```",
                "start": [
                    290,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "select",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                328,
                                24
                            ],
                            "name": "table",
                            "start": [
                                328,
                                19
                            ],
                            "type": "local",
                            "view": "{ [string]: any }"
                        }
                    ],
                    "finish": [
                        328,
                        29
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        328,
                        0
                    ],
                    "type": "function",
                    "view": "function serialize(table: { [string]: any })\n  -> string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/core.lua",
                "finish": [
                    328,
                    18
                ],
                "start": [
                    328,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                258,
                                24
                            ],
                            "name": "table",
                            "start": [
                                258,
                                19
                            ],
                            "type": "local",
                            "view": "{ [string]: any }"
                        }
                    ],
                    "finish": [
                        258,
                        29
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        258,
                        0
                    ],
                    "type": "function",
                    "view": "function serialize(table: { [string]: any })\n  -> string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/core.lua",
                "finish": [
                    258,
                    18
                ],
                "start": [
                    258,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "serialize",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the environment to be used by the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setfenv\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                301,
                                18
                            ],
                            "name": "f",
                            "start": [
                                301,
                                17
                            ],
                            "type": "local",
                            "view": "integer|fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                301,
                                25
                            ],
                            "name": "table",
                            "start": [
                                301,
                                20
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets the environment to be used by the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setfenv\"])",
                    "finish": [
                        301,
                        30
                    ],
                    "rawdesc": "\nSets the environment to be used by the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setfenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function"
                        }
                    ],
                    "start": [
                        301,
                        0
                    ],
                    "type": "function",
                    "view": "function setfenv(f: integer|fun(...any):...unknown, table: table)\n  -> function"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    301,
                    16
                ],
                "rawdesc": "\nSets the environment to be used by the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setfenv\"])",
                "start": [
                    301,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "setfenv",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.\n\nThis function returns `table`.\n\nTo change the metatable of other types from Lua code, you must use the debug library ([§6.10](command:extension.lua.doc?[\"en-us/51/manual.html/6.10\"])).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setmetatable\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                338,
                                27
                            ],
                            "name": "table",
                            "start": [
                                338,
                                22
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                338,
                                38
                            ],
                            "name": "metatable",
                            "start": [
                                338,
                                29
                            ],
                            "type": "local",
                            "view": "(table|metatable)?"
                        }
                    ],
                    "desc": "\nSets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.\n\nThis function returns `table`.\n\nTo change the metatable of other types from Lua code, you must use the debug library ([§6.10](command:extension.lua.doc?[\"en-us/51/manual.html/6.10\"])).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setmetatable\"])",
                    "finish": [
                        338,
                        43
                    ],
                    "rawdesc": "\nSets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.\n\nThis function returns `table`.\n\nTo change the metatable of other types from Lua code, you must use the debug library ([§6.10](command:extension.lua.doc?[\"en-us/51/manual.html/6.10\"])).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setmetatable\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        338,
                        0
                    ],
                    "type": "function",
                    "view": "function setmetatable(table: table, metatable?: table|metatable)\n  -> table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    338,
                    21
                ],
                "rawdesc": "\nSets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.\n\nThis function returns `table`.\n\nTo change the metatable of other types from Lua code, you must use the debug library ([§6.10](command:extension.lua.doc?[\"en-us/51/manual.html/6.10\"])).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setmetatable\"])",
                "start": [
                    338,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "setmetatable",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                        "finish": [
                            12,
                            27
                        ],
                        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                        "start": [
                            12,
                            18
                        ],
                        "type": "doc.extends.name",
                        "view": "stringlib"
                    }
                ],
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/builtin.lua",
                "finish": [
                    12,
                    27
                ],
                "start": [
                    12,
                    10
                ],
                "type": "doc.class",
                "view": "string",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                20,
                                22
                            ],
                            "name": "s",
                            "start": [
                                20,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                20,
                                25
                            ],
                            "name": "i",
                            "start": [
                                20,
                                24
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                20,
                                28
                            ],
                            "name": "j",
                            "start": [
                                20,
                                27
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                    "finish": [
                        20,
                        33
                    ],
                    "rawdesc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        20,
                        0
                    ],
                    "type": "function",
                    "view": "function string.byte(s: string|number, i?: integer, j?: integer)\n  -> ...integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    20,
                    20
                ],
                "name": "byte",
                "rawdesc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                "start": [
                    20,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                31,
                                25
                            ],
                            "name": "byte",
                            "start": [
                                31,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                31,
                                30
                            ],
                            "start": [
                                31,
                                27
                            ],
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                    "finish": [
                        31,
                        35
                    ],
                    "rawdesc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        31,
                        0
                    ],
                    "type": "function",
                    "view": "function string.char(byte: integer, ...integer)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    31,
                    20
                ],
                "name": "char",
                "rawdesc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                "start": [
                    31,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                42,
                                22
                            ],
                            "name": "f",
                            "start": [
                                42,
                                21
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                42,
                                29
                            ],
                            "name": "strip",
                            "start": [
                                42,
                                24
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                    "finish": [
                        42,
                        34
                    ],
                    "rawdesc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        42,
                        0
                    ],
                    "type": "function",
                    "view": "function string.dump(f: fun(...any):...unknown, strip?: boolean)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    42,
                    20
                ],
                "name": "dump",
                "rawdesc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                "start": [
                    42,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` — captured",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                57,
                                22
                            ],
                            "name": "s",
                            "start": [
                                57,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                57,
                                31
                            ],
                            "name": "pattern",
                            "start": [
                                57,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                57,
                                37
                            ],
                            "name": "init",
                            "start": [
                                57,
                                33
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                57,
                                44
                            ],
                            "name": "plain",
                            "start": [
                                57,
                                39
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` — captured",
                    "finish": [
                        57,
                        49
                    ],
                    "rawdesc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])",
                    "returns": [
                        {
                            "name": "start",
                            "type": "function.return",
                            "view": "integer|nil"
                        },
                        {
                            "name": "end",
                            "type": "function.return",
                            "view": "integer|nil"
                        },
                        {
                            "desc": "captured",
                            "name": "...",
                            "rawdesc": "captured",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        57,
                        0
                    ],
                    "type": "function",
                    "view": "function string.find(s: string|number, pattern: string|number, init?: integer, plain?: boolean)\n  -> start: integer|nil\n  2. end: integer|nil\n  3. ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    57,
                    20
                ],
                "name": "find",
                "rawdesc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])",
                "start": [
                    57,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                68,
                                24
                            ],
                            "name": "s",
                            "start": [
                                68,
                                23
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                68,
                                29
                            ],
                            "start": [
                                68,
                                26
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                    "finish": [
                        68,
                        34
                    ],
                    "rawdesc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        68,
                        0
                    ],
                    "type": "function",
                    "view": "function string.format(s: string|number, ...any)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    68,
                    22
                ],
                "name": "format",
                "rawdesc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                "start": [
                    68,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                79,
                                24
                            ],
                            "name": "s",
                            "start": [
                                79,
                                23
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                79,
                                33
                            ],
                            "name": "pattern",
                            "start": [
                                79,
                                26
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                    "finish": [
                        79,
                        38
                    ],
                    "rawdesc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():string, ...unknown"
                        }
                    ],
                    "start": [
                        79,
                        0
                    ],
                    "type": "function",
                    "view": "function string.gmatch(s: string|number, pattern: string|number)\n  -> fun():string, ...unknown"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    79,
                    22
                ],
                "name": "gmatch",
                "rawdesc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                "start": [
                    79,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                92,
                                22
                            ],
                            "name": "s",
                            "start": [
                                92,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                92,
                                31
                            ],
                            "name": "pattern",
                            "start": [
                                92,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                92,
                                37
                            ],
                            "name": "repl",
                            "start": [
                                92,
                                33
                            ],
                            "type": "local",
                            "view": "string|number|function|table"
                        },
                        {
                            "finish": [
                                92,
                                40
                            ],
                            "name": "n",
                            "start": [
                                92,
                                39
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                    "finish": [
                        92,
                        45
                    ],
                    "rawdesc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "count",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        92,
                        0
                    ],
                    "type": "function",
                    "view": "function string.gsub(s: string|number, pattern: string|number, repl: string|number|function|table, n?: integer)\n  -> string\n  2. count: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    92,
                    20
                ],
                "name": "gsub",
                "rawdesc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                "start": [
                    92,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                102,
                                21
                            ],
                            "name": "s",
                            "start": [
                                102,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                    "finish": [
                        102,
                        26
                    ],
                    "rawdesc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        102,
                        0
                    ],
                    "type": "function",
                    "view": "function string.len(s: string|number)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    102,
                    19
                ],
                "name": "len",
                "rawdesc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                "start": [
                    102,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                112,
                                23
                            ],
                            "name": "s",
                            "start": [
                                112,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                    "finish": [
                        112,
                        28
                    ],
                    "rawdesc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        112,
                        0
                    ],
                    "type": "function",
                    "view": "function string.lower(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    112,
                    21
                ],
                "name": "lower",
                "rawdesc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                "start": [
                    112,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                124,
                                23
                            ],
                            "name": "s",
                            "start": [
                                124,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                124,
                                32
                            ],
                            "name": "pattern",
                            "start": [
                                124,
                                25
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                124,
                                38
                            ],
                            "name": "init",
                            "start": [
                                124,
                                34
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                    "finish": [
                        124,
                        43
                    ],
                    "rawdesc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        124,
                        0
                    ],
                    "type": "function",
                    "view": "function string.match(s: string|number, pattern: string|number, init?: integer)\n  -> ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    124,
                    21
                ],
                "name": "match",
                "rawdesc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                "start": [
                    124,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                138,
                                24
                            ],
                            "name": "fmt",
                            "start": [
                                138,
                                21
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                138,
                                28
                            ],
                            "name": "v1",
                            "start": [
                                138,
                                26
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                138,
                                32
                            ],
                            "name": "v2",
                            "start": [
                                138,
                                30
                            ],
                            "type": "local",
                            "view": "(string|number)?"
                        },
                        {
                            "finish": [
                                138,
                                37
                            ],
                            "start": [
                                138,
                                34
                            ],
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                    "finish": [
                        138,
                        42
                    ],
                    "rawdesc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                    "returns": [
                        {
                            "name": "binary",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        138,
                        0
                    ],
                    "type": "function",
                    "view": "function string.pack(fmt: string, v1: string|number, v2?: string|number, ...string|number)\n  -> binary: string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    138,
                    20
                ],
                "name": "pack",
                "rawdesc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                "start": [
                    138,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                149,
                                28
                            ],
                            "name": "fmt",
                            "start": [
                                149,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                    "finish": [
                        149,
                        33
                    ],
                    "rawdesc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        149,
                        0
                    ],
                    "type": "function",
                    "view": "function string.packsize(fmt: string)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    149,
                    24
                ],
                "name": "packsize",
                "rawdesc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                "start": [
                    149,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                161,
                                21
                            ],
                            "name": "s",
                            "start": [
                                161,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                161,
                                24
                            ],
                            "name": "n",
                            "start": [
                                161,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                161,
                                29
                            ],
                            "name": "sep",
                            "start": [
                                161,
                                26
                            ],
                            "type": "local",
                            "view": "(string|number)?"
                        }
                    ],
                    "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                    "finish": [
                        161,
                        34
                    ],
                    "rawdesc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        161,
                        0
                    ],
                    "type": "function",
                    "view": "function string.rep(s: string|number, n: integer, sep?: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    161,
                    19
                ],
                "name": "rep",
                "rawdesc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                "start": [
                    161,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                171,
                                25
                            ],
                            "name": "s",
                            "start": [
                                171,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                    "finish": [
                        171,
                        30
                    ],
                    "rawdesc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        171,
                        0
                    ],
                    "type": "function",
                    "view": "function string.reverse(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    171,
                    23
                ],
                "name": "reverse",
                "rawdesc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                "start": [
                    171,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                28,
                                32
                            ],
                            "name": "str1",
                            "start": [
                                28,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                28,
                                38
                            ],
                            "name": "str2",
                            "start": [
                                28,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        30,
                        3
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        28,
                        0
                    ],
                    "type": "function",
                    "view": "function string.starts_with(str1: string, str2: string)\n  -> boolean"
                },
                "file": "mods/spacea_api/utils.lua",
                "finish": [
                    28,
                    27
                ],
                "name": "starts_with",
                "start": [
                    28,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                183,
                                21
                            ],
                            "name": "s",
                            "start": [
                                183,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                183,
                                24
                            ],
                            "name": "i",
                            "start": [
                                183,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                183,
                                27
                            ],
                            "name": "j",
                            "start": [
                                183,
                                26
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                    "finish": [
                        183,
                        32
                    ],
                    "rawdesc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        183,
                        0
                    ],
                    "type": "function",
                    "view": "function string.sub(s: string|number, i: integer, j?: integer)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    183,
                    19
                ],
                "name": "sub",
                "rawdesc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                "start": [
                    183,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/51/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                196,
                                26
                            ],
                            "name": "fmt",
                            "start": [
                                196,
                                23
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                196,
                                29
                            ],
                            "name": "s",
                            "start": [
                                196,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                196,
                                34
                            ],
                            "name": "pos",
                            "start": [
                                196,
                                31
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/51/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                    "finish": [
                        196,
                        39
                    ],
                    "rawdesc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/51/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        196,
                        0
                    ],
                    "type": "function",
                    "view": "function string.unpack(fmt: string, s: string, pos?: integer)\n  -> ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    196,
                    22
                ],
                "name": "unpack",
                "rawdesc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/51/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                "start": [
                    196,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                206,
                                23
                            ],
                            "name": "s",
                            "start": [
                                206,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                    "finish": [
                        206,
                        28
                    ],
                    "rawdesc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        206,
                        0
                    ],
                    "type": "function",
                    "view": "function string.upper(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    206,
                    21
                ],
                "name": "upper",
                "rawdesc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                "start": [
                    206,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string",
        "type": "type",
        "view": "string"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                    "finish": [
                        8,
                        11
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                    "start": [
                        8,
                        9
                    ],
                    "type": "table",
                    "view": "stringlib"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    8,
                    6
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                "start": [
                    8,
                    0
                ],
                "type": "setglobal",
                "view": "stringlib",
                "visible": "public"
            }
        ],
        "name": "string",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                "extends": [
                    {
                        "finish": [
                            129,
                            31
                        ],
                        "start": [
                            129,
                            26
                        ],
                        "type": "doc.extends.name",
                        "view": "table"
                    }
                ],
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string/buffer.lua",
                "finish": [
                    129,
                    31
                ],
                "rawdesc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                "start": [
                    129,
                    10
                ],
                "type": "doc.class",
                "view": "string.buffer",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": " Appends the used bytes of the previously returned write space to the buffer data.",
                "extends": {
                    "args": [
                        {
                            "desc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "finish": [
                                214,
                                8
                            ],
                            "name": "self",
                            "rawdesc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "start": [
                                214,
                                8
                            ],
                            "type": "self",
                            "view": "string.buffer"
                        },
                        {
                            "finish": [
                                214,
                                24
                            ],
                            "name": "used",
                            "start": [
                                214,
                                20
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": " Appends the used bytes of the previously returned write space to the buffer data.",
                    "finish": [
                        214,
                        29
                    ],
                    "rawdesc": " Appends the used bytes of the previously returned write space to the buffer data.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string.buffer"
                        }
                    ],
                    "start": [
                        214,
                        0
                    ],
                    "type": "function",
                    "view": "(method) string.buffer:commit(used: integer)\n  -> string.buffer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string/buffer.lua",
                "finish": [
                    214,
                    19
                ],
                "name": "commit",
                "rawdesc": " Appends the used bytes of the previously returned write space to the buffer data.",
                "start": [
                    214,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " De-serializes one object from the buffer.\n\n The returned object may be any of the supported Lua types — even `nil`.\n\n This function may throw an error when fed with malformed or incomplete encoded data.\n\n Leaves any left-over data in the buffer.\n\n Attempting to de-serialize an FFI type will throw an error, if the FFI library is not built-in or has not been loaded, yet.",
                "extends": {
                    "args": [
                        {
                            "desc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "finish": [
                                279,
                                8
                            ],
                            "name": "self",
                            "rawdesc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "start": [
                                279,
                                8
                            ],
                            "type": "self",
                            "view": "string.buffer"
                        }
                    ],
                    "desc": " De-serializes one object from the buffer.\n\n The returned object may be any of the supported Lua types — even `nil`.\n\n This function may throw an error when fed with malformed or incomplete encoded data.\n\n Leaves any left-over data in the buffer.\n\n Attempting to de-serialize an FFI type will throw an error, if the FFI library is not built-in or has not been loaded, yet.",
                    "finish": [
                        279,
                        25
                    ],
                    "rawdesc": " De-serializes one object from the buffer.\n\n The returned object may be any of the supported Lua types — even `nil`.\n\n This function may throw an error when fed with malformed or incomplete encoded data.\n\n Leaves any left-over data in the buffer.\n\n Attempting to de-serialize an FFI type will throw an error, if the FFI library is not built-in or has not been loaded, yet.",
                    "returns": [
                        {
                            "name": "obj",
                            "type": "function.return",
                            "view": "string|number|table|nil"
                        }
                    ],
                    "start": [
                        279,
                        0
                    ],
                    "type": "function",
                    "view": "(method) string.buffer:decode()\n  -> obj: string|number|table|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string/buffer.lua",
                "finish": [
                    279,
                    19
                ],
                "name": "decode",
                "rawdesc": " De-serializes one object from the buffer.\n\n The returned object may be any of the supported Lua types — even `nil`.\n\n This function may throw an error when fed with malformed or incomplete encoded data.\n\n Leaves any left-over data in the buffer.\n\n Attempting to de-serialize an FFI type will throw an error, if the FFI library is not built-in or has not been loaded, yet.",
                "start": [
                    279,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " Serializes (encodes) the Lua object to the buffer\n\n This function may throw an error when attempting to serialize unsupported object types, circular references or deeply nested tables.",
                "extends": {
                    "args": [
                        {
                            "desc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "finish": [
                                265,
                                8
                            ],
                            "name": "self",
                            "rawdesc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "start": [
                                265,
                                8
                            ],
                            "type": "self",
                            "view": "string.buffer"
                        },
                        {
                            "desc": " A string, number, or any object obj with a __tostring metamethod to the buffer.\n",
                            "finish": [
                                265,
                                23
                            ],
                            "name": "obj",
                            "rawdesc": " A string, number, or any object obj with a __tostring metamethod to the buffer.\n",
                            "start": [
                                265,
                                20
                            ],
                            "type": "local",
                            "view": "string|number|table"
                        }
                    ],
                    "desc": " Serializes (encodes) the Lua object to the buffer\n\n This function may throw an error when attempting to serialize unsupported object types, circular references or deeply nested tables.",
                    "finish": [
                        265,
                        28
                    ],
                    "rawdesc": " Serializes (encodes) the Lua object to the buffer\n\n This function may throw an error when attempting to serialize unsupported object types, circular references or deeply nested tables.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string.buffer"
                        }
                    ],
                    "start": [
                        265,
                        0
                    ],
                    "type": "function",
                    "view": "(method) string.buffer:encode(obj: string|number|table)\n  -> string.buffer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string/buffer.lua",
                "finish": [
                    265,
                    19
                ],
                "name": "encode",
                "rawdesc": " Serializes (encodes) the Lua object to the buffer\n\n This function may throw an error when attempting to serialize unsupported object types, circular references or deeply nested tables.",
                "start": [
                    265,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " The buffer space of the buffer object is freed. The object itself remains intact, empty and may be reused.\n\n Note: you normally don't need to use this method. The garbage collector automatically frees the buffer space, when the buffer object is collected. Use this method, if you need to free the associated memory immediately.",
                "extends": {
                    "args": [
                        {
                            "desc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "finish": [
                                184,
                                8
                            ],
                            "name": "self",
                            "rawdesc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "start": [
                                184,
                                8
                            ],
                            "type": "self",
                            "view": "string.buffer"
                        }
                    ],
                    "desc": " The buffer space of the buffer object is freed. The object itself remains intact, empty and may be reused.\n\n Note: you normally don't need to use this method. The garbage collector automatically frees the buffer space, when the buffer object is collected. Use this method, if you need to free the associated memory immediately.",
                    "finish": [
                        184,
                        23
                    ],
                    "rawdesc": " The buffer space of the buffer object is freed. The object itself remains intact, empty and may be reused.\n\n Note: you normally don't need to use this method. The garbage collector automatically frees the buffer space, when the buffer object is collected. Use this method, if you need to free the associated memory immediately.",
                    "start": [
                        184,
                        0
                    ],
                    "type": "function",
                    "view": "(method) string.buffer:free()"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string/buffer.lua",
                "finish": [
                    184,
                    17
                ],
                "name": "free",
                "rawdesc": " The buffer space of the buffer object is freed. The object itself remains intact, empty and may be reused.\n\n Note: you normally don't need to use this method. The garbage collector automatically frees the buffer space, when the buffer object is collected. Use this method, if you need to free the associated memory immediately.",
                "start": [
                    184,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " Consumes the buffer data and returns one or more strings. If called without arguments, the whole buffer data is consumed. If called with a number, up to `len` bytes are consumed. A `nil` argument consumes the remaining buffer space (this only makes sense as the last argument). Multiple arguments consume the buffer data in the given order.\n\n Note: a zero length or no remaining buffer data returns an empty string and not `nil`.",
                "extends": {
                    "args": [
                        {
                            "desc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "finish": [
                                229,
                                8
                            ],
                            "name": "self",
                            "rawdesc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "start": [
                                229,
                                8
                            ],
                            "type": "self",
                            "view": "string.buffer"
                        },
                        {
                            "finish": [
                                229,
                                20
                            ],
                            "name": "len",
                            "start": [
                                229,
                                17
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                229,
                                25
                            ],
                            "start": [
                                229,
                                22
                            ],
                            "type": "...",
                            "view": "integer|nil"
                        }
                    ],
                    "desc": " Consumes the buffer data and returns one or more strings. If called without arguments, the whole buffer data is consumed. If called with a number, up to `len` bytes are consumed. A `nil` argument consumes the remaining buffer space (this only makes sense as the last argument). Multiple arguments consume the buffer data in the given order.\n\n Note: a zero length or no remaining buffer data returns an empty string and not `nil`.",
                    "finish": [
                        229,
                        30
                    ],
                    "rawdesc": " Consumes the buffer data and returns one or more strings. If called without arguments, the whole buffer data is consumed. If called with a number, up to `len` bytes are consumed. A `nil` argument consumes the remaining buffer space (this only makes sense as the last argument). Multiple arguments consume the buffer data in the given order.\n\n Note: a zero length or no remaining buffer data returns an empty string and not `nil`.",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        229,
                        0
                    ],
                    "type": "function",
                    "view": "(method) string.buffer:get(len?: integer, ...integer|nil)\n  -> ...string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string/buffer.lua",
                "finish": [
                    229,
                    16
                ],
                "name": "get",
                "rawdesc": " Consumes the buffer data and returns one or more strings. If called without arguments, the whole buffer data is consumed. If called with a number, up to `len` bytes are consumed. A `nil` argument consumes the remaining buffer space (this only makes sense as the last argument). Multiple arguments consume the buffer data in the given order.\n\n Note: a zero length or no remaining buffer data returns an empty string and not `nil`.",
                "start": [
                    229,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " Appends a string str, a number num or any object obj with a `__tostring` metamethod to the buffer. Multiple arguments are appended in the given order.\n\n Appending a buffer to a buffer is possible and short-circuited internally. But it still involves a copy. Better combine the buffer writes to use a single buffer.",
                "extends": {
                    "args": [
                        {
                            "desc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "finish": [
                                144,
                                8
                            ],
                            "name": "self",
                            "rawdesc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "start": [
                                144,
                                8
                            ],
                            "type": "self",
                            "view": "string.buffer"
                        },
                        {
                            "desc": " A string, number, or any object obj with a __tostring metamethod to the buffer.\n",
                            "finish": [
                                144,
                                21
                            ],
                            "name": "data",
                            "rawdesc": " A string, number, or any object obj with a __tostring metamethod to the buffer.\n",
                            "start": [
                                144,
                                17
                            ],
                            "type": "local",
                            "view": "string|number|table"
                        },
                        {
                            "desc": " A string, number, or any object obj with a __tostring metamethod to the buffer.\n",
                            "finish": [
                                144,
                                26
                            ],
                            "rawdesc": " A string, number, or any object obj with a __tostring metamethod to the buffer.\n",
                            "start": [
                                144,
                                23
                            ],
                            "type": "...",
                            "view": "string|number|table"
                        }
                    ],
                    "desc": " Appends a string str, a number num or any object obj with a `__tostring` metamethod to the buffer. Multiple arguments are appended in the given order.\n\n Appending a buffer to a buffer is possible and short-circuited internally. But it still involves a copy. Better combine the buffer writes to use a single buffer.",
                    "finish": [
                        144,
                        31
                    ],
                    "rawdesc": " Appends a string str, a number num or any object obj with a `__tostring` metamethod to the buffer. Multiple arguments are appended in the given order.\n\n Appending a buffer to a buffer is possible and short-circuited internally. But it still involves a copy. Better combine the buffer writes to use a single buffer.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string.buffer"
                        }
                    ],
                    "start": [
                        144,
                        0
                    ],
                    "type": "function",
                    "view": "(method) string.buffer:put(data: string|number|table, ...string|number|table)\n  -> string.buffer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string/buffer.lua",
                "finish": [
                    144,
                    16
                ],
                "name": "put",
                "rawdesc": " Appends a string str, a number num or any object obj with a `__tostring` metamethod to the buffer. Multiple arguments are appended in the given order.\n\n Appending a buffer to a buffer is possible and short-circuited internally. But it still involves a copy. Better combine the buffer writes to use a single buffer.",
                "start": [
                    144,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " Appends the given len number of bytes from the memory pointed to by the FFI cdata object to the buffer. The object needs to be convertible to a (constant) pointer.",
                "extends": {
                    "args": [
                        {
                            "desc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "finish": [
                                160,
                                8
                            ],
                            "name": "self",
                            "rawdesc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "start": [
                                160,
                                8
                            ],
                            "type": "self",
                            "view": "string.buffer"
                        },
                        {
                            "finish": [
                                160,
                                27
                            ],
                            "name": "cdata",
                            "start": [
                                160,
                                22
                            ],
                            "type": "local",
                            "view": "ffi.cdata*"
                        },
                        {
                            "finish": [
                                160,
                                32
                            ],
                            "name": "len",
                            "start": [
                                160,
                                29
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": " Appends the given len number of bytes from the memory pointed to by the FFI cdata object to the buffer. The object needs to be convertible to a (constant) pointer.",
                    "finish": [
                        160,
                        37
                    ],
                    "rawdesc": " Appends the given len number of bytes from the memory pointed to by the FFI cdata object to the buffer. The object needs to be convertible to a (constant) pointer.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string.buffer"
                        }
                    ],
                    "start": [
                        160,
                        0
                    ],
                    "type": "function",
                    "view": "(method) string.buffer:putcdata(cdata: ffi.cdata*, len: integer)\n  -> string.buffer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string/buffer.lua",
                "finish": [
                    160,
                    21
                ],
                "name": "putcdata",
                "rawdesc": " Appends the given len number of bytes from the memory pointed to by the FFI cdata object to the buffer. The object needs to be convertible to a (constant) pointer.",
                "start": [
                    160,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " Appends the formatted arguments to the buffer. The format string supports the same options as string.format().",
                "extends": {
                    "args": [
                        {
                            "desc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "finish": [
                                152,
                                8
                            ],
                            "name": "self",
                            "rawdesc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "start": [
                                152,
                                8
                            ],
                            "type": "self",
                            "view": "string.buffer"
                        },
                        {
                            "finish": [
                                152,
                                24
                            ],
                            "name": "format",
                            "start": [
                                152,
                                18
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": " A string, number, or any object obj with a __tostring metamethod to the buffer.\n",
                            "finish": [
                                152,
                                29
                            ],
                            "rawdesc": " A string, number, or any object obj with a __tostring metamethod to the buffer.\n",
                            "start": [
                                152,
                                26
                            ],
                            "type": "...",
                            "view": "string|number|table"
                        }
                    ],
                    "desc": " Appends the formatted arguments to the buffer. The format string supports the same options as string.format().",
                    "finish": [
                        152,
                        34
                    ],
                    "rawdesc": " Appends the formatted arguments to the buffer. The format string supports the same options as string.format().",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string.buffer"
                        }
                    ],
                    "start": [
                        152,
                        0
                    ],
                    "type": "function",
                    "view": "(method) string.buffer:putf(format: string, ...string|number|table)\n  -> string.buffer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string/buffer.lua",
                "finish": [
                    152,
                    17
                ],
                "name": "putf",
                "rawdesc": " Appends the formatted arguments to the buffer. The format string supports the same options as string.format().",
                "start": [
                    152,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " Returns an uint8_t * FFI cdata pointer ptr that points to the buffer data. The length of the buffer data in bytes is returned in len.\n\n The returned pointer can be directly passed to C functions that expect a buffer and a length. You can also do bytewise reads (`local x = ptr[i]`) or writes (`ptr[i] = 0x40`) of the buffer data.\n\n In conjunction with the `buf:skip()` method, this allows zero-copy use of C write-style APIs:\n\n ```lua\n repeat\n   local ptr, len = buf:ref()\n   if len == 0 then break end\n   local n = C.write(fd, ptr, len)\n   if n < 0 then error(\"write error\") end\n   buf:skip(n)\n until n >= len\n ```\n\n Unlike Lua strings, buffer data is not implicitly zero-terminated. It's not safe to pass ptr to C functions that expect zero-terminated strings. If you're not using len, then you're doing something wrong.\n\n@*return* `ptr` — an uint8_t * FFI cdata pointer that points to the buffer data.\n\n@*return* `len` — length of the buffer data in bytes",
                "extends": {
                    "args": [
                        {
                            "desc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "finish": [
                                258,
                                8
                            ],
                            "name": "self",
                            "rawdesc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "start": [
                                258,
                                8
                            ],
                            "type": "self",
                            "view": "string.buffer"
                        }
                    ],
                    "desc": " Returns an uint8_t * FFI cdata pointer ptr that points to the buffer data. The length of the buffer data in bytes is returned in len.\n\n The returned pointer can be directly passed to C functions that expect a buffer and a length. You can also do bytewise reads (`local x = ptr[i]`) or writes (`ptr[i] = 0x40`) of the buffer data.\n\n In conjunction with the `buf:skip()` method, this allows zero-copy use of C write-style APIs:\n\n ```lua\n repeat\n   local ptr, len = buf:ref()\n   if len == 0 then break end\n   local n = C.write(fd, ptr, len)\n   if n < 0 then error(\"write error\") end\n   buf:skip(n)\n until n >= len\n ```\n\n Unlike Lua strings, buffer data is not implicitly zero-terminated. It's not safe to pass ptr to C functions that expect zero-terminated strings. If you're not using len, then you're doing something wrong.\n\n@*return* `ptr` — an uint8_t * FFI cdata pointer that points to the buffer data.\n\n@*return* `len` — length of the buffer data in bytes",
                    "finish": [
                        258,
                        22
                    ],
                    "rawdesc": " Returns an uint8_t * FFI cdata pointer ptr that points to the buffer data. The length of the buffer data in bytes is returned in len.\n\n The returned pointer can be directly passed to C functions that expect a buffer and a length. You can also do bytewise reads (`local x = ptr[i]`) or writes (`ptr[i] = 0x40`) of the buffer data.\n\n In conjunction with the `buf:skip()` method, this allows zero-copy use of C write-style APIs:\n\n ```lua\n repeat\n   local ptr, len = buf:ref()\n   if len == 0 then break end\n   local n = C.write(fd, ptr, len)\n   if n < 0 then error(\"write error\") end\n   buf:skip(n)\n until n >= len\n ```\n\n Unlike Lua strings, buffer data is not implicitly zero-terminated. It's not safe to pass ptr to C functions that expect zero-terminated strings. If you're not using len, then you're doing something wrong.",
                    "returns": [
                        {
                            "desc": "an uint8_t * FFI cdata pointer that points to the buffer data.",
                            "name": "ptr",
                            "rawdesc": "an uint8_t * FFI cdata pointer that points to the buffer data.",
                            "type": "function.return",
                            "view": "ffi.cdata*"
                        },
                        {
                            "desc": "length of the buffer data in bytes",
                            "name": "len",
                            "rawdesc": "length of the buffer data in bytes",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        258,
                        0
                    ],
                    "type": "function",
                    "view": "(method) string.buffer:ref()\n  -> ptr: ffi.cdata*\n  2. len: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string/buffer.lua",
                "finish": [
                    258,
                    16
                ],
                "name": "ref",
                "rawdesc": " Returns an uint8_t * FFI cdata pointer ptr that points to the buffer data. The length of the buffer data in bytes is returned in len.\n\n The returned pointer can be directly passed to C functions that expect a buffer and a length. You can also do bytewise reads (`local x = ptr[i]`) or writes (`ptr[i] = 0x40`) of the buffer data.\n\n In conjunction with the `buf:skip()` method, this allows zero-copy use of C write-style APIs:\n\n ```lua\n repeat\n   local ptr, len = buf:ref()\n   if len == 0 then break end\n   local n = C.write(fd, ptr, len)\n   if n < 0 then error(\"write error\") end\n   buf:skip(n)\n until n >= len\n ```\n\n Unlike Lua strings, buffer data is not implicitly zero-terminated. It's not safe to pass ptr to C functions that expect zero-terminated strings. If you're not using len, then you're doing something wrong.",
                "start": [
                    258,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " The reserve method reserves at least size bytes of write space in the buffer. It returns an uint8_t * FFI cdata pointer ptr that points to this space.\n\n The available length in bytes is returned in len. This is at least size bytes, but may be more to facilitate efficient buffer growth. You can either make use of the additional space or ignore len and only use size bytes.\n\n This, along with `buf:commit()` allow zero-copy use of C read-style APIs:\n\n ```lua\n local MIN_SIZE = 65536\n repeat\n   local ptr, len = buf:reserve(MIN_SIZE)\n   local n = C.read(fd, ptr, len)\n   if n == 0 then break end -- EOF.\n   if n < 0 then error(\"read error\") end\n   buf:commit(n)\n until false\n ```\n\n The reserved write space is not initialized. At least the used bytes must be written to before calling the commit method. There's no need to call the commit method, if nothing is added to the buffer (e.g. on error).\n\n@*return* `ptr` — an uint8_t * FFI cdata pointer that points to this space\n\n@*return* `len` — available length (bytes)",
                "extends": {
                    "args": [
                        {
                            "desc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "finish": [
                                208,
                                8
                            ],
                            "name": "self",
                            "rawdesc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "start": [
                                208,
                                8
                            ],
                            "type": "self",
                            "view": "string.buffer"
                        },
                        {
                            "finish": [
                                208,
                                25
                            ],
                            "name": "size",
                            "start": [
                                208,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": " The reserve method reserves at least size bytes of write space in the buffer. It returns an uint8_t * FFI cdata pointer ptr that points to this space.\n\n The available length in bytes is returned in len. This is at least size bytes, but may be more to facilitate efficient buffer growth. You can either make use of the additional space or ignore len and only use size bytes.\n\n This, along with `buf:commit()` allow zero-copy use of C read-style APIs:\n\n ```lua\n local MIN_SIZE = 65536\n repeat\n   local ptr, len = buf:reserve(MIN_SIZE)\n   local n = C.read(fd, ptr, len)\n   if n == 0 then break end -- EOF.\n   if n < 0 then error(\"read error\") end\n   buf:commit(n)\n until false\n ```\n\n The reserved write space is not initialized. At least the used bytes must be written to before calling the commit method. There's no need to call the commit method, if nothing is added to the buffer (e.g. on error).\n\n@*return* `ptr` — an uint8_t * FFI cdata pointer that points to this space\n\n@*return* `len` — available length (bytes)",
                    "finish": [
                        208,
                        30
                    ],
                    "rawdesc": " The reserve method reserves at least size bytes of write space in the buffer. It returns an uint8_t * FFI cdata pointer ptr that points to this space.\n\n The available length in bytes is returned in len. This is at least size bytes, but may be more to facilitate efficient buffer growth. You can either make use of the additional space or ignore len and only use size bytes.\n\n This, along with `buf:commit()` allow zero-copy use of C read-style APIs:\n\n ```lua\n local MIN_SIZE = 65536\n repeat\n   local ptr, len = buf:reserve(MIN_SIZE)\n   local n = C.read(fd, ptr, len)\n   if n == 0 then break end -- EOF.\n   if n < 0 then error(\"read error\") end\n   buf:commit(n)\n until false\n ```\n\n The reserved write space is not initialized. At least the used bytes must be written to before calling the commit method. There's no need to call the commit method, if nothing is added to the buffer (e.g. on error).",
                    "returns": [
                        {
                            "desc": "an uint8_t * FFI cdata pointer that points to this space",
                            "name": "ptr",
                            "rawdesc": "an uint8_t * FFI cdata pointer that points to this space",
                            "type": "function.return",
                            "view": "ffi.cdata*"
                        },
                        {
                            "desc": "available length (bytes)",
                            "name": "len",
                            "rawdesc": "available length (bytes)",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        208,
                        0
                    ],
                    "type": "function",
                    "view": "(method) string.buffer:reserve(size: integer)\n  -> ptr: ffi.cdata*\n  2. len: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string/buffer.lua",
                "finish": [
                    208,
                    20
                ],
                "name": "reserve",
                "rawdesc": " The reserve method reserves at least size bytes of write space in the buffer. It returns an uint8_t * FFI cdata pointer ptr that points to this space.\n\n The available length in bytes is returned in len. This is at least size bytes, but may be more to facilitate efficient buffer growth. You can either make use of the additional space or ignore len and only use size bytes.\n\n This, along with `buf:commit()` allow zero-copy use of C read-style APIs:\n\n ```lua\n local MIN_SIZE = 65536\n repeat\n   local ptr, len = buf:reserve(MIN_SIZE)\n   local n = C.read(fd, ptr, len)\n   if n == 0 then break end -- EOF.\n   if n < 0 then error(\"read error\") end\n   buf:commit(n)\n until false\n ```\n\n The reserved write space is not initialized. At least the used bytes must be written to before calling the commit method. There's no need to call the commit method, if nothing is added to the buffer (e.g. on error).",
                "start": [
                    208,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " Reset (empty) the buffer. The allocated buffer space is not freed and may be reused.",
                "extends": {
                    "args": [
                        {
                            "desc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "finish": [
                                178,
                                8
                            ],
                            "name": "self",
                            "rawdesc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "start": [
                                178,
                                8
                            ],
                            "type": "self",
                            "view": "string.buffer"
                        }
                    ],
                    "desc": " Reset (empty) the buffer. The allocated buffer space is not freed and may be reused.",
                    "finish": [
                        178,
                        24
                    ],
                    "rawdesc": " Reset (empty) the buffer. The allocated buffer space is not freed and may be reused.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string.buffer"
                        }
                    ],
                    "start": [
                        178,
                        0
                    ],
                    "type": "function",
                    "view": "(method) string.buffer:reset()\n  -> string.buffer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string/buffer.lua",
                "finish": [
                    178,
                    18
                ],
                "name": "reset",
                "rawdesc": " Reset (empty) the buffer. The allocated buffer space is not freed and may be reused.",
                "start": [
                    178,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " This method allows zero-copy consumption of a string or an FFI cdata object as a buffer. It stores a reference to the passed string str or the FFI cdata object in the buffer. Any buffer space originally allocated is freed. This is not an append operation, unlike the `buf:put*()` methods.\n\n After calling this method, the buffer behaves as if `buf:free():put(str)` or `buf:free():put(cdata, len)` had been called. However, the data is only referenced and not copied, as long as the buffer is only consumed.\n\n In case the buffer is written to later on, the referenced data is copied and the object reference is removed (copy-on-write semantics).\n\n The stored reference is an anchor for the garbage collector and keeps the originally passed string or FFI cdata object alive.",
                "extends": {
                    "args": [
                        {
                            "desc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "finish": [
                                174,
                                8
                            ],
                            "name": "self",
                            "rawdesc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "start": [
                                174,
                                8
                            ],
                            "type": "self",
                            "view": "string.buffer"
                        },
                        {
                            "desc": " A string, number, or any object obj with a __tostring metamethod to the buffer.\n",
                            "finish": [
                                174,
                                20
                            ],
                            "name": "str",
                            "rawdesc": " A string, number, or any object obj with a __tostring metamethod to the buffer.\n",
                            "start": [
                                174,
                                17
                            ],
                            "type": "local",
                            "view": "string|number|table"
                        }
                    ],
                    "desc": " This method allows zero-copy consumption of a string or an FFI cdata object as a buffer. It stores a reference to the passed string str or the FFI cdata object in the buffer. Any buffer space originally allocated is freed. This is not an append operation, unlike the `buf:put*()` methods.\n\n After calling this method, the buffer behaves as if `buf:free():put(str)` or `buf:free():put(cdata, len)` had been called. However, the data is only referenced and not copied, as long as the buffer is only consumed.\n\n In case the buffer is written to later on, the referenced data is copied and the object reference is removed (copy-on-write semantics).\n\n The stored reference is an anchor for the garbage collector and keeps the originally passed string or FFI cdata object alive.",
                    "finish": [
                        174,
                        25
                    ],
                    "rawdesc": " This method allows zero-copy consumption of a string or an FFI cdata object as a buffer. It stores a reference to the passed string str or the FFI cdata object in the buffer. Any buffer space originally allocated is freed. This is not an append operation, unlike the `buf:put*()` methods.\n\n After calling this method, the buffer behaves as if `buf:free():put(str)` or `buf:free():put(cdata, len)` had been called. However, the data is only referenced and not copied, as long as the buffer is only consumed.\n\n In case the buffer is written to later on, the referenced data is copied and the object reference is removed (copy-on-write semantics).\n\n The stored reference is an anchor for the garbage collector and keeps the originally passed string or FFI cdata object alive.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string.buffer"
                        }
                    ],
                    "start": [
                        174,
                        0
                    ],
                    "type": "function",
                    "view": "(method) string.buffer:set(str: string|number|table)\n  -> string.buffer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string/buffer.lua",
                "finish": [
                    174,
                    16
                ],
                "name": "set",
                "rawdesc": " This method allows zero-copy consumption of a string or an FFI cdata object as a buffer. It stores a reference to the passed string str or the FFI cdata object in the buffer. Any buffer space originally allocated is freed. This is not an append operation, unlike the `buf:put*()` methods.\n\n After calling this method, the buffer behaves as if `buf:free():put(str)` or `buf:free():put(cdata, len)` had been called. However, the data is only referenced and not copied, as long as the buffer is only consumed.\n\n In case the buffer is written to later on, the referenced data is copied and the object reference is removed (copy-on-write semantics).\n\n The stored reference is an anchor for the garbage collector and keeps the originally passed string or FFI cdata object alive.",
                "start": [
                    174,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " Skips (consumes) len bytes from the buffer up to the current length of the buffer data.",
                "extends": {
                    "args": [
                        {
                            "desc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "finish": [
                                220,
                                8
                            ],
                            "name": "self",
                            "rawdesc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "start": [
                                220,
                                8
                            ],
                            "type": "self",
                            "view": "string.buffer"
                        },
                        {
                            "finish": [
                                220,
                                21
                            ],
                            "name": "len",
                            "start": [
                                220,
                                18
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": " Skips (consumes) len bytes from the buffer up to the current length of the buffer data.",
                    "finish": [
                        220,
                        26
                    ],
                    "rawdesc": " Skips (consumes) len bytes from the buffer up to the current length of the buffer data.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string.buffer"
                        }
                    ],
                    "start": [
                        220,
                        0
                    ],
                    "type": "function",
                    "view": "(method) string.buffer:skip(len: integer)\n  -> string.buffer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string/buffer.lua",
                "finish": [
                    220,
                    17
                ],
                "name": "skip",
                "rawdesc": " Skips (consumes) len bytes from the buffer up to the current length of the buffer data.",
                "start": [
                    220,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " Creates a string from the buffer data, but doesn't consume it. The buffer remains unchanged.\n\n Buffer objects also define a `__tostring metamethod`. This means buffers can be passed to the global `tostring()` function and many other functions that accept this in place of strings. The important internal uses in functions like `io.write()` are short-circuited to avoid the creation of an intermediate string object.",
                "extends": {
                    "args": [
                        {
                            "desc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "finish": [
                                235,
                                8
                            ],
                            "name": "self",
                            "rawdesc": " A buffer object is a garbage-collected Lua object. After creation with `buffer.new()`, it can (and should) be reused for many operations. When the last reference to a buffer object is gone, it will eventually be freed by the garbage collector, along with the allocated buffer space.\n\n Buffers operate like a FIFO (first-in first-out) data structure. Data can be appended (written) to the end of the buffer and consumed (read) from the front of the buffer. These operations may be freely mixed.\n\n The buffer space that holds the characters is managed automatically — it grows as needed and already consumed space is recycled. Use `buffer.new(size)` and `buf:free()`, if you need more control.\n\n The maximum size of a single buffer is the same as the maximum size of a Lua string, which is slightly below two gigabytes. For huge data sizes, neither strings nor buffers are the right data structure — use the FFI library to directly map memory or files up to the virtual memory limit of your OS.\n",
                            "start": [
                                235,
                                8
                            ],
                            "type": "self",
                            "view": "string.buffer"
                        }
                    ],
                    "desc": " Creates a string from the buffer data, but doesn't consume it. The buffer remains unchanged.\n\n Buffer objects also define a `__tostring metamethod`. This means buffers can be passed to the global `tostring()` function and many other functions that accept this in place of strings. The important internal uses in functions like `io.write()` are short-circuited to avoid the creation of an intermediate string object.",
                    "finish": [
                        235,
                        27
                    ],
                    "rawdesc": " Creates a string from the buffer data, but doesn't consume it. The buffer remains unchanged.\n\n Buffer objects also define a `__tostring metamethod`. This means buffers can be passed to the global `tostring()` function and many other functions that accept this in place of strings. The important internal uses in functions like `io.write()` are short-circuited to avoid the creation of an intermediate string object.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        235,
                        0
                    ],
                    "type": "function",
                    "view": "(method) string.buffer:tostring()\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string/buffer.lua",
                "finish": [
                    235,
                    21
                ],
                "name": "tostring",
                "rawdesc": " Creates a string from the buffer data, but doesn't consume it. The buffer remains unchanged.\n\n Buffer objects also define a `__tostring metamethod`. This means buffers can be passed to the global `tostring()` function and many other functions that accept this in place of strings. The important internal uses in functions like `io.write()` are short-circuited to avoid the creation of an intermediate string object.",
                "start": [
                    235,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.buffer",
        "type": "type",
        "view": "string.buffer"
    },
    {
        "defines": [
            {
                "desc": " A string, number, or any object obj with a __tostring metamethod to the buffer.\n",
                "finish": [
                    134,
                    48
                ],
                "rawdesc": " A string, number, or any object obj with a __tostring metamethod to the buffer.\n",
                "start": [
                    134,
                    10
                ],
                "type": "doc.alias",
                "view": "string|number|table"
            }
        ],
        "fields": [],
        "name": "string.buffer.data",
        "type": "type",
        "view": "string.buffer.data"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " Serialization Options\n\n The options table passed to buffer.new() may contain the following members (all optional):\n\n * `dict` is a Lua table holding a dictionary of strings that commonly occur as table keys of objects you are serializing. These keys are compactly encoded as indexes during serialization. A well chosen dictionary saves space and improves serialization performance.\n\n * `metatable` is a Lua table holding a dictionary of metatables for the table objects you are serializing.\n\n dict needs to be an array of strings and metatable needs to be an array of tables. Both starting at index 1 and without holes (no nil inbetween). The tables are anchored in the buffer object and internally modified into a two-way index (don't do this yourself, just pass a plain array). The tables must not be modified after they have been passed to buffer.new().\n\n The dict and metatable tables used by the encoder and decoder must be the same. Put the most common entries at the front. Extend at the end to ensure backwards-compatibility — older encodings can then still be read. You may also set some indexes to false to explicitly drop backwards-compatibility. Old encodings that use these indexes will throw an error when decoded.\n\n Metatables that are not found in the metatable dictionary are ignored when encoding. Decoding returns a table with a nil metatable.\n\n Note: parsing and preparation of the options table is somewhat expensive. Create a buffer object only once and recycle it for multiple uses. Avoid mixing encoder and decoder buffers, since the buf:set() method frees the already allocated buffer space:\n\n ```lua\n local options = {\n   dict = { \"commonly\", \"used\", \"string\", \"keys\" },\n }\n local buf_enc = buffer.new(options)\n local buf_dec = buffer.new(options)\n\n local function encode(obj)\n   return buf_enc:reset():encode(obj):get()\n end\n\n local function decode(str)\n   return buf_dec:set(str):decode()\n end\n ```",
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string/buffer.lua",
                "finish": [
                    347,
                    42
                ],
                "rawdesc": " Serialization Options\n\n The options table passed to buffer.new() may contain the following members (all optional):\n\n * `dict` is a Lua table holding a dictionary of strings that commonly occur as table keys of objects you are serializing. These keys are compactly encoded as indexes during serialization. A well chosen dictionary saves space and improves serialization performance.\n\n * `metatable` is a Lua table holding a dictionary of metatables for the table objects you are serializing.\n\n dict needs to be an array of strings and metatable needs to be an array of tables. Both starting at index 1 and without holes (no nil inbetween). The tables are anchored in the buffer object and internally modified into a two-way index (don't do this yourself, just pass a plain array). The tables must not be modified after they have been passed to buffer.new().\n\n The dict and metatable tables used by the encoder and decoder must be the same. Put the most common entries at the front. Extend at the end to ensure backwards-compatibility — older encodings can then still be read. You may also set some indexes to false to explicitly drop backwards-compatibility. Old encodings that use these indexes will throw an error when decoded.\n\n Metatables that are not found in the metatable dictionary are ignored when encoding. Decoding returns a table with a nil metatable.\n\n Note: parsing and preparation of the options table is somewhat expensive. Create a buffer object only once and recycle it for multiple uses. Avoid mixing encoder and decoder buffers, since the buf:set() method frees the already allocated buffer space:\n\n ```lua\n local options = {\n   dict = { \"commonly\", \"used\", \"string\", \"keys\" },\n }\n local buf_enc = buffer.new(options)\n local buf_dec = buffer.new(options)\n\n local function encode(obj)\n   return buf_enc:reset():encode(obj):get()\n end\n\n local function decode(str)\n   return buf_dec:set(str):decode()\n end\n ```",
                "start": [
                    347,
                    10
                ],
                "type": "doc.class",
                "view": "string.buffer.serialization.opts",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        348,
                        23
                    ],
                    "start": [
                        348,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                348,
                                23
                            ],
                            "start": [
                                348,
                                15
                            ],
                            "type": "doc.type.array",
                            "view": "string[]"
                        }
                    ],
                    "view": "string[]"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string/buffer.lua",
                "finish": [
                    348,
                    23
                ],
                "name": "dict",
                "start": [
                    348,
                    10
                ],
                "type": "doc.field",
                "view": "string[]",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        349,
                        27
                    ],
                    "start": [
                        349,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                349,
                                27
                            ],
                            "start": [
                                349,
                                20
                            ],
                            "type": "doc.type.array",
                            "view": "table[]"
                        }
                    ],
                    "view": "table[]"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string/buffer.lua",
                "finish": [
                    349,
                    27
                ],
                "name": "metatable",
                "start": [
                    349,
                    10
                ],
                "type": "doc.field",
                "view": "table[]",
                "visible": "public"
            }
        ],
        "name": "string.buffer.serialization.opts",
        "type": "type",
        "view": "string.buffer.serialization.opts"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                20,
                                22
                            ],
                            "name": "s",
                            "start": [
                                20,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                20,
                                25
                            ],
                            "name": "i",
                            "start": [
                                20,
                                24
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                20,
                                28
                            ],
                            "name": "j",
                            "start": [
                                20,
                                27
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                    "finish": [
                        20,
                        33
                    ],
                    "rawdesc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        20,
                        0
                    ],
                    "type": "function",
                    "view": "function string.byte(s: string|number, i?: integer, j?: integer)\n  -> ...integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    20,
                    20
                ],
                "name": "byte",
                "rawdesc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                "start": [
                    20,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.byte",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                31,
                                25
                            ],
                            "name": "byte",
                            "start": [
                                31,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                31,
                                30
                            ],
                            "start": [
                                31,
                                27
                            ],
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                    "finish": [
                        31,
                        35
                    ],
                    "rawdesc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        31,
                        0
                    ],
                    "type": "function",
                    "view": "function string.char(byte: integer, ...integer)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    31,
                    20
                ],
                "name": "char",
                "rawdesc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                "start": [
                    31,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.char",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                42,
                                22
                            ],
                            "name": "f",
                            "start": [
                                42,
                                21
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                42,
                                29
                            ],
                            "name": "strip",
                            "start": [
                                42,
                                24
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                    "finish": [
                        42,
                        34
                    ],
                    "rawdesc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        42,
                        0
                    ],
                    "type": "function",
                    "view": "function string.dump(f: fun(...any):...unknown, strip?: boolean)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    42,
                    20
                ],
                "name": "dump",
                "rawdesc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                "start": [
                    42,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.dump",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` — captured",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                57,
                                22
                            ],
                            "name": "s",
                            "start": [
                                57,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                57,
                                31
                            ],
                            "name": "pattern",
                            "start": [
                                57,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                57,
                                37
                            ],
                            "name": "init",
                            "start": [
                                57,
                                33
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                57,
                                44
                            ],
                            "name": "plain",
                            "start": [
                                57,
                                39
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` — captured",
                    "finish": [
                        57,
                        49
                    ],
                    "rawdesc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])",
                    "returns": [
                        {
                            "name": "start",
                            "type": "function.return",
                            "view": "integer|nil"
                        },
                        {
                            "name": "end",
                            "type": "function.return",
                            "view": "integer|nil"
                        },
                        {
                            "desc": "captured",
                            "name": "...",
                            "rawdesc": "captured",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        57,
                        0
                    ],
                    "type": "function",
                    "view": "function string.find(s: string|number, pattern: string|number, init?: integer, plain?: boolean)\n  -> start: integer|nil\n  2. end: integer|nil\n  3. ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    57,
                    20
                ],
                "name": "find",
                "rawdesc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])",
                "start": [
                    57,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.find",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                68,
                                24
                            ],
                            "name": "s",
                            "start": [
                                68,
                                23
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                68,
                                29
                            ],
                            "start": [
                                68,
                                26
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                    "finish": [
                        68,
                        34
                    ],
                    "rawdesc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        68,
                        0
                    ],
                    "type": "function",
                    "view": "function string.format(s: string|number, ...any)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    68,
                    22
                ],
                "name": "format",
                "rawdesc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                "start": [
                    68,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.format",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                79,
                                24
                            ],
                            "name": "s",
                            "start": [
                                79,
                                23
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                79,
                                33
                            ],
                            "name": "pattern",
                            "start": [
                                79,
                                26
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                    "finish": [
                        79,
                        38
                    ],
                    "rawdesc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():string, ...unknown"
                        }
                    ],
                    "start": [
                        79,
                        0
                    ],
                    "type": "function",
                    "view": "function string.gmatch(s: string|number, pattern: string|number)\n  -> fun():string, ...unknown"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    79,
                    22
                ],
                "name": "gmatch",
                "rawdesc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                "start": [
                    79,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.gmatch",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                92,
                                22
                            ],
                            "name": "s",
                            "start": [
                                92,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                92,
                                31
                            ],
                            "name": "pattern",
                            "start": [
                                92,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                92,
                                37
                            ],
                            "name": "repl",
                            "start": [
                                92,
                                33
                            ],
                            "type": "local",
                            "view": "string|number|function|table"
                        },
                        {
                            "finish": [
                                92,
                                40
                            ],
                            "name": "n",
                            "start": [
                                92,
                                39
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                    "finish": [
                        92,
                        45
                    ],
                    "rawdesc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "count",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        92,
                        0
                    ],
                    "type": "function",
                    "view": "function string.gsub(s: string|number, pattern: string|number, repl: string|number|function|table, n?: integer)\n  -> string\n  2. count: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    92,
                    20
                ],
                "name": "gsub",
                "rawdesc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                "start": [
                    92,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.gsub",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                102,
                                21
                            ],
                            "name": "s",
                            "start": [
                                102,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                    "finish": [
                        102,
                        26
                    ],
                    "rawdesc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        102,
                        0
                    ],
                    "type": "function",
                    "view": "function string.len(s: string|number)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    102,
                    19
                ],
                "name": "len",
                "rawdesc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                "start": [
                    102,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.len",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                112,
                                23
                            ],
                            "name": "s",
                            "start": [
                                112,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                    "finish": [
                        112,
                        28
                    ],
                    "rawdesc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        112,
                        0
                    ],
                    "type": "function",
                    "view": "function string.lower(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    112,
                    21
                ],
                "name": "lower",
                "rawdesc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                "start": [
                    112,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.lower",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                124,
                                23
                            ],
                            "name": "s",
                            "start": [
                                124,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                124,
                                32
                            ],
                            "name": "pattern",
                            "start": [
                                124,
                                25
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                124,
                                38
                            ],
                            "name": "init",
                            "start": [
                                124,
                                34
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                    "finish": [
                        124,
                        43
                    ],
                    "rawdesc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        124,
                        0
                    ],
                    "type": "function",
                    "view": "function string.match(s: string|number, pattern: string|number, init?: integer)\n  -> ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    124,
                    21
                ],
                "name": "match",
                "rawdesc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                "start": [
                    124,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.match",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                138,
                                24
                            ],
                            "name": "fmt",
                            "start": [
                                138,
                                21
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                138,
                                28
                            ],
                            "name": "v1",
                            "start": [
                                138,
                                26
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                138,
                                32
                            ],
                            "name": "v2",
                            "start": [
                                138,
                                30
                            ],
                            "type": "local",
                            "view": "(string|number)?"
                        },
                        {
                            "finish": [
                                138,
                                37
                            ],
                            "start": [
                                138,
                                34
                            ],
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                    "finish": [
                        138,
                        42
                    ],
                    "rawdesc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                    "returns": [
                        {
                            "name": "binary",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        138,
                        0
                    ],
                    "type": "function",
                    "view": "function string.pack(fmt: string, v1: string|number, v2?: string|number, ...string|number)\n  -> binary: string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    138,
                    20
                ],
                "name": "pack",
                "rawdesc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                "start": [
                    138,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.pack",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                149,
                                28
                            ],
                            "name": "fmt",
                            "start": [
                                149,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                    "finish": [
                        149,
                        33
                    ],
                    "rawdesc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        149,
                        0
                    ],
                    "type": "function",
                    "view": "function string.packsize(fmt: string)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    149,
                    24
                ],
                "name": "packsize",
                "rawdesc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                "start": [
                    149,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.packsize",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                161,
                                21
                            ],
                            "name": "s",
                            "start": [
                                161,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                161,
                                24
                            ],
                            "name": "n",
                            "start": [
                                161,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                161,
                                29
                            ],
                            "name": "sep",
                            "start": [
                                161,
                                26
                            ],
                            "type": "local",
                            "view": "(string|number)?"
                        }
                    ],
                    "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                    "finish": [
                        161,
                        34
                    ],
                    "rawdesc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        161,
                        0
                    ],
                    "type": "function",
                    "view": "function string.rep(s: string|number, n: integer, sep?: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    161,
                    19
                ],
                "name": "rep",
                "rawdesc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                "start": [
                    161,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.rep",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                171,
                                25
                            ],
                            "name": "s",
                            "start": [
                                171,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                    "finish": [
                        171,
                        30
                    ],
                    "rawdesc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        171,
                        0
                    ],
                    "type": "function",
                    "view": "function string.reverse(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    171,
                    23
                ],
                "name": "reverse",
                "rawdesc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                "start": [
                    171,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.reverse",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                28,
                                32
                            ],
                            "name": "str1",
                            "start": [
                                28,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                28,
                                38
                            ],
                            "name": "str2",
                            "start": [
                                28,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        30,
                        3
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        28,
                        0
                    ],
                    "type": "function",
                    "view": "function string.starts_with(str1: string, str2: string)\n  -> boolean"
                },
                "file": "mods/spacea_api/utils.lua",
                "finish": [
                    28,
                    27
                ],
                "name": "starts_with",
                "start": [
                    28,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.starts_with",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                183,
                                21
                            ],
                            "name": "s",
                            "start": [
                                183,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                183,
                                24
                            ],
                            "name": "i",
                            "start": [
                                183,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                183,
                                27
                            ],
                            "name": "j",
                            "start": [
                                183,
                                26
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                    "finish": [
                        183,
                        32
                    ],
                    "rawdesc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        183,
                        0
                    ],
                    "type": "function",
                    "view": "function string.sub(s: string|number, i: integer, j?: integer)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    183,
                    19
                ],
                "name": "sub",
                "rawdesc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                "start": [
                    183,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.sub",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/51/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                196,
                                26
                            ],
                            "name": "fmt",
                            "start": [
                                196,
                                23
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                196,
                                29
                            ],
                            "name": "s",
                            "start": [
                                196,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                196,
                                34
                            ],
                            "name": "pos",
                            "start": [
                                196,
                                31
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/51/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                    "finish": [
                        196,
                        39
                    ],
                    "rawdesc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/51/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        196,
                        0
                    ],
                    "type": "function",
                    "view": "function string.unpack(fmt: string, s: string, pos?: integer)\n  -> ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    196,
                    22
                ],
                "name": "unpack",
                "rawdesc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/51/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                "start": [
                    196,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.unpack",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                206,
                                23
                            ],
                            "name": "s",
                            "start": [
                                206,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                    "finish": [
                        206,
                        28
                    ],
                    "rawdesc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        206,
                        0
                    ],
                    "type": "function",
                    "view": "function string.upper(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    206,
                    21
                ],
                "name": "upper",
                "rawdesc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                "start": [
                    206,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.upper",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    7,
                    19
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "stringlib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                20,
                                22
                            ],
                            "name": "s",
                            "start": [
                                20,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                20,
                                25
                            ],
                            "name": "i",
                            "start": [
                                20,
                                24
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                20,
                                28
                            ],
                            "name": "j",
                            "start": [
                                20,
                                27
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                    "finish": [
                        20,
                        33
                    ],
                    "rawdesc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        20,
                        0
                    ],
                    "type": "function",
                    "view": "function string.byte(s: string|number, i?: integer, j?: integer)\n  -> ...integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    20,
                    20
                ],
                "name": "byte",
                "rawdesc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                "start": [
                    20,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                31,
                                25
                            ],
                            "name": "byte",
                            "start": [
                                31,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                31,
                                30
                            ],
                            "start": [
                                31,
                                27
                            ],
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                    "finish": [
                        31,
                        35
                    ],
                    "rawdesc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        31,
                        0
                    ],
                    "type": "function",
                    "view": "function string.char(byte: integer, ...integer)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    31,
                    20
                ],
                "name": "char",
                "rawdesc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                "start": [
                    31,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                42,
                                22
                            ],
                            "name": "f",
                            "start": [
                                42,
                                21
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                42,
                                29
                            ],
                            "name": "strip",
                            "start": [
                                42,
                                24
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                    "finish": [
                        42,
                        34
                    ],
                    "rawdesc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        42,
                        0
                    ],
                    "type": "function",
                    "view": "function string.dump(f: fun(...any):...unknown, strip?: boolean)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    42,
                    20
                ],
                "name": "dump",
                "rawdesc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                "start": [
                    42,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` — captured",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                57,
                                22
                            ],
                            "name": "s",
                            "start": [
                                57,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                57,
                                31
                            ],
                            "name": "pattern",
                            "start": [
                                57,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                57,
                                37
                            ],
                            "name": "init",
                            "start": [
                                57,
                                33
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                57,
                                44
                            ],
                            "name": "plain",
                            "start": [
                                57,
                                39
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` — captured",
                    "finish": [
                        57,
                        49
                    ],
                    "rawdesc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])",
                    "returns": [
                        {
                            "name": "start",
                            "type": "function.return",
                            "view": "integer|nil"
                        },
                        {
                            "name": "end",
                            "type": "function.return",
                            "view": "integer|nil"
                        },
                        {
                            "desc": "captured",
                            "name": "...",
                            "rawdesc": "captured",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        57,
                        0
                    ],
                    "type": "function",
                    "view": "function string.find(s: string|number, pattern: string|number, init?: integer, plain?: boolean)\n  -> start: integer|nil\n  2. end: integer|nil\n  3. ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    57,
                    20
                ],
                "name": "find",
                "rawdesc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])",
                "start": [
                    57,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                68,
                                24
                            ],
                            "name": "s",
                            "start": [
                                68,
                                23
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                68,
                                29
                            ],
                            "start": [
                                68,
                                26
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                    "finish": [
                        68,
                        34
                    ],
                    "rawdesc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        68,
                        0
                    ],
                    "type": "function",
                    "view": "function string.format(s: string|number, ...any)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    68,
                    22
                ],
                "name": "format",
                "rawdesc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                "start": [
                    68,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                79,
                                24
                            ],
                            "name": "s",
                            "start": [
                                79,
                                23
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                79,
                                33
                            ],
                            "name": "pattern",
                            "start": [
                                79,
                                26
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                    "finish": [
                        79,
                        38
                    ],
                    "rawdesc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():string, ...unknown"
                        }
                    ],
                    "start": [
                        79,
                        0
                    ],
                    "type": "function",
                    "view": "function string.gmatch(s: string|number, pattern: string|number)\n  -> fun():string, ...unknown"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    79,
                    22
                ],
                "name": "gmatch",
                "rawdesc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                "start": [
                    79,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                92,
                                22
                            ],
                            "name": "s",
                            "start": [
                                92,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                92,
                                31
                            ],
                            "name": "pattern",
                            "start": [
                                92,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                92,
                                37
                            ],
                            "name": "repl",
                            "start": [
                                92,
                                33
                            ],
                            "type": "local",
                            "view": "string|number|function|table"
                        },
                        {
                            "finish": [
                                92,
                                40
                            ],
                            "name": "n",
                            "start": [
                                92,
                                39
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                    "finish": [
                        92,
                        45
                    ],
                    "rawdesc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "count",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        92,
                        0
                    ],
                    "type": "function",
                    "view": "function string.gsub(s: string|number, pattern: string|number, repl: string|number|function|table, n?: integer)\n  -> string\n  2. count: integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    92,
                    20
                ],
                "name": "gsub",
                "rawdesc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                "start": [
                    92,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                102,
                                21
                            ],
                            "name": "s",
                            "start": [
                                102,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                    "finish": [
                        102,
                        26
                    ],
                    "rawdesc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        102,
                        0
                    ],
                    "type": "function",
                    "view": "function string.len(s: string|number)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    102,
                    19
                ],
                "name": "len",
                "rawdesc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                "start": [
                    102,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                112,
                                23
                            ],
                            "name": "s",
                            "start": [
                                112,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                    "finish": [
                        112,
                        28
                    ],
                    "rawdesc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        112,
                        0
                    ],
                    "type": "function",
                    "view": "function string.lower(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    112,
                    21
                ],
                "name": "lower",
                "rawdesc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                "start": [
                    112,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                124,
                                23
                            ],
                            "name": "s",
                            "start": [
                                124,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                124,
                                32
                            ],
                            "name": "pattern",
                            "start": [
                                124,
                                25
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                124,
                                38
                            ],
                            "name": "init",
                            "start": [
                                124,
                                34
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                    "finish": [
                        124,
                        43
                    ],
                    "rawdesc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        124,
                        0
                    ],
                    "type": "function",
                    "view": "function string.match(s: string|number, pattern: string|number, init?: integer)\n  -> ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    124,
                    21
                ],
                "name": "match",
                "rawdesc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                "start": [
                    124,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                138,
                                24
                            ],
                            "name": "fmt",
                            "start": [
                                138,
                                21
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                138,
                                28
                            ],
                            "name": "v1",
                            "start": [
                                138,
                                26
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                138,
                                32
                            ],
                            "name": "v2",
                            "start": [
                                138,
                                30
                            ],
                            "type": "local",
                            "view": "(string|number)?"
                        },
                        {
                            "finish": [
                                138,
                                37
                            ],
                            "start": [
                                138,
                                34
                            ],
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                    "finish": [
                        138,
                        42
                    ],
                    "rawdesc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                    "returns": [
                        {
                            "name": "binary",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        138,
                        0
                    ],
                    "type": "function",
                    "view": "function string.pack(fmt: string, v1: string|number, v2?: string|number, ...string|number)\n  -> binary: string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    138,
                    20
                ],
                "name": "pack",
                "rawdesc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                "start": [
                    138,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                149,
                                28
                            ],
                            "name": "fmt",
                            "start": [
                                149,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                    "finish": [
                        149,
                        33
                    ],
                    "rawdesc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        149,
                        0
                    ],
                    "type": "function",
                    "view": "function string.packsize(fmt: string)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    149,
                    24
                ],
                "name": "packsize",
                "rawdesc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                "start": [
                    149,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                161,
                                21
                            ],
                            "name": "s",
                            "start": [
                                161,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                161,
                                24
                            ],
                            "name": "n",
                            "start": [
                                161,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                161,
                                29
                            ],
                            "name": "sep",
                            "start": [
                                161,
                                26
                            ],
                            "type": "local",
                            "view": "(string|number)?"
                        }
                    ],
                    "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                    "finish": [
                        161,
                        34
                    ],
                    "rawdesc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        161,
                        0
                    ],
                    "type": "function",
                    "view": "function string.rep(s: string|number, n: integer, sep?: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    161,
                    19
                ],
                "name": "rep",
                "rawdesc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                "start": [
                    161,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                171,
                                25
                            ],
                            "name": "s",
                            "start": [
                                171,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                    "finish": [
                        171,
                        30
                    ],
                    "rawdesc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        171,
                        0
                    ],
                    "type": "function",
                    "view": "function string.reverse(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    171,
                    23
                ],
                "name": "reverse",
                "rawdesc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                "start": [
                    171,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                28,
                                32
                            ],
                            "name": "str1",
                            "start": [
                                28,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                28,
                                38
                            ],
                            "name": "str2",
                            "start": [
                                28,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": [
                        30,
                        3
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        28,
                        0
                    ],
                    "type": "function",
                    "view": "function string.starts_with(str1: string, str2: string)\n  -> boolean"
                },
                "file": "mods/spacea_api/utils.lua",
                "finish": [
                    28,
                    27
                ],
                "name": "starts_with",
                "start": [
                    28,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                183,
                                21
                            ],
                            "name": "s",
                            "start": [
                                183,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                183,
                                24
                            ],
                            "name": "i",
                            "start": [
                                183,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                183,
                                27
                            ],
                            "name": "j",
                            "start": [
                                183,
                                26
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                    "finish": [
                        183,
                        32
                    ],
                    "rawdesc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        183,
                        0
                    ],
                    "type": "function",
                    "view": "function string.sub(s: string|number, i: integer, j?: integer)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    183,
                    19
                ],
                "name": "sub",
                "rawdesc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                "start": [
                    183,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/51/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                196,
                                26
                            ],
                            "name": "fmt",
                            "start": [
                                196,
                                23
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                196,
                                29
                            ],
                            "name": "s",
                            "start": [
                                196,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                196,
                                34
                            ],
                            "name": "pos",
                            "start": [
                                196,
                                31
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/51/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                    "finish": [
                        196,
                        39
                    ],
                    "rawdesc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/51/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        196,
                        0
                    ],
                    "type": "function",
                    "view": "function string.unpack(fmt: string, s: string, pos?: integer)\n  -> ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    196,
                    22
                ],
                "name": "unpack",
                "rawdesc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/51/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                "start": [
                    196,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                206,
                                23
                            ],
                            "name": "s",
                            "start": [
                                206,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                    "finish": [
                        206,
                        28
                    ],
                    "rawdesc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        206,
                        0
                    ],
                    "type": "function",
                    "view": "function string.upper(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/string.lua",
                "finish": [
                    206,
                    21
                ],
                "name": "upper",
                "rawdesc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                "start": [
                    206,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "stringlib",
        "type": "type",
        "view": "stringlib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
                    "finish": [
                        8,
                        10
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
                    "start": [
                        8,
                        8
                    ],
                    "type": "table",
                    "view": "tablelib"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    8,
                    5
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
                "start": [
                    8,
                    0
                ],
                "type": "setglobal",
                "view": "tablelib",
                "visible": "public"
            }
        ],
        "name": "table",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "fields": [
                            {
                                "finish": [
                                    11,
                                    31
                                ],
                                "name": {
                                    "finish": [
                                        11,
                                        27
                                    ],
                                    "start": [
                                        11,
                                        26
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                11,
                                                27
                                            ],
                                            "start": [
                                                11,
                                                26
                                            ],
                                            "type": "doc.generic.name",
                                            "view": "<K>"
                                        }
                                    ],
                                    "view": "<K>"
                                },
                                "start": [
                                    11,
                                    26
                                ],
                                "type": "doc.type.field",
                                "view": "<V>"
                            }
                        ],
                        "finish": [
                            11,
                            33
                        ],
                        "start": [
                            11,
                            23
                        ],
                        "type": "doc.type.table",
                        "view": "{ [<K>]: <V> }"
                    }
                ],
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/builtin.lua",
                "finish": [
                    11,
                    33
                ],
                "start": [
                    11,
                    10
                ],
                "type": "doc.class",
                "view": "table",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "table",
        "type": "type",
        "view": "table"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                21,
                                26
                            ],
                            "name": "list",
                            "start": [
                                21,
                                22
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                21,
                                31
                            ],
                            "name": "sep",
                            "start": [
                                21,
                                28
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                21,
                                34
                            ],
                            "name": "i",
                            "start": [
                                21,
                                33
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                21,
                                37
                            ],
                            "name": "j",
                            "start": [
                                21,
                                36
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                    "finish": [
                        21,
                        42
                    ],
                    "rawdesc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        21,
                        0
                    ],
                    "type": "function",
                    "view": "function table.concat(list: table, sep?: string, i?: integer, j?: integer)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    21,
                    21
                ],
                "name": "concat",
                "rawdesc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                "start": [
                    21,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.concat",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * returns a deep copy of `table`",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                15,
                                25
                            ],
                            "name": "table",
                            "start": [
                                15,
                                20
                            ],
                            "type": "local",
                            "view": "<T:table>"
                        }
                    ],
                    "desc": " * returns a deep copy of `table`",
                    "finish": [
                        15,
                        30
                    ],
                    "rawdesc": " * returns a deep copy of `table`",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T:table>"
                        }
                    ],
                    "start": [
                        15,
                        0
                    ],
                    "type": "function",
                    "view": "function table.copy(table: <T:table>)\n  -> <T:table>"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/table.lua",
                "finish": [
                    15,
                    19
                ],
                "name": "copy",
                "rawdesc": " * returns a deep copy of `table`",
                "start": [
                    15,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                14,
                                25
                            ],
                            "name": "table",
                            "start": [
                                14,
                                20
                            ],
                            "type": "local",
                            "view": "<T:table>"
                        }
                    ],
                    "finish": [
                        14,
                        30
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T:table>"
                        }
                    ],
                    "start": [
                        14,
                        0
                    ],
                    "type": "function",
                    "view": "function table.copy(table: <T:table>)\n  -> <T:table>"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/table.lua",
                "finish": [
                    14,
                    19
                ],
                "name": "copy",
                "start": [
                    14,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.copy",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                136,
                                27
                            ],
                            "name": "list",
                            "start": [
                                136,
                                23
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                136,
                                37
                            ],
                            "name": "callback",
                            "start": [
                                136,
                                29
                            ],
                            "type": "local",
                            "view": "fun(key: string, value: any):<T>|nil"
                        }
                    ],
                    "desc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                    "finish": [
                        136,
                        42
                    ],
                    "rawdesc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>|nil"
                        }
                    ],
                    "start": [
                        136,
                        0
                    ],
                    "type": "function",
                    "view": "function table.foreach(list: any, callback: fun(key: string, value: any):<T>|nil)\n  -> <T>|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    136,
                    22
                ],
                "name": "foreach",
                "rawdesc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                "start": [
                    136,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.foreach",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                149,
                                28
                            ],
                            "name": "list",
                            "start": [
                                149,
                                24
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                149,
                                38
                            ],
                            "name": "callback",
                            "start": [
                                149,
                                30
                            ],
                            "type": "local",
                            "view": "fun(key: string, value: any):<T>|nil"
                        }
                    ],
                    "desc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                    "finish": [
                        149,
                        43
                    ],
                    "rawdesc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>|nil"
                        }
                    ],
                    "start": [
                        149,
                        0
                    ],
                    "type": "function",
                    "view": "function table.foreachi(list: any, callback: fun(key: string, value: any):<T>|nil)\n  -> <T>|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    149,
                    23
                ],
                "name": "foreachi",
                "rawdesc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                "start": [
                    149,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.foreachi",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                162,
                                24
                            ],
                            "name": "list",
                            "start": [
                                162,
                                20
                            ],
                            "type": "local",
                            "view": "<T>[]"
                        }
                    ],
                    "desc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                    "finish": [
                        162,
                        29
                    ],
                    "rawdesc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        162,
                        0
                    ],
                    "type": "function",
                    "view": "function table.getn(list: <T>[])\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    162,
                    19
                ],
                "name": "getn",
                "rawdesc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                "start": [
                    162,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.getn",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "   the value `val` in the table `list`. Non-numerical indices are ignored.\n   If `val` could not be found, `-1` is returned. `list` must not have\n   negative indices.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                25,
                                27
                            ],
                            "name": "list",
                            "start": [
                                25,
                                23
                            ],
                            "type": "local",
                            "view": "<V>[]"
                        },
                        {
                            "finish": [
                                25,
                                32
                            ],
                            "name": "val",
                            "start": [
                                25,
                                29
                            ],
                            "type": "local",
                            "view": "<V>"
                        }
                    ],
                    "desc": "   the value `val` in the table `list`. Non-numerical indices are ignored.\n   If `val` could not be found, `-1` is returned. `list` must not have\n   negative indices.",
                    "finish": [
                        25,
                        37
                    ],
                    "rawdesc": "   the value `val` in the table `list`. Non-numerical indices are ignored.\n   If `val` could not be found, `-1` is returned. `list` must not have\n   negative indices.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        25,
                        0
                    ],
                    "type": "function",
                    "view": "function table.indexof(list: <V>[], val: <V>)\n  -> integer"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/table.lua",
                "finish": [
                    25,
                    22
                ],
                "name": "indexof",
                "rawdesc": "   the value `val` in the table `list`. Non-numerical indices are ignored.\n   If `val` could not be found, `-1` is returned. `list` must not have\n   negative indices.",
                "start": [
                    25,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                21,
                                27
                            ],
                            "name": "list",
                            "start": [
                                21,
                                23
                            ],
                            "type": "local",
                            "view": "<V>[]"
                        },
                        {
                            "finish": [
                                21,
                                32
                            ],
                            "name": "val",
                            "start": [
                                21,
                                29
                            ],
                            "type": "local",
                            "view": "<V>"
                        }
                    ],
                    "finish": [
                        21,
                        37
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        21,
                        0
                    ],
                    "type": "function",
                    "view": "function table.indexof(list: <V>[], val: <V>)\n  -> integer"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/table.lua",
                "finish": [
                    21,
                    22
                ],
                "name": "indexof",
                "start": [
                    21,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.indexof",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                32,
                                26
                            ],
                            "name": "list",
                            "start": [
                                32,
                                22
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                32,
                                31
                            ],
                            "name": "pos",
                            "start": [
                                32,
                                28
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                32,
                                38
                            ],
                            "name": "value",
                            "start": [
                                32,
                                33
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                    "finish": [
                        32,
                        43
                    ],
                    "rawdesc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                    "start": [
                        32,
                        0
                    ],
                    "type": "function",
                    "view": "function table.insert(list: table, pos: integer, value: any)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    32,
                    21
                ],
                "name": "insert",
                "rawdesc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                "start": [
                    32,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.insert",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Appends all values in `other_table` to `table` - uses `#table + 1` to\n   find new indices.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                41,
                                31
                            ],
                            "name": "table",
                            "start": [
                                41,
                                26
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                41,
                                44
                            ],
                            "name": "other_table",
                            "start": [
                                41,
                                33
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": " * Appends all values in `other_table` to `table` - uses `#table + 1` to\n   find new indices.",
                    "finish": [
                        41,
                        49
                    ],
                    "rawdesc": " * Appends all values in `other_table` to `table` - uses `#table + 1` to\n   find new indices.",
                    "start": [
                        41,
                        0
                    ],
                    "type": "function",
                    "view": "function table.insert_all(table: table, other_table: table)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/table.lua",
                "finish": [
                    41,
                    25
                ],
                "name": "insert_all",
                "rawdesc": " * Appends all values in `other_table` to `table` - uses `#table + 1` to\n   find new indices.",
                "start": [
                    41,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                32,
                                31
                            ],
                            "name": "table",
                            "start": [
                                32,
                                26
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                32,
                                44
                            ],
                            "name": "other_table",
                            "start": [
                                32,
                                33
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "finish": [
                        32,
                        49
                    ],
                    "start": [
                        32,
                        0
                    ],
                    "type": "function",
                    "view": "function table.insert_all(table: table, other_table: table)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/table.lua",
                "finish": [
                    32,
                    25
                ],
                "name": "insert_all",
                "start": [
                    32,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.insert_all",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * If multiple keys in `t` map to the same value, it is unspecified which\n   value maps to that key.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                49,
                                31
                            ],
                            "name": "t",
                            "start": [
                                49,
                                30
                            ],
                            "type": "local",
                            "view": "table<<K>, <V>>"
                        }
                    ],
                    "desc": " * If multiple keys in `t` map to the same value, it is unspecified which\n   value maps to that key.",
                    "finish": [
                        49,
                        36
                    ],
                    "rawdesc": " * If multiple keys in `t` map to the same value, it is unspecified which\n   value maps to that key.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table<<V>, <K>>"
                        }
                    ],
                    "start": [
                        49,
                        0
                    ],
                    "type": "function",
                    "view": "function table.key_value_swap(t: table<<K>, <V>>)\n  -> table<<V>, <K>>"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/table.lua",
                "finish": [
                    49,
                    29
                ],
                "name": "key_value_swap",
                "rawdesc": " * If multiple keys in `t` map to the same value, it is unspecified which\n   value maps to that key.",
                "start": [
                    49,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                38,
                                31
                            ],
                            "name": "t",
                            "start": [
                                38,
                                30
                            ],
                            "type": "local",
                            "view": "table<<K>, <V>>"
                        }
                    ],
                    "finish": [
                        38,
                        36
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table<<V>, <K>>"
                        }
                    ],
                    "start": [
                        38,
                        0
                    ],
                    "type": "function",
                    "view": "function table.key_value_swap(t: table<<K>, <V>>)\n  -> table<<V>, <K>>"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/table.lua",
                "finish": [
                    38,
                    29
                ],
                "name": "key_value_swap",
                "start": [
                    38,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.key_value_swap",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "   the value `val` in the table `table`. If multiple keys contain `val`,\n   it is unspecified which key will be returned.\n   If `val` could not be found, `nil` is returned.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                35,
                                26
                            ],
                            "name": "table",
                            "start": [
                                35,
                                21
                            ],
                            "type": "local",
                            "view": "table<<K>, <V>>"
                        },
                        {
                            "finish": [
                                35,
                                31
                            ],
                            "name": "val",
                            "start": [
                                35,
                                28
                            ],
                            "type": "local",
                            "view": "<V>"
                        }
                    ],
                    "desc": "   the value `val` in the table `table`. If multiple keys contain `val`,\n   it is unspecified which key will be returned.\n   If `val` could not be found, `nil` is returned.",
                    "finish": [
                        35,
                        36
                    ],
                    "rawdesc": "   the value `val` in the table `table`. If multiple keys contain `val`,\n   it is unspecified which key will be returned.\n   If `val` could not be found, `nil` is returned.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<K>?"
                        }
                    ],
                    "start": [
                        35,
                        0
                    ],
                    "type": "function",
                    "view": "function table.keyof(table: table<<K>, <V>>, val: <V>)\n  -> <K>?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/table.lua",
                "finish": [
                    35,
                    20
                ],
                "name": "keyof",
                "rawdesc": "   the value `val` in the table `table`. If multiple keys contain `val`,\n   it is unspecified which key will be returned.\n   If `val` could not be found, `nil` is returned.",
                "start": [
                    35,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                28,
                                26
                            ],
                            "name": "table",
                            "start": [
                                28,
                                21
                            ],
                            "type": "local",
                            "view": "table<<K>, <V>>"
                        },
                        {
                            "finish": [
                                28,
                                31
                            ],
                            "name": "val",
                            "start": [
                                28,
                                28
                            ],
                            "type": "local",
                            "view": "<V>"
                        }
                    ],
                    "finish": [
                        28,
                        36
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<K>?"
                        }
                    ],
                    "start": [
                        28,
                        0
                    ],
                    "type": "function",
                    "view": "function table.keyof(table: table<<K>, <V>>, val: <V>)\n  -> <K>?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/table.lua",
                "finish": [
                    28,
                    20
                ],
                "name": "keyof",
                "start": [
                    28,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.keyof",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                43,
                                25
                            ],
                            "name": "table",
                            "start": [
                                43,
                                20
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                    "finish": [
                        43,
                        30
                    ],
                    "rawdesc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        43,
                        0
                    ],
                    "type": "function",
                    "view": "function table.maxn(table: table)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    43,
                    19
                ],
                "name": "maxn",
                "rawdesc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                "start": [
                    43,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.maxn",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                63,
                                22
                            ],
                            "name": "a1",
                            "start": [
                                63,
                                20
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                63,
                                25
                            ],
                            "name": "f",
                            "start": [
                                63,
                                24
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                63,
                                28
                            ],
                            "name": "e",
                            "start": [
                                63,
                                27
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                63,
                                31
                            ],
                            "name": "t",
                            "start": [
                                63,
                                30
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                63,
                                35
                            ],
                            "name": "a2",
                            "start": [
                                63,
                                33
                            ],
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                    "finish": [
                        63,
                        40
                    ],
                    "rawdesc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                    "returns": [
                        {
                            "name": "a2",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        63,
                        0
                    ],
                    "type": "function",
                    "view": "function table.move(a1: table, f: integer, e: integer, t: integer, a2?: table)\n  -> a2: table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    63,
                    19
                ],
                "name": "move",
                "rawdesc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                "start": [
                    63,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.move",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                73,
                                23
                            ],
                            "start": [
                                73,
                                20
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                    "finish": [
                        73,
                        28
                    ],
                    "rawdesc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        73,
                        0
                    ],
                    "type": "function",
                    "view": "function table.pack(...any)\n  -> table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    73,
                    19
                ],
                "name": "pack",
                "rawdesc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                "start": [
                    73,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.pack",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                83,
                                26
                            ],
                            "name": "list",
                            "start": [
                                83,
                                22
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                83,
                                31
                            ],
                            "name": "pos",
                            "start": [
                                83,
                                28
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                    "finish": [
                        83,
                        36
                    ],
                    "rawdesc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        83,
                        0
                    ],
                    "type": "function",
                    "view": "function table.remove(list: table, pos?: integer)\n  -> any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    83,
                    21
                ],
                "name": "remove",
                "rawdesc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                "start": [
                    83,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.remove",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Shuffles elements `from` to `to` in `table` in place\n * `from` defaults to `1`\n * `to` defaults to `#table`\n * `random_func` defaults to `math.random`. This function receives two\n   integers as arguments and should return a random integer inclusively\n   between them.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                61,
                                28
                            ],
                            "name": "table",
                            "start": [
                                61,
                                23
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                61,
                                34
                            ],
                            "name": "from",
                            "start": [
                                61,
                                30
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                61,
                                38
                            ],
                            "name": "to",
                            "start": [
                                61,
                                36
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                61,
                                51
                            ],
                            "name": "random_func",
                            "start": [
                                61,
                                40
                            ],
                            "type": "local",
                            "view": "(fun(min: integer, max: integer):integer)?"
                        }
                    ],
                    "desc": " * Shuffles elements `from` to `to` in `table` in place\n * `from` defaults to `1`\n * `to` defaults to `#table`\n * `random_func` defaults to `math.random`. This function receives two\n   integers as arguments and should return a random integer inclusively\n   between them.",
                    "finish": [
                        61,
                        56
                    ],
                    "rawdesc": " * Shuffles elements `from` to `to` in `table` in place\n * `from` defaults to `1`\n * `to` defaults to `#table`\n * `random_func` defaults to `math.random`. This function receives two\n   integers as arguments and should return a random integer inclusively\n   between them.",
                    "start": [
                        61,
                        0
                    ],
                    "type": "function",
                    "view": "function table.shuffle(table: table, from?: integer, to?: integer, random_func?: fun(min: integer, max: integer):integer)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/table.lua",
                "finish": [
                    61,
                    22
                ],
                "name": "shuffle",
                "rawdesc": " * Shuffles elements `from` to `to` in `table` in place\n * `from` defaults to `1`\n * `to` defaults to `#table`\n * `random_func` defaults to `math.random`. This function receives two\n   integers as arguments and should return a random integer inclusively\n   between them.",
                "start": [
                    61,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                44,
                                28
                            ],
                            "name": "table",
                            "start": [
                                44,
                                23
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                44,
                                34
                            ],
                            "name": "from",
                            "start": [
                                44,
                                30
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                44,
                                38
                            ],
                            "name": "to",
                            "start": [
                                44,
                                36
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                44,
                                51
                            ],
                            "name": "random_func",
                            "start": [
                                44,
                                40
                            ],
                            "type": "local",
                            "view": "(fun(min: integer, max: integer):integer)?"
                        }
                    ],
                    "finish": [
                        44,
                        56
                    ],
                    "start": [
                        44,
                        0
                    ],
                    "type": "function",
                    "view": "function table.shuffle(table: table, from?: integer, to?: integer, random_func?: fun(min: integer, max: integer):integer)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/table.lua",
                "finish": [
                    44,
                    22
                ],
                "name": "shuffle",
                "start": [
                    44,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.shuffle",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                93,
                                24
                            ],
                            "name": "list",
                            "start": [
                                93,
                                20
                            ],
                            "type": "local",
                            "view": "<T>[]"
                        },
                        {
                            "finish": [
                                93,
                                30
                            ],
                            "name": "comp",
                            "start": [
                                93,
                                26
                            ],
                            "type": "local",
                            "view": "(fun(a: <T>, b: <T>):boolean)?"
                        }
                    ],
                    "desc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                    "finish": [
                        93,
                        35
                    ],
                    "rawdesc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                    "start": [
                        93,
                        0
                    ],
                    "type": "function",
                    "view": "function table.sort(list: <T>[], comp?: fun(a: <T>, b: <T>):boolean)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    93,
                    19
                ],
                "name": "sort",
                "rawdesc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                "start": [
                    93,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.sort",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                123,
                                26
                            ],
                            "name": "list",
                            "start": [
                                123,
                                22
                            ],
                            "type": "local",
                            "view": "{ [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9>, [10]: <T10> }"
                        },
                        {
                            "finish": [
                                123,
                                29
                            ],
                            "name": "i",
                            "start": [
                                123,
                                28
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                123,
                                32
                            ],
                            "name": "j",
                            "start": [
                                123,
                                31
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                    "finish": [
                        123,
                        37
                    ],
                    "rawdesc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T1>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T2>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T3>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T4>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T5>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T6>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T7>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T8>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T9>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T10>"
                        }
                    ],
                    "start": [
                        123,
                        0
                    ],
                    "type": "function",
                    "view": "function table.unpack(list: { [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9>, [10]: <T10> }, i?: integer, j?: integer)\n  -> <T1>\n  2. <T2>\n  3. <T3>\n  4. <T4>\n  5. <T5>\n  6. <T6>\n  7. <T7>\n  8. <T8>\n  9. <T9>\n 10. <T10>"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    123,
                    21
                ],
                "name": "unpack",
                "rawdesc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                "start": [
                    123,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.unpack",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    7,
                    18
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "tablelib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                21,
                                26
                            ],
                            "name": "list",
                            "start": [
                                21,
                                22
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                21,
                                31
                            ],
                            "name": "sep",
                            "start": [
                                21,
                                28
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                21,
                                34
                            ],
                            "name": "i",
                            "start": [
                                21,
                                33
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                21,
                                37
                            ],
                            "name": "j",
                            "start": [
                                21,
                                36
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                    "finish": [
                        21,
                        42
                    ],
                    "rawdesc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        21,
                        0
                    ],
                    "type": "function",
                    "view": "function table.concat(list: table, sep?: string, i?: integer, j?: integer)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    21,
                    21
                ],
                "name": "concat",
                "rawdesc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                "start": [
                    21,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * returns a deep copy of `table`",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                15,
                                25
                            ],
                            "name": "table",
                            "start": [
                                15,
                                20
                            ],
                            "type": "local",
                            "view": "<T:table>"
                        }
                    ],
                    "desc": " * returns a deep copy of `table`",
                    "finish": [
                        15,
                        30
                    ],
                    "rawdesc": " * returns a deep copy of `table`",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T:table>"
                        }
                    ],
                    "start": [
                        15,
                        0
                    ],
                    "type": "function",
                    "view": "function table.copy(table: <T:table>)\n  -> <T:table>"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/table.lua",
                "finish": [
                    15,
                    19
                ],
                "name": "copy",
                "rawdesc": " * returns a deep copy of `table`",
                "start": [
                    15,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                14,
                                25
                            ],
                            "name": "table",
                            "start": [
                                14,
                                20
                            ],
                            "type": "local",
                            "view": "<T:table>"
                        }
                    ],
                    "finish": [
                        14,
                        30
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T:table>"
                        }
                    ],
                    "start": [
                        14,
                        0
                    ],
                    "type": "function",
                    "view": "function table.copy(table: <T:table>)\n  -> <T:table>"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/table.lua",
                "finish": [
                    14,
                    19
                ],
                "name": "copy",
                "start": [
                    14,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                136,
                                27
                            ],
                            "name": "list",
                            "start": [
                                136,
                                23
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                136,
                                37
                            ],
                            "name": "callback",
                            "start": [
                                136,
                                29
                            ],
                            "type": "local",
                            "view": "fun(key: string, value: any):<T>|nil"
                        }
                    ],
                    "desc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                    "finish": [
                        136,
                        42
                    ],
                    "rawdesc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>|nil"
                        }
                    ],
                    "start": [
                        136,
                        0
                    ],
                    "type": "function",
                    "view": "function table.foreach(list: any, callback: fun(key: string, value: any):<T>|nil)\n  -> <T>|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    136,
                    22
                ],
                "name": "foreach",
                "rawdesc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                "start": [
                    136,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                149,
                                28
                            ],
                            "name": "list",
                            "start": [
                                149,
                                24
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                149,
                                38
                            ],
                            "name": "callback",
                            "start": [
                                149,
                                30
                            ],
                            "type": "local",
                            "view": "fun(key: string, value: any):<T>|nil"
                        }
                    ],
                    "desc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                    "finish": [
                        149,
                        43
                    ],
                    "rawdesc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>|nil"
                        }
                    ],
                    "start": [
                        149,
                        0
                    ],
                    "type": "function",
                    "view": "function table.foreachi(list: any, callback: fun(key: string, value: any):<T>|nil)\n  -> <T>|nil"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    149,
                    23
                ],
                "name": "foreachi",
                "rawdesc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                "start": [
                    149,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                162,
                                24
                            ],
                            "name": "list",
                            "start": [
                                162,
                                20
                            ],
                            "type": "local",
                            "view": "<T>[]"
                        }
                    ],
                    "desc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                    "finish": [
                        162,
                        29
                    ],
                    "rawdesc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        162,
                        0
                    ],
                    "type": "function",
                    "view": "function table.getn(list: <T>[])\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    162,
                    19
                ],
                "name": "getn",
                "rawdesc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                "start": [
                    162,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "   the value `val` in the table `list`. Non-numerical indices are ignored.\n   If `val` could not be found, `-1` is returned. `list` must not have\n   negative indices.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                25,
                                27
                            ],
                            "name": "list",
                            "start": [
                                25,
                                23
                            ],
                            "type": "local",
                            "view": "<V>[]"
                        },
                        {
                            "finish": [
                                25,
                                32
                            ],
                            "name": "val",
                            "start": [
                                25,
                                29
                            ],
                            "type": "local",
                            "view": "<V>"
                        }
                    ],
                    "desc": "   the value `val` in the table `list`. Non-numerical indices are ignored.\n   If `val` could not be found, `-1` is returned. `list` must not have\n   negative indices.",
                    "finish": [
                        25,
                        37
                    ],
                    "rawdesc": "   the value `val` in the table `list`. Non-numerical indices are ignored.\n   If `val` could not be found, `-1` is returned. `list` must not have\n   negative indices.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        25,
                        0
                    ],
                    "type": "function",
                    "view": "function table.indexof(list: <V>[], val: <V>)\n  -> integer"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/table.lua",
                "finish": [
                    25,
                    22
                ],
                "name": "indexof",
                "rawdesc": "   the value `val` in the table `list`. Non-numerical indices are ignored.\n   If `val` could not be found, `-1` is returned. `list` must not have\n   negative indices.",
                "start": [
                    25,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                21,
                                27
                            ],
                            "name": "list",
                            "start": [
                                21,
                                23
                            ],
                            "type": "local",
                            "view": "<V>[]"
                        },
                        {
                            "finish": [
                                21,
                                32
                            ],
                            "name": "val",
                            "start": [
                                21,
                                29
                            ],
                            "type": "local",
                            "view": "<V>"
                        }
                    ],
                    "finish": [
                        21,
                        37
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        21,
                        0
                    ],
                    "type": "function",
                    "view": "function table.indexof(list: <V>[], val: <V>)\n  -> integer"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/table.lua",
                "finish": [
                    21,
                    22
                ],
                "name": "indexof",
                "start": [
                    21,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                32,
                                26
                            ],
                            "name": "list",
                            "start": [
                                32,
                                22
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                32,
                                31
                            ],
                            "name": "pos",
                            "start": [
                                32,
                                28
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                32,
                                38
                            ],
                            "name": "value",
                            "start": [
                                32,
                                33
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                    "finish": [
                        32,
                        43
                    ],
                    "rawdesc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                    "start": [
                        32,
                        0
                    ],
                    "type": "function",
                    "view": "function table.insert(list: table, pos: integer, value: any)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    32,
                    21
                ],
                "name": "insert",
                "rawdesc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                "start": [
                    32,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Appends all values in `other_table` to `table` - uses `#table + 1` to\n   find new indices.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                41,
                                31
                            ],
                            "name": "table",
                            "start": [
                                41,
                                26
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                41,
                                44
                            ],
                            "name": "other_table",
                            "start": [
                                41,
                                33
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": " * Appends all values in `other_table` to `table` - uses `#table + 1` to\n   find new indices.",
                    "finish": [
                        41,
                        49
                    ],
                    "rawdesc": " * Appends all values in `other_table` to `table` - uses `#table + 1` to\n   find new indices.",
                    "start": [
                        41,
                        0
                    ],
                    "type": "function",
                    "view": "function table.insert_all(table: table, other_table: table)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/table.lua",
                "finish": [
                    41,
                    25
                ],
                "name": "insert_all",
                "rawdesc": " * Appends all values in `other_table` to `table` - uses `#table + 1` to\n   find new indices.",
                "start": [
                    41,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                32,
                                31
                            ],
                            "name": "table",
                            "start": [
                                32,
                                26
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                32,
                                44
                            ],
                            "name": "other_table",
                            "start": [
                                32,
                                33
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "finish": [
                        32,
                        49
                    ],
                    "start": [
                        32,
                        0
                    ],
                    "type": "function",
                    "view": "function table.insert_all(table: table, other_table: table)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/table.lua",
                "finish": [
                    32,
                    25
                ],
                "name": "insert_all",
                "start": [
                    32,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * If multiple keys in `t` map to the same value, it is unspecified which\n   value maps to that key.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                49,
                                31
                            ],
                            "name": "t",
                            "start": [
                                49,
                                30
                            ],
                            "type": "local",
                            "view": "table<<K>, <V>>"
                        }
                    ],
                    "desc": " * If multiple keys in `t` map to the same value, it is unspecified which\n   value maps to that key.",
                    "finish": [
                        49,
                        36
                    ],
                    "rawdesc": " * If multiple keys in `t` map to the same value, it is unspecified which\n   value maps to that key.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table<<V>, <K>>"
                        }
                    ],
                    "start": [
                        49,
                        0
                    ],
                    "type": "function",
                    "view": "function table.key_value_swap(t: table<<K>, <V>>)\n  -> table<<V>, <K>>"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/table.lua",
                "finish": [
                    49,
                    29
                ],
                "name": "key_value_swap",
                "rawdesc": " * If multiple keys in `t` map to the same value, it is unspecified which\n   value maps to that key.",
                "start": [
                    49,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                38,
                                31
                            ],
                            "name": "t",
                            "start": [
                                38,
                                30
                            ],
                            "type": "local",
                            "view": "table<<K>, <V>>"
                        }
                    ],
                    "finish": [
                        38,
                        36
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table<<V>, <K>>"
                        }
                    ],
                    "start": [
                        38,
                        0
                    ],
                    "type": "function",
                    "view": "function table.key_value_swap(t: table<<K>, <V>>)\n  -> table<<V>, <K>>"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/table.lua",
                "finish": [
                    38,
                    29
                ],
                "name": "key_value_swap",
                "start": [
                    38,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "   the value `val` in the table `table`. If multiple keys contain `val`,\n   it is unspecified which key will be returned.\n   If `val` could not be found, `nil` is returned.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                35,
                                26
                            ],
                            "name": "table",
                            "start": [
                                35,
                                21
                            ],
                            "type": "local",
                            "view": "table<<K>, <V>>"
                        },
                        {
                            "finish": [
                                35,
                                31
                            ],
                            "name": "val",
                            "start": [
                                35,
                                28
                            ],
                            "type": "local",
                            "view": "<V>"
                        }
                    ],
                    "desc": "   the value `val` in the table `table`. If multiple keys contain `val`,\n   it is unspecified which key will be returned.\n   If `val` could not be found, `nil` is returned.",
                    "finish": [
                        35,
                        36
                    ],
                    "rawdesc": "   the value `val` in the table `table`. If multiple keys contain `val`,\n   it is unspecified which key will be returned.\n   If `val` could not be found, `nil` is returned.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<K>?"
                        }
                    ],
                    "start": [
                        35,
                        0
                    ],
                    "type": "function",
                    "view": "function table.keyof(table: table<<K>, <V>>, val: <V>)\n  -> <K>?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/table.lua",
                "finish": [
                    35,
                    20
                ],
                "name": "keyof",
                "rawdesc": "   the value `val` in the table `table`. If multiple keys contain `val`,\n   it is unspecified which key will be returned.\n   If `val` could not be found, `nil` is returned.",
                "start": [
                    35,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                28,
                                26
                            ],
                            "name": "table",
                            "start": [
                                28,
                                21
                            ],
                            "type": "local",
                            "view": "table<<K>, <V>>"
                        },
                        {
                            "finish": [
                                28,
                                31
                            ],
                            "name": "val",
                            "start": [
                                28,
                                28
                            ],
                            "type": "local",
                            "view": "<V>"
                        }
                    ],
                    "finish": [
                        28,
                        36
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<K>?"
                        }
                    ],
                    "start": [
                        28,
                        0
                    ],
                    "type": "function",
                    "view": "function table.keyof(table: table<<K>, <V>>, val: <V>)\n  -> <K>?"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/table.lua",
                "finish": [
                    28,
                    20
                ],
                "name": "keyof",
                "start": [
                    28,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                43,
                                25
                            ],
                            "name": "table",
                            "start": [
                                43,
                                20
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                    "finish": [
                        43,
                        30
                    ],
                    "rawdesc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        43,
                        0
                    ],
                    "type": "function",
                    "view": "function table.maxn(table: table)\n  -> integer"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    43,
                    19
                ],
                "name": "maxn",
                "rawdesc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                "start": [
                    43,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                63,
                                22
                            ],
                            "name": "a1",
                            "start": [
                                63,
                                20
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                63,
                                25
                            ],
                            "name": "f",
                            "start": [
                                63,
                                24
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                63,
                                28
                            ],
                            "name": "e",
                            "start": [
                                63,
                                27
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                63,
                                31
                            ],
                            "name": "t",
                            "start": [
                                63,
                                30
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                63,
                                35
                            ],
                            "name": "a2",
                            "start": [
                                63,
                                33
                            ],
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                    "finish": [
                        63,
                        40
                    ],
                    "rawdesc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                    "returns": [
                        {
                            "name": "a2",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        63,
                        0
                    ],
                    "type": "function",
                    "view": "function table.move(a1: table, f: integer, e: integer, t: integer, a2?: table)\n  -> a2: table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    63,
                    19
                ],
                "name": "move",
                "rawdesc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                "start": [
                    63,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                73,
                                23
                            ],
                            "start": [
                                73,
                                20
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                    "finish": [
                        73,
                        28
                    ],
                    "rawdesc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        73,
                        0
                    ],
                    "type": "function",
                    "view": "function table.pack(...any)\n  -> table"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    73,
                    19
                ],
                "name": "pack",
                "rawdesc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                "start": [
                    73,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                83,
                                26
                            ],
                            "name": "list",
                            "start": [
                                83,
                                22
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                83,
                                31
                            ],
                            "name": "pos",
                            "start": [
                                83,
                                28
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                    "finish": [
                        83,
                        36
                    ],
                    "rawdesc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        83,
                        0
                    ],
                    "type": "function",
                    "view": "function table.remove(list: table, pos?: integer)\n  -> any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    83,
                    21
                ],
                "name": "remove",
                "rawdesc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                "start": [
                    83,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Shuffles elements `from` to `to` in `table` in place\n * `from` defaults to `1`\n * `to` defaults to `#table`\n * `random_func` defaults to `math.random`. This function receives two\n   integers as arguments and should return a random integer inclusively\n   between them.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                61,
                                28
                            ],
                            "name": "table",
                            "start": [
                                61,
                                23
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                61,
                                34
                            ],
                            "name": "from",
                            "start": [
                                61,
                                30
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                61,
                                38
                            ],
                            "name": "to",
                            "start": [
                                61,
                                36
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                61,
                                51
                            ],
                            "name": "random_func",
                            "start": [
                                61,
                                40
                            ],
                            "type": "local",
                            "view": "(fun(min: integer, max: integer):integer)?"
                        }
                    ],
                    "desc": " * Shuffles elements `from` to `to` in `table` in place\n * `from` defaults to `1`\n * `to` defaults to `#table`\n * `random_func` defaults to `math.random`. This function receives two\n   integers as arguments and should return a random integer inclusively\n   between them.",
                    "finish": [
                        61,
                        56
                    ],
                    "rawdesc": " * Shuffles elements `from` to `to` in `table` in place\n * `from` defaults to `1`\n * `to` defaults to `#table`\n * `random_func` defaults to `math.random`. This function receives two\n   integers as arguments and should return a random integer inclusively\n   between them.",
                    "start": [
                        61,
                        0
                    ],
                    "type": "function",
                    "view": "function table.shuffle(table: table, from?: integer, to?: integer, random_func?: fun(min: integer, max: integer):integer)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/table.lua",
                "finish": [
                    61,
                    22
                ],
                "name": "shuffle",
                "rawdesc": " * Shuffles elements `from` to `to` in `table` in place\n * `from` defaults to `1`\n * `to` defaults to `#table`\n * `random_func` defaults to `math.random`. This function receives two\n   integers as arguments and should return a random integer inclusively\n   between them.",
                "start": [
                    61,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                44,
                                28
                            ],
                            "name": "table",
                            "start": [
                                44,
                                23
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                44,
                                34
                            ],
                            "name": "from",
                            "start": [
                                44,
                                30
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                44,
                                38
                            ],
                            "name": "to",
                            "start": [
                                44,
                                36
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                44,
                                51
                            ],
                            "name": "random_func",
                            "start": [
                                44,
                                40
                            ],
                            "type": "local",
                            "view": "(fun(min: integer, max: integer):integer)?"
                        }
                    ],
                    "finish": [
                        44,
                        56
                    ],
                    "start": [
                        44,
                        0
                    ],
                    "type": "function",
                    "view": "function table.shuffle(table: table, from?: integer, to?: integer, random_func?: fun(min: integer, max: integer):integer)"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/table.lua",
                "finish": [
                    44,
                    22
                ],
                "name": "shuffle",
                "start": [
                    44,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                93,
                                24
                            ],
                            "name": "list",
                            "start": [
                                93,
                                20
                            ],
                            "type": "local",
                            "view": "<T>[]"
                        },
                        {
                            "finish": [
                                93,
                                30
                            ],
                            "name": "comp",
                            "start": [
                                93,
                                26
                            ],
                            "type": "local",
                            "view": "(fun(a: <T>, b: <T>):boolean)?"
                        }
                    ],
                    "desc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                    "finish": [
                        93,
                        35
                    ],
                    "rawdesc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                    "start": [
                        93,
                        0
                    ],
                    "type": "function",
                    "view": "function table.sort(list: <T>[], comp?: fun(a: <T>, b: <T>):boolean)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    93,
                    19
                ],
                "name": "sort",
                "rawdesc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                "start": [
                    93,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                123,
                                26
                            ],
                            "name": "list",
                            "start": [
                                123,
                                22
                            ],
                            "type": "local",
                            "view": "{ [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9>, [10]: <T10> }"
                        },
                        {
                            "finish": [
                                123,
                                29
                            ],
                            "name": "i",
                            "start": [
                                123,
                                28
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                123,
                                32
                            ],
                            "name": "j",
                            "start": [
                                123,
                                31
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                    "finish": [
                        123,
                        37
                    ],
                    "rawdesc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T1>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T2>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T3>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T4>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T5>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T6>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T7>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T8>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T9>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T10>"
                        }
                    ],
                    "start": [
                        123,
                        0
                    ],
                    "type": "function",
                    "view": "function table.unpack(list: { [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9>, [10]: <T10> }, i?: integer, j?: integer)\n  -> <T1>\n  2. <T2>\n  3. <T3>\n  4. <T4>\n  5. <T5>\n  6. <T6>\n  7. <T7>\n  8. <T8>\n  9. <T9>\n 10. <T10>"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/table.lua",
                "finish": [
                    123,
                    21
                ],
                "name": "unpack",
                "rawdesc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                "start": [
                    123,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "tablelib",
        "type": "type",
        "view": "tablelib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/builtin.lua",
                "finish": [
                    10,
                    16
                ],
                "start": [
                    10,
                    10
                ],
                "type": "doc.class",
                "view": "thread",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "thread",
        "type": "type",
        "view": "thread"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nWhen called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.\n\nThe conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [§3.1](command:extension.lua.doc?[\"en-us/51/manual.html/3.1\"])). The string may have leading and trailing spaces and a sign.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tonumber\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                352,
                                19
                            ],
                            "name": "e",
                            "start": [
                                352,
                                18
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nWhen called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.\n\nThe conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [§3.1](command:extension.lua.doc?[\"en-us/51/manual.html/3.1\"])). The string may have leading and trailing spaces and a sign.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tonumber\"])",
                    "finish": [
                        352,
                        24
                    ],
                    "rawdesc": "\nWhen called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.\n\nThe conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [§3.1](command:extension.lua.doc?[\"en-us/51/manual.html/3.1\"])). The string may have leading and trailing spaces and a sign.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tonumber\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number?"
                        }
                    ],
                    "start": [
                        352,
                        0
                    ],
                    "type": "function",
                    "view": "function tonumber(e: any)\n  -> number?"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    352,
                    17
                ],
                "rawdesc": "\nWhen called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.\n\nThe conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [§3.1](command:extension.lua.doc?[\"en-us/51/manual.html/3.1\"])). The string may have leading and trailing spaces and a sign.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tonumber\"])",
                "start": [
                    352,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "tonumber",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReceives a value of any type and converts it to a string in a human-readable format.\n\nIf the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.\n\nFor complete control of how numbers are converted, use [string.format](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-string.format\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                367,
                                19
                            ],
                            "name": "v",
                            "start": [
                                367,
                                18
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReceives a value of any type and converts it to a string in a human-readable format.\n\nIf the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.\n\nFor complete control of how numbers are converted, use [string.format](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-string.format\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"])",
                    "finish": [
                        367,
                        24
                    ],
                    "rawdesc": "\nReceives a value of any type and converts it to a string in a human-readable format.\n\nIf the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.\n\nFor complete control of how numbers are converted, use [string.format](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-string.format\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        367,
                        0
                    ],
                    "type": "function",
                    "view": "function tostring(v: any)\n  -> string"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    367,
                    17
                ],
                "rawdesc": "\nReceives a value of any type and converts it to a string in a human-readable format.\n\nIf the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.\n\nFor complete control of how numbers are converted, use [string.format](command:extension.lua.doc?[\"en-us/51/manual.html/pdf-string.format\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"])",
                "start": [
                    367,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "tostring",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            6,
                            23
                        ],
                        "start": [
                            6,
                            16
                        ],
                        "type": "doc.extends.name",
                        "view": "boolean"
                    }
                ],
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/builtin.lua",
                "finish": [
                    6,
                    23
                ],
                "start": [
                    6,
                    10
                ],
                "type": "doc.class",
                "view": "true",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "true",
        "type": "type",
        "view": "true"
    },
    {
        "defines": [
            {
                "desc": "```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
                "finish": [
                    377,
                    15
                ],
                "rawdesc": "```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
                "start": [
                    369,
                    10
                ],
                "type": "doc.alias",
                "view": "\"boolean\"|\"function\"|\"nil\"|\"number\"|\"string\"...(+3)"
            }
        ],
        "fields": [],
        "name": "type",
        "type": "type",
        "view": "type"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the type of its only argument, coded as a string. The possible results of this function are `\"nil\"` (a string, not the value `nil`), `\"number\"`, `\"string\"`, `\"boolean\"`, `\"table\"`, `\"function\"`, `\"thread\"`, and `\"userdata\"`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-type\"])\n\n\n```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                388,
                                15
                            ],
                            "name": "v",
                            "start": [
                                388,
                                14
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the type of its only argument, coded as a string. The possible results of this function are `\"nil\"` (a string, not the value `nil`), `\"number\"`, `\"string\"`, `\"boolean\"`, `\"table\"`, `\"function\"`, `\"thread\"`, and `\"userdata\"`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-type\"])\n\n\n```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
                    "finish": [
                        388,
                        20
                    ],
                    "rawdesc": "\nReturns the type of its only argument, coded as a string. The possible results of this function are `\"nil\"` (a string, not the value `nil`), `\"number\"`, `\"string\"`, `\"boolean\"`, `\"table\"`, `\"function\"`, `\"thread\"`, and `\"userdata\"`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-type\"])\n\n\n```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
                    "returns": [
                        {
                            "name": "type",
                            "type": "function.return",
                            "view": "\"boolean\"|\"function\"|\"nil\"|\"number\"|\"string\"...(+3)"
                        }
                    ],
                    "start": [
                        388,
                        0
                    ],
                    "type": "function",
                    "view": "function type(v: any)\n  -> type: \"boolean\"|\"function\"|\"nil\"|\"number\"|\"string\"...(+3)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    388,
                    13
                ],
                "rawdesc": "\nReturns the type of its only argument, coded as a string. The possible results of this function are `\"nil\"` (a string, not the value `nil`), `\"number\"`, `\"string\"`, `\"boolean\"`, `\"table\"`, `\"function\"`, `\"thread\"`, and `\"userdata\"`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-type\"])\n\n\n```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
                "start": [
                    388,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "type",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/builtin.lua",
                "finish": [
                    2,
                    17
                ],
                "start": [
                    2,
                    10
                ],
                "type": "doc.class",
                "view": "unknown",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "unknown",
        "type": "type",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the elements from the given `list`. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-unpack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                448,
                                20
                            ],
                            "name": "list",
                            "start": [
                                448,
                                16
                            ],
                            "type": "local",
                            "view": "{ [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9>, [10]: <T10> }"
                        },
                        {
                            "finish": [
                                448,
                                23
                            ],
                            "name": "i",
                            "start": [
                                448,
                                22
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                448,
                                26
                            ],
                            "name": "j",
                            "start": [
                                448,
                                25
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the elements from the given `list`. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-unpack\"])",
                    "finish": [
                        448,
                        31
                    ],
                    "rawdesc": "\nReturns the elements from the given `list`. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-unpack\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T1>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T2>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T3>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T4>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T5>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T6>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T7>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T8>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T9>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T10>"
                        }
                    ],
                    "start": [
                        448,
                        0
                    ],
                    "type": "function",
                    "view": "function unpack(list: { [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9>, [10]: <T10> }, i?: integer, j?: integer)\n  -> <T1>\n  2. <T2>\n  3. <T3>\n  4. <T4>\n  5. <T5>\n  6. <T6>\n  7. <T7>\n  8. <T8>\n  9. <T9>\n 10. <T10>"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    448,
                    15
                ],
                "rawdesc": "\nReturns the elements from the given `list`. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-unpack\"])",
                "start": [
                    448,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                455,
                                20
                            ],
                            "name": "list",
                            "start": [
                                455,
                                16
                            ],
                            "type": "local",
                            "view": "{ [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9> }"
                        }
                    ],
                    "finish": [
                        455,
                        25
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T1>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T2>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T3>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T4>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T5>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T6>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T7>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T8>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T9>"
                        }
                    ],
                    "start": [
                        455,
                        0
                    ],
                    "type": "function",
                    "view": "function unpack(list: { [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9> })\n  -> <T1>\n  2. <T2>\n  3. <T3>\n  4. <T4>\n  5. <T5>\n  6. <T6>\n  7. <T7>\n  8. <T8>\n  9. <T9>"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    455,
                    15
                ],
                "start": [
                    455,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "unpack",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/builtin.lua",
                "finish": [
                    13,
                    18
                ],
                "start": [
                    13,
                    10
                ],
                "type": "doc.class",
                "view": "userdata",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "userdata",
        "type": "type",
        "view": "userdata"
    },
    {
        "defines": [
            {
                "desc": "```lua\nvbuf:\n    | \"no\" -- Output operation appears immediately.\n    | \"full\" -- Performed only when the buffer is full.\n    | \"line\" -- Buffered until a newline is output.\n```",
                "finish": [
                    243,
                    11
                ],
                "rawdesc": "```lua\nvbuf:\n    | \"no\" -- Output operation appears immediately.\n    | \"full\" -- Performed only when the buffer is full.\n    | \"line\" -- Buffered until a newline is output.\n```",
                "start": [
                    240,
                    10
                ],
                "type": "doc.alias",
                "view": "\"full\"|\"line\"|\"no\""
            }
        ],
        "fields": [],
        "name": "vbuf",
        "type": "type",
        "view": "vbuf"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        6,
                        11
                    ],
                    "start": [
                        6,
                        9
                    ],
                    "type": "table",
                    "view": "vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    6,
                    6
                ],
                "start": [
                    6,
                    0
                ],
                "type": "setglobal",
                "view": "vector",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        6,
                        11
                    ],
                    "start": [
                        6,
                        9
                    ],
                    "type": "table",
                    "view": "vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    6,
                    6
                ],
                "start": [
                    6,
                    0
                ],
                "type": "setglobal",
                "view": "vector",
                "visible": "public"
            }
        ],
        "name": "vector",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    5,
                    16
                ],
                "start": [
                    5,
                    10
                ],
                "type": "doc.class",
                "view": "vector",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    5,
                    16
                ],
                "start": [
                    5,
                    10
                ],
                "type": "doc.class",
                "view": "vector",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a vector.\n * If `x` is a vector: Returns the sum of `v` and `x`.\n * If `x` is a number: Adds `x` to each component of `v`.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                71,
                                21
                            ],
                            "name": "v",
                            "start": [
                                71,
                                20
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                71,
                                24
                            ],
                            "name": "x",
                            "start": [
                                71,
                                23
                            ],
                            "type": "local",
                            "view": "number|vector.Vector"
                        }
                    ],
                    "desc": " * Returns a vector.\n * If `x` is a vector: Returns the sum of `v` and `x`.\n * If `x` is a number: Adds `x` to each component of `v`.",
                    "finish": [
                        71,
                        29
                    ],
                    "rawdesc": " * Returns a vector.\n * If `x` is a vector: Returns the sum of `v` and `x`.\n * If `x` is a number: Adds `x` to each component of `v`.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        71,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.add(v: vector.Vector, x: number|vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    71,
                    19
                ],
                "name": "add",
                "rawdesc": " * Returns a vector.\n * If `x` is a vector: Returns the sum of `v` and `x`.\n * If `x` is a number: Adds `x` to each component of `v`.",
                "start": [
                    71,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                54,
                                21
                            ],
                            "name": "v",
                            "start": [
                                54,
                                20
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                54,
                                24
                            ],
                            "name": "x",
                            "start": [
                                54,
                                23
                            ],
                            "type": "local",
                            "view": "number|vector.Vector"
                        }
                    ],
                    "finish": [
                        54,
                        29
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        54,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.add(v: vector.Vector, x: number|vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    54,
                    19
                ],
                "name": "add",
                "start": [
                    54,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a rotation vector for `direction` pointing forward using `up`\n   as the up vector.\n * If `up` is omitted, the roll of the returned vector defaults to zero.\n * Otherwise `direction` and `up` need to be vectors in a 90 degree angle to each other.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                137,
                                41
                            ],
                            "name": "direction",
                            "start": [
                                137,
                                32
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                137,
                                45
                            ],
                            "name": "up",
                            "start": [
                                137,
                                43
                            ],
                            "type": "local",
                            "view": "(vector.Vector)?"
                        }
                    ],
                    "desc": " * Returns a rotation vector for `direction` pointing forward using `up`\n   as the up vector.\n * If `up` is omitted, the roll of the returned vector defaults to zero.\n * Otherwise `direction` and `up` need to be vectors in a 90 degree angle to each other.",
                    "finish": [
                        137,
                        50
                    ],
                    "rawdesc": " * Returns a rotation vector for `direction` pointing forward using `up`\n   as the up vector.\n * If `up` is omitted, the roll of the returned vector defaults to zero.\n * Otherwise `direction` and `up` need to be vectors in a 90 degree angle to each other.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        137,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.dir_to_rotation(direction: vector.Vector, up?: vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    137,
                    31
                ],
                "name": "dir_to_rotation",
                "rawdesc": " * Returns a rotation vector for `direction` pointing forward using `up`\n   as the up vector.\n * If `up` is omitted, the roll of the returned vector defaults to zero.\n * Otherwise `direction` and `up` need to be vectors in a 90 degree angle to each other.",
                "start": [
                    137,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                100,
                                41
                            ],
                            "name": "direction",
                            "start": [
                                100,
                                32
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                100,
                                45
                            ],
                            "name": "up",
                            "start": [
                                100,
                                43
                            ],
                            "type": "local",
                            "view": "(vector.Vector)?"
                        }
                    ],
                    "finish": [
                        100,
                        50
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        100,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.dir_to_rotation(direction: vector.Vector, up?: vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    100,
                    31
                ],
                "name": "dir_to_rotation",
                "start": [
                    100,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a vector of length 1 with direction `p1` to `p2`.\n * If `p1` and `p2` are identical, returns `(0, 0, 0)`.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                62,
                                28
                            ],
                            "name": "p1",
                            "start": [
                                62,
                                26
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                62,
                                32
                            ],
                            "name": "p2",
                            "start": [
                                62,
                                30
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "desc": " * Returns a vector of length 1 with direction `p1` to `p2`.\n * If `p1` and `p2` are identical, returns `(0, 0, 0)`.",
                    "finish": [
                        62,
                        37
                    ],
                    "rawdesc": " * Returns a vector of length 1 with direction `p1` to `p2`.\n * If `p1` and `p2` are identical, returns `(0, 0, 0)`.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        62,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.direction(p1: vector.Vector, p2: vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    62,
                    25
                ],
                "name": "direction",
                "rawdesc": " * Returns a vector of length 1 with direction `p1` to `p2`.\n * If `p1` and `p2` are identical, returns `(0, 0, 0)`.",
                "start": [
                    62,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                48,
                                28
                            ],
                            "name": "p1",
                            "start": [
                                48,
                                26
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                48,
                                32
                            ],
                            "name": "p2",
                            "start": [
                                48,
                                30
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "finish": [
                        48,
                        37
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        48,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.direction(p1: vector.Vector, p2: vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    48,
                    25
                ],
                "name": "direction",
                "start": [
                    48,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a scaled vector.\n * Deprecated: If `s` is a vector: Returns the Schur quotient.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                105,
                                24
                            ],
                            "name": "v",
                            "start": [
                                105,
                                23
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                105,
                                27
                            ],
                            "name": "s",
                            "start": [
                                105,
                                26
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": " * Returns a scaled vector.\n * Deprecated: If `s` is a vector: Returns the Schur quotient.",
                    "finish": [
                        105,
                        32
                    ],
                    "rawdesc": " * Returns a scaled vector.\n * Deprecated: If `s` is a vector: Returns the Schur quotient.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        105,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.divide(v: vector.Vector, s: number)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    105,
                    22
                ],
                "name": "divide",
                "rawdesc": " * Returns a scaled vector.\n * Deprecated: If `s` is a vector: Returns the Schur quotient.",
                "start": [
                    105,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                78,
                                24
                            ],
                            "name": "v",
                            "start": [
                                78,
                                23
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                78,
                                27
                            ],
                            "name": "s",
                            "start": [
                                78,
                                26
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "finish": [
                        78,
                        32
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        78,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.divide(v: vector.Vector, s: number)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    78,
                    22
                ],
                "name": "divide",
                "start": [
                    78,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "@*param* `init` — If given starts looking for the vector at this string index\n\n@*return* — integer = next position in the string after the vector\n\n * Returns `v, np`, where `v` is a vector read from the given string `s` and\n   `np` is the next position in the string after the vector.\n * Returns `nil` on failure.\n * `s`: Has to begin with a substring of the form `\"(x, y, z)\"`. Additional\n        spaces, leaving away commas and adding an additional comma to the end\n        is allowed.\n * `init`: If given starts looking for the vector at this string index.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                47,
                                29
                            ],
                            "name": "s",
                            "start": [
                                47,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "If given starts looking for the vector at this string index",
                            "finish": [
                                47,
                                35
                            ],
                            "name": "init",
                            "rawdesc": "If given starts looking for the vector at this string index",
                            "start": [
                                47,
                                31
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "@*param* `init` — If given starts looking for the vector at this string index\n\n@*return* — integer = next position in the string after the vector\n\n * Returns `v, np`, where `v` is a vector read from the given string `s` and\n   `np` is the next position in the string after the vector.\n * Returns `nil` on failure.\n * `s`: Has to begin with a substring of the form `\"(x, y, z)\"`. Additional\n        spaces, leaving away commas and adding an additional comma to the end\n        is allowed.\n * `init`: If given starts looking for the vector at this string index.",
                    "finish": [
                        47,
                        40
                    ],
                    "rawdesc": " * Returns `v, np`, where `v` is a vector read from the given string `s` and\n   `np` is the next position in the string after the vector.\n * Returns `nil` on failure.\n * `s`: Has to begin with a substring of the form `\"(x, y, z)\"`. Additional\n        spaces, leaving away commas and adding an additional comma to the end\n        is allowed.\n * `init`: If given starts looking for the vector at this string index.",
                    "returns": [
                        {
                            "desc": "integer = next position in the string after the vector",
                            "rawdesc": "integer = next position in the string after the vector",
                            "type": "function.return",
                            "view": "vector.Vector|nil"
                        },
                        {
                            "desc": "integer = next position in the string after the vector",
                            "rawdesc": "integer = next position in the string after the vector",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        47,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.from_string(s: string, init?: integer)\n  -> vector.Vector|nil\n  2. integer"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    47,
                    27
                ],
                "name": "from_string",
                "rawdesc": " * Returns `v, np`, where `v` is a vector read from the given string `s` and\n   `np` is the next position in the string after the vector.\n * Returns `nil` on failure.\n * `s`: Has to begin with a substring of the form `\"(x, y, z)\"`. Additional\n        spaces, leaving away commas and adding an additional comma to the end\n        is allowed.\n * `init`: If given starts looking for the vector at this string index.",
                "start": [
                    47,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "@*param* `init` — If given starts looking for the vector at this string index\n\n@*return* — integer = next position in the string after the vector",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                37,
                                29
                            ],
                            "name": "s",
                            "start": [
                                37,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "If given starts looking for the vector at this string index",
                            "finish": [
                                37,
                                35
                            ],
                            "name": "init",
                            "rawdesc": "If given starts looking for the vector at this string index",
                            "start": [
                                37,
                                31
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "@*param* `init` — If given starts looking for the vector at this string index\n\n@*return* — integer = next position in the string after the vector",
                    "finish": [
                        37,
                        40
                    ],
                    "returns": [
                        {
                            "desc": "integer = next position in the string after the vector",
                            "rawdesc": "integer = next position in the string after the vector",
                            "type": "function.return",
                            "view": "vector.Vector|nil"
                        },
                        {
                            "desc": "integer = next position in the string after the vector",
                            "rawdesc": "integer = next position in the string after the vector",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        37,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.from_string(s: string, init?: integer)\n  -> vector.Vector|nil\n  2. integer"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    37,
                    27
                ],
                "name": "from_string",
                "start": [
                    37,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a boolean value indicating if `pos` is inside area formed by `min` and `max`.\n * `min` and `max` are inclusive.\n * If `min` is bigger than `max` on some axis, function always returns false.\n * You can use `vector.sort` if you have two vectors and don't know which are the minimum and the maximum.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                148,
                                27
                            ],
                            "name": "pos",
                            "start": [
                                148,
                                24
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                148,
                                32
                            ],
                            "name": "min",
                            "start": [
                                148,
                                29
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                148,
                                37
                            ],
                            "name": "max",
                            "start": [
                                148,
                                34
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "desc": " * Returns a boolean value indicating if `pos` is inside area formed by `min` and `max`.\n * `min` and `max` are inclusive.\n * If `min` is bigger than `max` on some axis, function always returns false.\n * You can use `vector.sort` if you have two vectors and don't know which are the minimum and the maximum.",
                    "finish": [
                        148,
                        42
                    ],
                    "rawdesc": " * Returns a boolean value indicating if `pos` is inside area formed by `min` and `max`.\n * `min` and `max` are inclusive.\n * If `min` is bigger than `max` on some axis, function always returns false.\n * You can use `vector.sort` if you have two vectors and don't know which are the minimum and the maximum.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        148,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.in_area(pos: vector.Vector, min: vector.Vector, max: vector.Vector)\n  -> boolean"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    148,
                    23
                ],
                "name": "in_area",
                "rawdesc": " * Returns a boolean value indicating if `pos` is inside area formed by `min` and `max`.\n * `min` and `max` are inclusive.\n * If `min` is bigger than `max` on some axis, function always returns false.\n * You can use `vector.sort` if you have two vectors and don't know which are the minimum and the maximum.",
                "start": [
                    148,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                107,
                                27
                            ],
                            "name": "pos",
                            "start": [
                                107,
                                24
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                107,
                                32
                            ],
                            "name": "min",
                            "start": [
                                107,
                                29
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                107,
                                37
                            ],
                            "name": "max",
                            "start": [
                                107,
                                34
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "finish": [
                        107,
                        42
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        107,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.in_area(pos: vector.Vector, min: vector.Vector, max: vector.Vector)\n  -> boolean"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    107,
                    23
                ],
                "name": "in_area",
                "start": [
                    107,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a scaled vector.\n * Deprecated: If `s` is a vector: Returns the Schur product.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                97,
                                26
                            ],
                            "name": "v",
                            "start": [
                                97,
                                25
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                97,
                                29
                            ],
                            "name": "s",
                            "start": [
                                97,
                                28
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": " * Returns a scaled vector.\n * Deprecated: If `s` is a vector: Returns the Schur product.",
                    "finish": [
                        97,
                        34
                    ],
                    "rawdesc": " * Returns a scaled vector.\n * Deprecated: If `s` is a vector: Returns the Schur product.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        97,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.multiply(v: vector.Vector, s: number)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    97,
                    24
                ],
                "name": "multiply",
                "rawdesc": " * Returns a scaled vector.\n * Deprecated: If `s` is a vector: Returns the Schur product.",
                "start": [
                    97,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                72,
                                26
                            ],
                            "name": "v",
                            "start": [
                                72,
                                25
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                72,
                                29
                            ],
                            "name": "s",
                            "start": [
                                72,
                                28
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "finish": [
                        72,
                        34
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        72,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.multiply(v: vector.Vector, s: number)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    72,
                    24
                ],
                "name": "multiply",
                "start": [
                    72,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a new vector `(a, b, c)`.\n * Deprecated: `vector.new()` does the same as `vector.zero()` and\n   `vector.new(v)` does the same as `vector.copy(v)`",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                34,
                                21
                            ],
                            "name": "x",
                            "start": [
                                34,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                34,
                                24
                            ],
                            "name": "y",
                            "start": [
                                34,
                                23
                            ],
                            "type": "local",
                            "view": "number?"
                        },
                        {
                            "finish": [
                                34,
                                27
                            ],
                            "name": "z",
                            "start": [
                                34,
                                26
                            ],
                            "type": "local",
                            "view": "number?"
                        }
                    ],
                    "desc": " * Returns a new vector `(a, b, c)`.\n * Deprecated: `vector.new()` does the same as `vector.zero()` and\n   `vector.new(v)` does the same as `vector.copy(v)`",
                    "finish": [
                        34,
                        32
                    ],
                    "rawdesc": " * Returns a new vector `(a, b, c)`.\n * Deprecated: `vector.new()` does the same as `vector.zero()` and\n   `vector.new(v)` does the same as `vector.copy(v)`",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        34,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.new(x: number, y?: number, z?: number)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    34,
                    19
                ],
                "name": "new",
                "rawdesc": " * Returns a new vector `(a, b, c)`.\n * Deprecated: `vector.new()` does the same as `vector.zero()` and\n   `vector.new(v)` does the same as `vector.copy(v)`",
                "start": [
                    34,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                31,
                                21
                            ],
                            "name": "x",
                            "start": [
                                31,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                31,
                                24
                            ],
                            "name": "y",
                            "start": [
                                31,
                                23
                            ],
                            "type": "local",
                            "view": "number?"
                        },
                        {
                            "finish": [
                                31,
                                27
                            ],
                            "name": "z",
                            "start": [
                                31,
                                26
                            ],
                            "type": "local",
                            "view": "number?"
                        }
                    ],
                    "finish": [
                        31,
                        32
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        31,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.new(x: number, y?: number, z?: number)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    31,
                    19
                ],
                "name": "new",
                "start": [
                    31,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a random integer position in area formed by `min` and `max`\n * `min` and `max` are inclusive.\n * You can use `vector.sort` if you have two vectors and don't know which are the minimum and the maximum.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                157,
                                34
                            ],
                            "name": "min",
                            "start": [
                                157,
                                31
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                157,
                                39
                            ],
                            "name": "max",
                            "start": [
                                157,
                                36
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "desc": " * Returns a random integer position in area formed by `min` and `max`\n * `min` and `max` are inclusive.\n * You can use `vector.sort` if you have two vectors and don't know which are the minimum and the maximum.",
                    "finish": [
                        157,
                        44
                    ],
                    "rawdesc": " * Returns a random integer position in area formed by `min` and `max`\n * `min` and `max` are inclusive.\n * You can use `vector.sort` if you have two vectors and don't know which are the minimum and the maximum.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        157,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.random_in_area(min: vector.Vector, max: vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    157,
                    30
                ],
                "name": "random_in_area",
                "rawdesc": " * Returns a random integer position in area formed by `min` and `max`\n * `min` and `max` are inclusive.\n * You can use `vector.sort` if you have two vectors and don't know which are the minimum and the maximum.",
                "start": [
                    157,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                113,
                                34
                            ],
                            "name": "min",
                            "start": [
                                113,
                                31
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                113,
                                39
                            ],
                            "name": "max",
                            "start": [
                                113,
                                36
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "finish": [
                        113,
                        44
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        113,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.random_in_area(min: vector.Vector, max: vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    113,
                    30
                ],
                "name": "random_in_area",
                "start": [
                    113,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Applies the rotation `r` to `v` and returns the result.\n * `vector.rotate(vector.new(0, 0, 1), r)` and\n   `vector.rotate(vector.new(0, 1, 0), r)` return vectors pointing\n   forward and up relative to an entity's rotation `r`.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                118,
                                24
                            ],
                            "name": "v",
                            "start": [
                                118,
                                23
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                118,
                                27
                            ],
                            "name": "r",
                            "start": [
                                118,
                                26
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "desc": " * Applies the rotation `r` to `v` and returns the result.\n * `vector.rotate(vector.new(0, 0, 1), r)` and\n   `vector.rotate(vector.new(0, 1, 0), r)` return vectors pointing\n   forward and up relative to an entity's rotation `r`.",
                    "finish": [
                        118,
                        32
                    ],
                    "rawdesc": " * Applies the rotation `r` to `v` and returns the result.\n * `vector.rotate(vector.new(0, 0, 1), r)` and\n   `vector.rotate(vector.new(0, 1, 0), r)` return vectors pointing\n   forward and up relative to an entity's rotation `r`.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        118,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.rotate(v: vector.Vector, r: vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    118,
                    22
                ],
                "name": "rotate",
                "rawdesc": " * Applies the rotation `r` to `v` and returns the result.\n * `vector.rotate(vector.new(0, 0, 1), r)` and\n   `vector.rotate(vector.new(0, 1, 0), r)` return vectors pointing\n   forward and up relative to an entity's rotation `r`.",
                "start": [
                    118,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                87,
                                24
                            ],
                            "name": "v",
                            "start": [
                                87,
                                23
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                87,
                                27
                            ],
                            "name": "r",
                            "start": [
                                87,
                                26
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "finish": [
                        87,
                        32
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        87,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.rotate(v: vector.Vector, r: vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    87,
                    22
                ],
                "name": "rotate",
                "start": [
                    87,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns `v1` rotated around axis `v2` by `a` radians according to\n   the right hand rule.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                127,
                                37
                            ],
                            "name": "v1",
                            "start": [
                                127,
                                35
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                127,
                                41
                            ],
                            "name": "v2",
                            "start": [
                                127,
                                39
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                127,
                                44
                            ],
                            "name": "a",
                            "start": [
                                127,
                                43
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": " * Returns `v1` rotated around axis `v2` by `a` radians according to\n   the right hand rule.",
                    "finish": [
                        127,
                        49
                    ],
                    "rawdesc": " * Returns `v1` rotated around axis `v2` by `a` radians according to\n   the right hand rule.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        127,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.rotate_around_axis(v1: vector.Vector, v2: vector.Vector, a: number)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    127,
                    34
                ],
                "name": "rotate_around_axis",
                "rawdesc": " * Returns `v1` rotated around axis `v2` by `a` radians according to\n   the right hand rule.",
                "start": [
                    127,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                94,
                                37
                            ],
                            "name": "v1",
                            "start": [
                                94,
                                35
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                94,
                                41
                            ],
                            "name": "v2",
                            "start": [
                                94,
                                39
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                94,
                                44
                            ],
                            "name": "a",
                            "start": [
                                94,
                                43
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "finish": [
                        94,
                        49
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        94,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.rotate_around_axis(v1: vector.Vector, v2: vector.Vector, a: number)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    94,
                    34
                ],
                "name": "rotate_around_axis",
                "start": [
                    94,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a vector.\n * If `x` is a vector: Returns the difference of `v` subtracted by `x`.\n * If `x` is a number: Subtracts `x` from each component of `v`.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                80,
                                26
                            ],
                            "name": "v",
                            "start": [
                                80,
                                25
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                80,
                                29
                            ],
                            "name": "x",
                            "start": [
                                80,
                                28
                            ],
                            "type": "local",
                            "view": "number|vector.Vector"
                        }
                    ],
                    "desc": " * Returns a vector.\n * If `x` is a vector: Returns the difference of `v` subtracted by `x`.\n * If `x` is a number: Subtracts `x` from each component of `v`.",
                    "finish": [
                        80,
                        34
                    ],
                    "rawdesc": " * Returns a vector.\n * If `x` is a vector: Returns the difference of `v` subtracted by `x`.\n * If `x` is a number: Subtracts `x` from each component of `v`.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        80,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.subtract(v: vector.Vector, x: number|vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    80,
                    24
                ],
                "name": "subtract",
                "rawdesc": " * Returns a vector.\n * If `x` is a vector: Returns the difference of `v` subtracted by `x`.\n * If `x` is a number: Subtracts `x` from each component of `v`.",
                "start": [
                    80,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a vector.\n * If `x` is a vector: Returns the difference of `v` subtracted by `x`.\n * If `x` is a number: Subtracts `x` from each component of `v`.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                89,
                                26
                            ],
                            "name": "v",
                            "start": [
                                89,
                                25
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                89,
                                29
                            ],
                            "name": "x",
                            "start": [
                                89,
                                28
                            ],
                            "type": "local",
                            "view": "number|vector.Vector"
                        }
                    ],
                    "desc": " * Returns a vector.\n * If `x` is a vector: Returns the difference of `v` subtracted by `x`.\n * If `x` is a number: Subtracts `x` from each component of `v`.",
                    "finish": [
                        89,
                        34
                    ],
                    "rawdesc": " * Returns a vector.\n * If `x` is a vector: Returns the difference of `v` subtracted by `x`.\n * If `x` is a number: Subtracts `x` from each component of `v`.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        89,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.subtract(v: vector.Vector, x: number|vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    89,
                    24
                ],
                "name": "subtract",
                "rawdesc": " * Returns a vector.\n * If `x` is a vector: Returns the difference of `v` subtracted by `x`.\n * If `x` is a number: Subtracts `x` from each component of `v`.",
                "start": [
                    89,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                60,
                                26
                            ],
                            "name": "v",
                            "start": [
                                60,
                                25
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                60,
                                29
                            ],
                            "name": "x",
                            "start": [
                                60,
                                28
                            ],
                            "type": "local",
                            "view": "number|vector.Vector"
                        }
                    ],
                    "finish": [
                        60,
                        34
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        60,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.subtract(v: vector.Vector, x: number|vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    60,
                    24
                ],
                "name": "subtract",
                "start": [
                    60,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                66,
                                26
                            ],
                            "name": "v",
                            "start": [
                                66,
                                25
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                66,
                                29
                            ],
                            "name": "x",
                            "start": [
                                66,
                                28
                            ],
                            "type": "local",
                            "view": "number|vector.Vector"
                        }
                    ],
                    "finish": [
                        66,
                        34
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        66,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.subtract(v: vector.Vector, x: number|vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    66,
                    24
                ],
                "name": "subtract",
                "start": [
                    66,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a string of the form `\"(x, y, z)\"`.\n *  `tostring(v)` does the same.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                54,
                                27
                            ],
                            "name": "v",
                            "start": [
                                54,
                                26
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "desc": " * Returns a string of the form `\"(x, y, z)\"`.\n *  `tostring(v)` does the same.",
                    "finish": [
                        54,
                        32
                    ],
                    "rawdesc": " * Returns a string of the form `\"(x, y, z)\"`.\n *  `tostring(v)` does the same.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        54,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.to_string(v: vector.Vector)\n  -> string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    54,
                    25
                ],
                "name": "to_string",
                "rawdesc": " * Returns a string of the form `\"(x, y, z)\"`.\n *  `tostring(v)` does the same.",
                "start": [
                    54,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                42,
                                27
                            ],
                            "name": "v",
                            "start": [
                                42,
                                26
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "finish": [
                        42,
                        32
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        42,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.to_string(v: vector.Vector)\n  -> string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    42,
                    25
                ],
                "name": "to_string",
                "start": [
                    42,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [],
                    "finish": [
                        39,
                        26
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        39,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.zero()\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    39,
                    20
                ],
                "name": "zero",
                "start": [
                    39,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "vector",
        "type": "type",
        "view": "vector"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    11,
                    23
                ],
                "start": [
                    11,
                    10
                ],
                "type": "doc.class",
                "view": "vector.Vector",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    11,
                    23
                ],
                "start": [
                    11,
                    10
                ],
                "type": "doc.class",
                "view": "vector.Vector",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "",
                "extends": {
                    "finish": [
                        13,
                        18
                    ],
                    "start": [
                        13,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                13,
                                18
                            ],
                            "start": [
                                13,
                                12
                            ],
                            "type": "doc.type.name",
                            "view": "number"
                        }
                    ],
                    "view": "number"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    13,
                    18
                ],
                "name": "x",
                "rawdesc": "",
                "start": [
                    13,
                    10
                ],
                "type": "doc.field",
                "view": "number",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "",
                "extends": {
                    "finish": [
                        13,
                        18
                    ],
                    "start": [
                        13,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                13,
                                18
                            ],
                            "start": [
                                13,
                                12
                            ],
                            "type": "doc.type.name",
                            "view": "number"
                        }
                    ],
                    "view": "number"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    13,
                    18
                ],
                "name": "x",
                "rawdesc": "",
                "start": [
                    13,
                    10
                ],
                "type": "doc.field",
                "view": "number",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        14,
                        18
                    ],
                    "start": [
                        14,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                14,
                                18
                            ],
                            "start": [
                                14,
                                12
                            ],
                            "type": "doc.type.name",
                            "view": "number"
                        }
                    ],
                    "view": "number"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    14,
                    18
                ],
                "name": "y",
                "start": [
                    14,
                    10
                ],
                "type": "doc.field",
                "view": "number",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        14,
                        18
                    ],
                    "start": [
                        14,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                14,
                                18
                            ],
                            "start": [
                                14,
                                12
                            ],
                            "type": "doc.type.name",
                            "view": "number"
                        }
                    ],
                    "view": "number"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    14,
                    18
                ],
                "name": "y",
                "start": [
                    14,
                    10
                ],
                "type": "doc.field",
                "view": "number",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        15,
                        18
                    ],
                    "start": [
                        15,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                15,
                                18
                            ],
                            "start": [
                                15,
                                12
                            ],
                            "type": "doc.type.name",
                            "view": "number"
                        }
                    ],
                    "view": "number"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    15,
                    18
                ],
                "name": "z",
                "start": [
                    15,
                    10
                ],
                "type": "doc.field",
                "view": "number",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        15,
                        18
                    ],
                    "start": [
                        15,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                15,
                                18
                            ],
                            "start": [
                                15,
                                12
                            ],
                            "type": "doc.type.name",
                            "view": "number"
                        }
                    ],
                    "view": "number"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    15,
                    18
                ],
                "name": "z",
                "start": [
                    15,
                    10
                ],
                "type": "doc.field",
                "view": "number",
                "visible": "public"
            }
        ],
        "name": "vector.Vector",
        "type": "type",
        "view": "vector.Vector"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a vector.\n * If `x` is a vector: Returns the sum of `v` and `x`.\n * If `x` is a number: Adds `x` to each component of `v`.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                71,
                                21
                            ],
                            "name": "v",
                            "start": [
                                71,
                                20
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                71,
                                24
                            ],
                            "name": "x",
                            "start": [
                                71,
                                23
                            ],
                            "type": "local",
                            "view": "number|vector.Vector"
                        }
                    ],
                    "desc": " * Returns a vector.\n * If `x` is a vector: Returns the sum of `v` and `x`.\n * If `x` is a number: Adds `x` to each component of `v`.",
                    "finish": [
                        71,
                        29
                    ],
                    "rawdesc": " * Returns a vector.\n * If `x` is a vector: Returns the sum of `v` and `x`.\n * If `x` is a number: Adds `x` to each component of `v`.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        71,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.add(v: vector.Vector, x: number|vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    71,
                    19
                ],
                "name": "add",
                "rawdesc": " * Returns a vector.\n * If `x` is a vector: Returns the sum of `v` and `x`.\n * If `x` is a number: Adds `x` to each component of `v`.",
                "start": [
                    71,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                54,
                                21
                            ],
                            "name": "v",
                            "start": [
                                54,
                                20
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                54,
                                24
                            ],
                            "name": "x",
                            "start": [
                                54,
                                23
                            ],
                            "type": "local",
                            "view": "number|vector.Vector"
                        }
                    ],
                    "finish": [
                        54,
                        29
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        54,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.add(v: vector.Vector, x: number|vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    54,
                    19
                ],
                "name": "add",
                "start": [
                    54,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "vector.add",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a rotation vector for `direction` pointing forward using `up`\n   as the up vector.\n * If `up` is omitted, the roll of the returned vector defaults to zero.\n * Otherwise `direction` and `up` need to be vectors in a 90 degree angle to each other.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                137,
                                41
                            ],
                            "name": "direction",
                            "start": [
                                137,
                                32
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                137,
                                45
                            ],
                            "name": "up",
                            "start": [
                                137,
                                43
                            ],
                            "type": "local",
                            "view": "(vector.Vector)?"
                        }
                    ],
                    "desc": " * Returns a rotation vector for `direction` pointing forward using `up`\n   as the up vector.\n * If `up` is omitted, the roll of the returned vector defaults to zero.\n * Otherwise `direction` and `up` need to be vectors in a 90 degree angle to each other.",
                    "finish": [
                        137,
                        50
                    ],
                    "rawdesc": " * Returns a rotation vector for `direction` pointing forward using `up`\n   as the up vector.\n * If `up` is omitted, the roll of the returned vector defaults to zero.\n * Otherwise `direction` and `up` need to be vectors in a 90 degree angle to each other.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        137,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.dir_to_rotation(direction: vector.Vector, up?: vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    137,
                    31
                ],
                "name": "dir_to_rotation",
                "rawdesc": " * Returns a rotation vector for `direction` pointing forward using `up`\n   as the up vector.\n * If `up` is omitted, the roll of the returned vector defaults to zero.\n * Otherwise `direction` and `up` need to be vectors in a 90 degree angle to each other.",
                "start": [
                    137,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                100,
                                41
                            ],
                            "name": "direction",
                            "start": [
                                100,
                                32
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                100,
                                45
                            ],
                            "name": "up",
                            "start": [
                                100,
                                43
                            ],
                            "type": "local",
                            "view": "(vector.Vector)?"
                        }
                    ],
                    "finish": [
                        100,
                        50
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        100,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.dir_to_rotation(direction: vector.Vector, up?: vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    100,
                    31
                ],
                "name": "dir_to_rotation",
                "start": [
                    100,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "vector.dir_to_rotation",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a vector of length 1 with direction `p1` to `p2`.\n * If `p1` and `p2` are identical, returns `(0, 0, 0)`.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                62,
                                28
                            ],
                            "name": "p1",
                            "start": [
                                62,
                                26
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                62,
                                32
                            ],
                            "name": "p2",
                            "start": [
                                62,
                                30
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "desc": " * Returns a vector of length 1 with direction `p1` to `p2`.\n * If `p1` and `p2` are identical, returns `(0, 0, 0)`.",
                    "finish": [
                        62,
                        37
                    ],
                    "rawdesc": " * Returns a vector of length 1 with direction `p1` to `p2`.\n * If `p1` and `p2` are identical, returns `(0, 0, 0)`.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        62,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.direction(p1: vector.Vector, p2: vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    62,
                    25
                ],
                "name": "direction",
                "rawdesc": " * Returns a vector of length 1 with direction `p1` to `p2`.\n * If `p1` and `p2` are identical, returns `(0, 0, 0)`.",
                "start": [
                    62,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                48,
                                28
                            ],
                            "name": "p1",
                            "start": [
                                48,
                                26
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                48,
                                32
                            ],
                            "name": "p2",
                            "start": [
                                48,
                                30
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "finish": [
                        48,
                        37
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        48,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.direction(p1: vector.Vector, p2: vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    48,
                    25
                ],
                "name": "direction",
                "start": [
                    48,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "vector.direction",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a scaled vector.\n * Deprecated: If `s` is a vector: Returns the Schur quotient.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                105,
                                24
                            ],
                            "name": "v",
                            "start": [
                                105,
                                23
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                105,
                                27
                            ],
                            "name": "s",
                            "start": [
                                105,
                                26
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": " * Returns a scaled vector.\n * Deprecated: If `s` is a vector: Returns the Schur quotient.",
                    "finish": [
                        105,
                        32
                    ],
                    "rawdesc": " * Returns a scaled vector.\n * Deprecated: If `s` is a vector: Returns the Schur quotient.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        105,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.divide(v: vector.Vector, s: number)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    105,
                    22
                ],
                "name": "divide",
                "rawdesc": " * Returns a scaled vector.\n * Deprecated: If `s` is a vector: Returns the Schur quotient.",
                "start": [
                    105,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                78,
                                24
                            ],
                            "name": "v",
                            "start": [
                                78,
                                23
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                78,
                                27
                            ],
                            "name": "s",
                            "start": [
                                78,
                                26
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "finish": [
                        78,
                        32
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        78,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.divide(v: vector.Vector, s: number)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    78,
                    22
                ],
                "name": "divide",
                "start": [
                    78,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "vector.divide",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "@*param* `init` — If given starts looking for the vector at this string index\n\n@*return* — integer = next position in the string after the vector\n\n * Returns `v, np`, where `v` is a vector read from the given string `s` and\n   `np` is the next position in the string after the vector.\n * Returns `nil` on failure.\n * `s`: Has to begin with a substring of the form `\"(x, y, z)\"`. Additional\n        spaces, leaving away commas and adding an additional comma to the end\n        is allowed.\n * `init`: If given starts looking for the vector at this string index.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                47,
                                29
                            ],
                            "name": "s",
                            "start": [
                                47,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "If given starts looking for the vector at this string index",
                            "finish": [
                                47,
                                35
                            ],
                            "name": "init",
                            "rawdesc": "If given starts looking for the vector at this string index",
                            "start": [
                                47,
                                31
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "@*param* `init` — If given starts looking for the vector at this string index\n\n@*return* — integer = next position in the string after the vector\n\n * Returns `v, np`, where `v` is a vector read from the given string `s` and\n   `np` is the next position in the string after the vector.\n * Returns `nil` on failure.\n * `s`: Has to begin with a substring of the form `\"(x, y, z)\"`. Additional\n        spaces, leaving away commas and adding an additional comma to the end\n        is allowed.\n * `init`: If given starts looking for the vector at this string index.",
                    "finish": [
                        47,
                        40
                    ],
                    "rawdesc": " * Returns `v, np`, where `v` is a vector read from the given string `s` and\n   `np` is the next position in the string after the vector.\n * Returns `nil` on failure.\n * `s`: Has to begin with a substring of the form `\"(x, y, z)\"`. Additional\n        spaces, leaving away commas and adding an additional comma to the end\n        is allowed.\n * `init`: If given starts looking for the vector at this string index.",
                    "returns": [
                        {
                            "desc": "integer = next position in the string after the vector",
                            "rawdesc": "integer = next position in the string after the vector",
                            "type": "function.return",
                            "view": "vector.Vector|nil"
                        },
                        {
                            "desc": "integer = next position in the string after the vector",
                            "rawdesc": "integer = next position in the string after the vector",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        47,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.from_string(s: string, init?: integer)\n  -> vector.Vector|nil\n  2. integer"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    47,
                    27
                ],
                "name": "from_string",
                "rawdesc": " * Returns `v, np`, where `v` is a vector read from the given string `s` and\n   `np` is the next position in the string after the vector.\n * Returns `nil` on failure.\n * `s`: Has to begin with a substring of the form `\"(x, y, z)\"`. Additional\n        spaces, leaving away commas and adding an additional comma to the end\n        is allowed.\n * `init`: If given starts looking for the vector at this string index.",
                "start": [
                    47,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "@*param* `init` — If given starts looking for the vector at this string index\n\n@*return* — integer = next position in the string after the vector",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                37,
                                29
                            ],
                            "name": "s",
                            "start": [
                                37,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "If given starts looking for the vector at this string index",
                            "finish": [
                                37,
                                35
                            ],
                            "name": "init",
                            "rawdesc": "If given starts looking for the vector at this string index",
                            "start": [
                                37,
                                31
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "@*param* `init` — If given starts looking for the vector at this string index\n\n@*return* — integer = next position in the string after the vector",
                    "finish": [
                        37,
                        40
                    ],
                    "returns": [
                        {
                            "desc": "integer = next position in the string after the vector",
                            "rawdesc": "integer = next position in the string after the vector",
                            "type": "function.return",
                            "view": "vector.Vector|nil"
                        },
                        {
                            "desc": "integer = next position in the string after the vector",
                            "rawdesc": "integer = next position in the string after the vector",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        37,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.from_string(s: string, init?: integer)\n  -> vector.Vector|nil\n  2. integer"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    37,
                    27
                ],
                "name": "from_string",
                "start": [
                    37,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "vector.from_string",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a boolean value indicating if `pos` is inside area formed by `min` and `max`.\n * `min` and `max` are inclusive.\n * If `min` is bigger than `max` on some axis, function always returns false.\n * You can use `vector.sort` if you have two vectors and don't know which are the minimum and the maximum.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                148,
                                27
                            ],
                            "name": "pos",
                            "start": [
                                148,
                                24
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                148,
                                32
                            ],
                            "name": "min",
                            "start": [
                                148,
                                29
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                148,
                                37
                            ],
                            "name": "max",
                            "start": [
                                148,
                                34
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "desc": " * Returns a boolean value indicating if `pos` is inside area formed by `min` and `max`.\n * `min` and `max` are inclusive.\n * If `min` is bigger than `max` on some axis, function always returns false.\n * You can use `vector.sort` if you have two vectors and don't know which are the minimum and the maximum.",
                    "finish": [
                        148,
                        42
                    ],
                    "rawdesc": " * Returns a boolean value indicating if `pos` is inside area formed by `min` and `max`.\n * `min` and `max` are inclusive.\n * If `min` is bigger than `max` on some axis, function always returns false.\n * You can use `vector.sort` if you have two vectors and don't know which are the minimum and the maximum.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        148,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.in_area(pos: vector.Vector, min: vector.Vector, max: vector.Vector)\n  -> boolean"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    148,
                    23
                ],
                "name": "in_area",
                "rawdesc": " * Returns a boolean value indicating if `pos` is inside area formed by `min` and `max`.\n * `min` and `max` are inclusive.\n * If `min` is bigger than `max` on some axis, function always returns false.\n * You can use `vector.sort` if you have two vectors and don't know which are the minimum and the maximum.",
                "start": [
                    148,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                107,
                                27
                            ],
                            "name": "pos",
                            "start": [
                                107,
                                24
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                107,
                                32
                            ],
                            "name": "min",
                            "start": [
                                107,
                                29
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                107,
                                37
                            ],
                            "name": "max",
                            "start": [
                                107,
                                34
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "finish": [
                        107,
                        42
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        107,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.in_area(pos: vector.Vector, min: vector.Vector, max: vector.Vector)\n  -> boolean"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    107,
                    23
                ],
                "name": "in_area",
                "start": [
                    107,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "vector.in_area",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a scaled vector.\n * Deprecated: If `s` is a vector: Returns the Schur product.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                97,
                                26
                            ],
                            "name": "v",
                            "start": [
                                97,
                                25
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                97,
                                29
                            ],
                            "name": "s",
                            "start": [
                                97,
                                28
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": " * Returns a scaled vector.\n * Deprecated: If `s` is a vector: Returns the Schur product.",
                    "finish": [
                        97,
                        34
                    ],
                    "rawdesc": " * Returns a scaled vector.\n * Deprecated: If `s` is a vector: Returns the Schur product.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        97,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.multiply(v: vector.Vector, s: number)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    97,
                    24
                ],
                "name": "multiply",
                "rawdesc": " * Returns a scaled vector.\n * Deprecated: If `s` is a vector: Returns the Schur product.",
                "start": [
                    97,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                72,
                                26
                            ],
                            "name": "v",
                            "start": [
                                72,
                                25
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                72,
                                29
                            ],
                            "name": "s",
                            "start": [
                                72,
                                28
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "finish": [
                        72,
                        34
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        72,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.multiply(v: vector.Vector, s: number)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    72,
                    24
                ],
                "name": "multiply",
                "start": [
                    72,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "vector.multiply",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a new vector `(a, b, c)`.\n * Deprecated: `vector.new()` does the same as `vector.zero()` and\n   `vector.new(v)` does the same as `vector.copy(v)`",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                34,
                                21
                            ],
                            "name": "x",
                            "start": [
                                34,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                34,
                                24
                            ],
                            "name": "y",
                            "start": [
                                34,
                                23
                            ],
                            "type": "local",
                            "view": "number?"
                        },
                        {
                            "finish": [
                                34,
                                27
                            ],
                            "name": "z",
                            "start": [
                                34,
                                26
                            ],
                            "type": "local",
                            "view": "number?"
                        }
                    ],
                    "desc": " * Returns a new vector `(a, b, c)`.\n * Deprecated: `vector.new()` does the same as `vector.zero()` and\n   `vector.new(v)` does the same as `vector.copy(v)`",
                    "finish": [
                        34,
                        32
                    ],
                    "rawdesc": " * Returns a new vector `(a, b, c)`.\n * Deprecated: `vector.new()` does the same as `vector.zero()` and\n   `vector.new(v)` does the same as `vector.copy(v)`",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        34,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.new(x: number, y?: number, z?: number)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    34,
                    19
                ],
                "name": "new",
                "rawdesc": " * Returns a new vector `(a, b, c)`.\n * Deprecated: `vector.new()` does the same as `vector.zero()` and\n   `vector.new(v)` does the same as `vector.copy(v)`",
                "start": [
                    34,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                31,
                                21
                            ],
                            "name": "x",
                            "start": [
                                31,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                31,
                                24
                            ],
                            "name": "y",
                            "start": [
                                31,
                                23
                            ],
                            "type": "local",
                            "view": "number?"
                        },
                        {
                            "finish": [
                                31,
                                27
                            ],
                            "name": "z",
                            "start": [
                                31,
                                26
                            ],
                            "type": "local",
                            "view": "number?"
                        }
                    ],
                    "finish": [
                        31,
                        32
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        31,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.new(x: number, y?: number, z?: number)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    31,
                    19
                ],
                "name": "new",
                "start": [
                    31,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "vector.new",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a random integer position in area formed by `min` and `max`\n * `min` and `max` are inclusive.\n * You can use `vector.sort` if you have two vectors and don't know which are the minimum and the maximum.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                157,
                                34
                            ],
                            "name": "min",
                            "start": [
                                157,
                                31
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                157,
                                39
                            ],
                            "name": "max",
                            "start": [
                                157,
                                36
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "desc": " * Returns a random integer position in area formed by `min` and `max`\n * `min` and `max` are inclusive.\n * You can use `vector.sort` if you have two vectors and don't know which are the minimum and the maximum.",
                    "finish": [
                        157,
                        44
                    ],
                    "rawdesc": " * Returns a random integer position in area formed by `min` and `max`\n * `min` and `max` are inclusive.\n * You can use `vector.sort` if you have two vectors and don't know which are the minimum and the maximum.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        157,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.random_in_area(min: vector.Vector, max: vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    157,
                    30
                ],
                "name": "random_in_area",
                "rawdesc": " * Returns a random integer position in area formed by `min` and `max`\n * `min` and `max` are inclusive.\n * You can use `vector.sort` if you have two vectors and don't know which are the minimum and the maximum.",
                "start": [
                    157,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                113,
                                34
                            ],
                            "name": "min",
                            "start": [
                                113,
                                31
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                113,
                                39
                            ],
                            "name": "max",
                            "start": [
                                113,
                                36
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "finish": [
                        113,
                        44
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        113,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.random_in_area(min: vector.Vector, max: vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    113,
                    30
                ],
                "name": "random_in_area",
                "start": [
                    113,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "vector.random_in_area",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Applies the rotation `r` to `v` and returns the result.\n * `vector.rotate(vector.new(0, 0, 1), r)` and\n   `vector.rotate(vector.new(0, 1, 0), r)` return vectors pointing\n   forward and up relative to an entity's rotation `r`.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                118,
                                24
                            ],
                            "name": "v",
                            "start": [
                                118,
                                23
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                118,
                                27
                            ],
                            "name": "r",
                            "start": [
                                118,
                                26
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "desc": " * Applies the rotation `r` to `v` and returns the result.\n * `vector.rotate(vector.new(0, 0, 1), r)` and\n   `vector.rotate(vector.new(0, 1, 0), r)` return vectors pointing\n   forward and up relative to an entity's rotation `r`.",
                    "finish": [
                        118,
                        32
                    ],
                    "rawdesc": " * Applies the rotation `r` to `v` and returns the result.\n * `vector.rotate(vector.new(0, 0, 1), r)` and\n   `vector.rotate(vector.new(0, 1, 0), r)` return vectors pointing\n   forward and up relative to an entity's rotation `r`.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        118,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.rotate(v: vector.Vector, r: vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    118,
                    22
                ],
                "name": "rotate",
                "rawdesc": " * Applies the rotation `r` to `v` and returns the result.\n * `vector.rotate(vector.new(0, 0, 1), r)` and\n   `vector.rotate(vector.new(0, 1, 0), r)` return vectors pointing\n   forward and up relative to an entity's rotation `r`.",
                "start": [
                    118,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                87,
                                24
                            ],
                            "name": "v",
                            "start": [
                                87,
                                23
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                87,
                                27
                            ],
                            "name": "r",
                            "start": [
                                87,
                                26
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "finish": [
                        87,
                        32
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        87,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.rotate(v: vector.Vector, r: vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    87,
                    22
                ],
                "name": "rotate",
                "start": [
                    87,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "vector.rotate",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns `v1` rotated around axis `v2` by `a` radians according to\n   the right hand rule.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                127,
                                37
                            ],
                            "name": "v1",
                            "start": [
                                127,
                                35
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                127,
                                41
                            ],
                            "name": "v2",
                            "start": [
                                127,
                                39
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                127,
                                44
                            ],
                            "name": "a",
                            "start": [
                                127,
                                43
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": " * Returns `v1` rotated around axis `v2` by `a` radians according to\n   the right hand rule.",
                    "finish": [
                        127,
                        49
                    ],
                    "rawdesc": " * Returns `v1` rotated around axis `v2` by `a` radians according to\n   the right hand rule.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        127,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.rotate_around_axis(v1: vector.Vector, v2: vector.Vector, a: number)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    127,
                    34
                ],
                "name": "rotate_around_axis",
                "rawdesc": " * Returns `v1` rotated around axis `v2` by `a` radians according to\n   the right hand rule.",
                "start": [
                    127,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                94,
                                37
                            ],
                            "name": "v1",
                            "start": [
                                94,
                                35
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                94,
                                41
                            ],
                            "name": "v2",
                            "start": [
                                94,
                                39
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                94,
                                44
                            ],
                            "name": "a",
                            "start": [
                                94,
                                43
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "finish": [
                        94,
                        49
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        94,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.rotate_around_axis(v1: vector.Vector, v2: vector.Vector, a: number)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    94,
                    34
                ],
                "name": "rotate_around_axis",
                "start": [
                    94,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "vector.rotate_around_axis",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a vector.\n * If `x` is a vector: Returns the difference of `v` subtracted by `x`.\n * If `x` is a number: Subtracts `x` from each component of `v`.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                80,
                                26
                            ],
                            "name": "v",
                            "start": [
                                80,
                                25
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                80,
                                29
                            ],
                            "name": "x",
                            "start": [
                                80,
                                28
                            ],
                            "type": "local",
                            "view": "number|vector.Vector"
                        }
                    ],
                    "desc": " * Returns a vector.\n * If `x` is a vector: Returns the difference of `v` subtracted by `x`.\n * If `x` is a number: Subtracts `x` from each component of `v`.",
                    "finish": [
                        80,
                        34
                    ],
                    "rawdesc": " * Returns a vector.\n * If `x` is a vector: Returns the difference of `v` subtracted by `x`.\n * If `x` is a number: Subtracts `x` from each component of `v`.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        80,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.subtract(v: vector.Vector, x: number|vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    80,
                    24
                ],
                "name": "subtract",
                "rawdesc": " * Returns a vector.\n * If `x` is a vector: Returns the difference of `v` subtracted by `x`.\n * If `x` is a number: Subtracts `x` from each component of `v`.",
                "start": [
                    80,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a vector.\n * If `x` is a vector: Returns the difference of `v` subtracted by `x`.\n * If `x` is a number: Subtracts `x` from each component of `v`.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                89,
                                26
                            ],
                            "name": "v",
                            "start": [
                                89,
                                25
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                89,
                                29
                            ],
                            "name": "x",
                            "start": [
                                89,
                                28
                            ],
                            "type": "local",
                            "view": "number|vector.Vector"
                        }
                    ],
                    "desc": " * Returns a vector.\n * If `x` is a vector: Returns the difference of `v` subtracted by `x`.\n * If `x` is a number: Subtracts `x` from each component of `v`.",
                    "finish": [
                        89,
                        34
                    ],
                    "rawdesc": " * Returns a vector.\n * If `x` is a vector: Returns the difference of `v` subtracted by `x`.\n * If `x` is a number: Subtracts `x` from each component of `v`.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        89,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.subtract(v: vector.Vector, x: number|vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    89,
                    24
                ],
                "name": "subtract",
                "rawdesc": " * Returns a vector.\n * If `x` is a vector: Returns the difference of `v` subtracted by `x`.\n * If `x` is a number: Subtracts `x` from each component of `v`.",
                "start": [
                    89,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                60,
                                26
                            ],
                            "name": "v",
                            "start": [
                                60,
                                25
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                60,
                                29
                            ],
                            "name": "x",
                            "start": [
                                60,
                                28
                            ],
                            "type": "local",
                            "view": "number|vector.Vector"
                        }
                    ],
                    "finish": [
                        60,
                        34
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        60,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.subtract(v: vector.Vector, x: number|vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    60,
                    24
                ],
                "name": "subtract",
                "start": [
                    60,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                66,
                                26
                            ],
                            "name": "v",
                            "start": [
                                66,
                                25
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        },
                        {
                            "finish": [
                                66,
                                29
                            ],
                            "name": "x",
                            "start": [
                                66,
                                28
                            ],
                            "type": "local",
                            "view": "number|vector.Vector"
                        }
                    ],
                    "finish": [
                        66,
                        34
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        66,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.subtract(v: vector.Vector, x: number|vector.Vector)\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    66,
                    24
                ],
                "name": "subtract",
                "start": [
                    66,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "vector.subtract",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": " * Returns a string of the form `\"(x, y, z)\"`.\n *  `tostring(v)` does the same.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                54,
                                27
                            ],
                            "name": "v",
                            "start": [
                                54,
                                26
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "desc": " * Returns a string of the form `\"(x, y, z)\"`.\n *  `tostring(v)` does the same.",
                    "finish": [
                        54,
                        32
                    ],
                    "rawdesc": " * Returns a string of the form `\"(x, y, z)\"`.\n *  `tostring(v)` does the same.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        54,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.to_string(v: vector.Vector)\n  -> string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/library/vector.lua",
                "finish": [
                    54,
                    25
                ],
                "name": "to_string",
                "rawdesc": " * Returns a string of the form `\"(x, y, z)\"`.\n *  `tostring(v)` does the same.",
                "start": [
                    54,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                42,
                                27
                            ],
                            "name": "v",
                            "start": [
                                42,
                                26
                            ],
                            "type": "local",
                            "view": "vector.Vector"
                        }
                    ],
                    "finish": [
                        42,
                        32
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        42,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.to_string(v: vector.Vector)\n  -> string"
                },
                "file": "dev/lsp_definitions/luanti-lls-definitions/templates/vector.lua",
                "finish": [
                    42,
                    25
                ],
                "name": "to_string",
                "start": [
                    42,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "vector.to_string",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [],
                    "finish": [
                        39,
                        26
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "vector.Vector"
                        }
                    ],
                    "start": [
                        39,
                        0
                    ],
                    "type": "function",
                    "view": "function vector.zero()\n  -> vector.Vector"
                },
                "file": "dev/lsp_definitions/custom/core.lua",
                "finish": [
                    39,
                    20
                ],
                "name": "zero",
                "start": [
                    39,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "vector.zero",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nEmits a warning with a message composed by the concatenation of all its arguments (which should be strings).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-warn\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                405,
                                21
                            ],
                            "name": "message",
                            "start": [
                                405,
                                14
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                405,
                                26
                            ],
                            "start": [
                                405,
                                23
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nEmits a warning with a message composed by the concatenation of all its arguments (which should be strings).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-warn\"])",
                    "finish": [
                        405,
                        31
                    ],
                    "rawdesc": "\nEmits a warning with a message composed by the concatenation of all its arguments (which should be strings).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-warn\"])",
                    "start": [
                        405,
                        0
                    ],
                    "type": "function",
                    "view": "function warn(message: string, ...any)"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    405,
                    13
                ],
                "rawdesc": "\nEmits a warning with a message composed by the concatenation of all its arguments (which should be strings).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-warn\"])",
                "start": [
                    405,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "warn",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCalls function `f` with the given arguments in protected mode with a new message handler.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-xpcall\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                419,
                                17
                            ],
                            "name": "f",
                            "start": [
                                419,
                                16
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                419,
                                23
                            ],
                            "name": "msgh",
                            "start": [
                                419,
                                19
                            ],
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "finish": [
                                419,
                                29
                            ],
                            "name": "arg1",
                            "start": [
                                419,
                                25
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                419,
                                34
                            ],
                            "start": [
                                419,
                                31
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nCalls function `f` with the given arguments in protected mode with a new message handler.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-xpcall\"])",
                    "finish": [
                        419,
                        39
                    ],
                    "rawdesc": "\nCalls function `f` with the given arguments in protected mode with a new message handler.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-xpcall\"])",
                    "returns": [
                        {
                            "name": "success",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "result",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        419,
                        0
                    ],
                    "type": "function",
                    "view": "function xpcall(f: fun(...any):...unknown, msgh: function, arg1?: any, ...any)\n  -> success: boolean\n  2. result: any\n  3. ...any"
                },
                "file": "[FOREIGN] /home/et/.local/share/nvim/mason/packages/lua-language-server/libexec/meta/LuaJIT en-us utf8/basic.lua",
                "finish": [
                    419,
                    15
                ],
                "rawdesc": "\nCalls function `f` with the given arguments in protected mode with a new message handler.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-xpcall\"])",
                "start": [
                    419,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "xpcall",
        "type": "variable",
        "view": "unknown"
    }
]